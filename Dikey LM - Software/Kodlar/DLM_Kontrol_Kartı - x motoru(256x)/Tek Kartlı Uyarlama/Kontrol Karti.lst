CCS PCD C Compiler, Version 5.008, 5967               24-Eyl-14 12:34

               Filename:   C:\Users\osman_000\Desktop\yuklenmis kodlar\tobb - Copy\Götürülecek Kodlar\SON\DLM_Kontrol_Kartý - x motoru(256x)\Tek Kartlý Uyarlama\Kontrol Karti.lst

               ROM used:   2542 bytes (3%)
                           Largest free fragment is 62994
               RAM used:   335 (4%) at main() level
                           511 (6%) worst case
               Stack used: 62 locations
               Stack size: 128

*
00000:  GOTO    886
*
00026:  DATA    8C,01,00
*
00044:  DATA    00,01,00
.................... #INCLUDE <30f6015.h>  
.................... //////// Standard Header file for the DSPIC30F6015 device //////////////// 
.................... #device DSPIC30F6015 
*
001F2:  MOV     W5,[W15++]
001F4:  MOV     #C,W5
001F6:  REPEAT  #3
001F8:  MOV     [W5++],[W15++]
001FA:  MUL.UU  W0,W2,W4
001FC:  MUL.UU  W0,W3,W6
001FE:  BCLR.B  42.0
00200:  ADD     W6,W5,W5
00202:  ADDC    W7,#0,W8
00204:  MUL.UU  W1,W2,W6
00206:  ADDC    W6,W5,W5
00208:  ADDC    W7,W8,W8
0020A:  MUL.UU  W1,W3,W6
0020C:  ADD     W6,W8,W8
0020E:  ADDC    #0,W7
00210:  MOV     W7,W3
00212:  MOV     W8,W2
00214:  MOV     W5,W1
00216:  MOV     W4,W0
00218:  MOV     #12,W5
0021A:  REPEAT  #3
0021C:  MOV     [--W15],[W5--]
0021E:  MOV     [--W15],W5
00220:  RETURN  
00222:  MOV     W5,[W15++]
00224:  MOV     W6,[W15++]
00226:  MOV     W0,W4
00228:  MOV     W1,W5
0022A:  CLR     W0
0022C:  CLR     W1
0022E:  IOR      W4,  W5,W3
00230:  BRA     Z,254
00232:  CLR     W2
00234:  MOV     #B6,W1
00236:  BTSC    W2.7
00238:  BRA     248
0023A:  BCLR.B  42.0
0023C:  RLC     W4,W4
0023E:  RLC     W5,W5
00240:  RLC     W0,W0
00242:  RLC     W2,W2
00244:  DEC     W1,W1
00246:  BRA     NZ,236
00248:  SWAP    W1
0024A:  BCLR.B  42.0
0024C:  RRC     W1,W1
0024E:  BCLR    W1.F
00250:  BCLR    W2.7
00252:  XOR.B   W2L,W1L,W1L
00254:  MOV     [--W15],W6
00256:  MOV     [--W15],W5
00258:  RETURN  
0025A:  MOV     W5,[W15++]
0025C:  MOV     #C,W5
0025E:  REPEAT  #4
00260:  MOV     [W5++],[W15++]
00262:  MOV     W0,W4
00264:  MOV     W1,W5
00266:  MOV     W3,W7
00268:  MOV     W2,W6
0026A:  BCLR.B  42.0
0026C:  BCLR.B  42.1
0026E:  RLC     W1,W1
00270:  SWAP    W1
00272:  AND     #FF,W1
00274:  CP0     W1
00276:  BRA     Z,30E
00278:  BCLR.B  42.0
0027A:  BCLR.B  42.1
0027C:  RLC     W3,W3
0027E:  SWAP    W3
00280:  AND     #FF,W3
00282:  CP0     W3
00284:  BRA     Z,30E
00286:  ZE      W0,W0
00288:  ADD.B   W3L,W1L,W0L
0028A:  BRA     C,294
0028C:  SUB     #7F,W0
0028E:  BRA     Z,30E
00290:  BRA     NC,30E
00292:  BRA     298
00294:  ADD.B   #81,W0L
00296:  BRA     C,30E
00298:  XOR     W5,W7,W10
0029A:  BCLR.B  42.0
0029C:  BCLR.B  42.1
0029E:  AND     #FF,W5
002A0:  BSET    W5.7
002A2:  BCLR.B  42.0
002A4:  AND     #FF,W7
002A6:  BSET    W7.7
002A8:  MUL.UU  W4,W6,W2
002AA:  MUL.UU  W5,W6,W8
002AC:  ADDC    W8,W3,W3
002AE:  MOV     W9,W1
002B0:  BTSC.B  42.0
002B2:  INC     W1,W1
002B4:  BCLR.B  42.0
002B6:  MUL.UU  W7,W4,W8
002B8:  ADDC    W8,W3,W3
002BA:  ADDC    W9,W1,W1
002BC:  MUL.UU  W5,W7,W8
002BE:  ADDC    W8,W1,W1
002C0:  INC     W0,W0
002C2:  CP0     W1
002C4:  BTSC.B  42.1
002C6:  BRA     2CA
002C8:  BRA     2D0
002CA:  CP0     W3
002CC:  BTSC.B  42.1
002CE:  BRA     2DA
002D0:  BTSC    W1.F
002D2:  BRA     2DA
002D4:  RLC     W3,W3
002D6:  RLC     W1,W1
002D8:  DEC     W0,W0
002DA:  MOV     W1,W2
002DC:  BCLR.B  42.0
002DE:  BTSS    W3.7
002E0:  BRA     2F4
002E2:  MOV     #FF00,W7
002E4:  AND     W3,W7,W3
002E6:  ADD     #100,W3
002E8:  ADDC    W2,#0,W2
002EA:  CP0     W2
002EC:  BRA     NZ,2F4
002EE:  CP0     W3
002F0:  BRA     NZ,2F4
002F2:  INC     W0,W0
002F4:  SWAP    W0
002F6:  BCLR.B  42.0
002F8:  BCLR.B  42.1
002FA:  RRC     W0,W1
002FC:  BTSC    W10.F
002FE:  BSET    W1.F
00300:  BCLR    W2.F
00302:  SWAP    W2
00304:  XOR.B   W2L,W1L,W1L
00306:  SWAP    W3
00308:  MOV.B   W3L,W2L
0030A:  MOV     W2,W0
0030C:  BRA     314
0030E:  MOV     #0,W0
00310:  MOV     #0,W1
00312:  BRA     314
00314:  MOV     #14,W5
00316:  REPEAT  #4
00318:  MOV     [--W15],[W5--]
0031A:  MOV     [--W15],W5
0031C:  RETURN  
0031E:  MOV     W5,[W15++]
00320:  MOV     W1,W5
00322:  MOV     W0,W2
00324:  MOV     #B6,W4
00326:  RLC     W1,W1
00328:  SWAP    W1
0032A:  AND     #FF,W1
0032C:  SUB.B   W4L,W1L,W4L
0032E:  MOV.B   W5L,W3L
00330:  BSET    W3.7
00332:  AND     #FF,W3
00334:  CLR     W0
00336:  CLR     W1
00338:  BCLR.B  42.0
0033A:  RRC     W3,W3
0033C:  RRC     W2,W2
0033E:  RRC     W1,W1
00340:  RRC     W0,W0
00342:  DEC     W4,W4
00344:  BRA     NZ,338
00346:  BTSS    W5.F
00348:  BRA     356
0034A:  NEG     W0,W0
0034C:  BRA     Z,352
0034E:  COM     W1,W1
00350:  BRA     356
00352:  NEG     W1,W1
00354:  BRA     356
00356:  MOV     [--W15],W5
00358:  RETURN  
0035A:  MOV     W6,[W15++]
0035C:  MOV     W7,[W15++]
0035E:  MOV     W8,[W15++]
00360:  MOV     W9,[W15++]
00362:  CLR     W4
00364:  CLR     W5
00366:  CLR     W6
00368:  CLR     W7
0036A:  XOR     W2,W3,W8
0036C:  BRA     Z,390
0036E:  MOV     #20,W8
00370:  BCLR.B  42.0
00372:  RLC     W0,W0
00374:  RLC     W1,W1
00376:  RLC     W4,W4
00378:  RLC     W5,W5
0037A:  CP      W5,W3
0037C:  BRA     NZ,380
0037E:  CPB     W4,W2
00380:  BRA     NC,388
00382:  SUB     W4,W2,W4
00384:  SUBB    W5,W3,W5
00386:  BSET.B  42.0
00388:  RLC     W6,W6
0038A:  RLC     W7,W7
0038C:  DEC     W8,W8
0038E:  BRA     NZ,370
00390:  MOV     W7,W1
00392:  MOV     W6,W0
00394:  MOV     [--W15],W9
00396:  MOV     [--W15],W8
00398:  MOV     [--W15],W7
0039A:  MOV     [--W15],W6
0039C:  RETURN  
0039E:  MOV     W5,[W15++]
003A0:  MOV     #C,W5
003A2:  REPEAT  #7
003A4:  MOV     [W5++],[W15++]
003A6:  MOV     W0,W6
003A8:  MOV     W1,W7
003AA:  MOV     W4,W12
003AC:  BCLR    W4.F
003AE:  CP0     W4
003B0:  BRA     NZ,3B6
003B2:  MOV     #0,W5
003B4:  BRA     3D0
003B6:  SUB.B   W4L,#B,W5L
003B8:  BRA     NC,3CE
003BA:  MOV     #30,W0
003BC:  BTSS    W12.F
003BE:  MOV     #20,W0
003C0:  BTSC.B  219.1
003C2:  BRA     3C0
003C4:  MOV.B   W0L,21A
003C6:  DEC     W5,W5
003C8:  BRA     NN,3C0
003CA:  MOV     #A,W5
003CC:  BRA     3D0
003CE:  MOV     W4,W5
003D0:  MOV     #10,W8
003D2:  MOV     #0,W9
003D4:  LNK     #10
003D6:  MOV     W12,[W14+W8]
003D8:  DEC2    W8,W8
003DA:  BRA     NN,3D6
003DC:  MOV     #A,W4
003DE:  BSET    W5.E
003E0:  BTSC    W12.F
003E2:  BSET    W5.F
003E4:  MOV     W4,[W14]
003E6:  MOV     W5,[W14+#2]
003E8:  MOV     W6,W0
003EA:  MOV     W7,W1
003EC:  MOV     #CA00,W2
003EE:  MOV     #3B9A,W3
003F0:  MOV     #2710,W8
003F2:  BCLR    W13.F
003F4:  BTG     W13.F
003F6:  CALL    35A
003FA:  BTSC    W13.F
003FC:  BRA     40C
003FE:  MOV     W0,[W14+#8]
00400:  MOV     W1,[W14+#A]
00402:  MOV     W0,W2
00404:  MOV     W1,W3
00406:  MOV     [W14+#4],W0
00408:  MOV     [W14+#6],W1
0040A:  BRA     3F4
0040C:  MOV     W2,[W14+#8]
0040E:  MOV     W3,[W14+#A]
00410:  MOV     W4,[W14+#4]
00412:  MOV     W5,[W14+#6]
00414:  MOV     [W14],W4
00416:  MOV     [W14+#2],W5
00418:  MOV     #30,W6
0041A:  CP0     W0
0041C:  BRA     NZ,440
0041E:  BTSS    W5.E
00420:  BRA     444
00422:  DEC     W4,W4
00424:  MOV     W4,[W14]
00426:  CP0     W4
00428:  BRA     Z,444
0042A:  CP.B    W4L,W5L
0042C:  BTSC.B  42.0
0042E:  BRA     44C
00430:  MOV     #30,W6
00432:  CP0     W0
00434:  BRA     NZ,440
00436:  BTSS    W5.E
00438:  BRA     444
0043A:  BTSS    W5.F
0043C:  MOV     #20,W6
0043E:  BRA     444
00440:  BCLR    W5.E
00442:  MOV     W5,[W14+#2]
00444:  ADD.B   W6L,W0L,W0L
00446:  BTSC.B  219.1
00448:  BRA     446
0044A:  MOV.B   W0L,21A
0044C:  MOV     [W14+#8],W0
0044E:  MOV     [W14+#A],W1
00450:  MOV     #A,W2
00452:  CLR     W3
00454:  CP      W0,#1
00456:  BRA     Z,45A
00458:  BRA     3F4
0045A:  ULNK    
0045C:  MOV     #1A,W5
0045E:  REPEAT  #7
00460:  MOV     [--W15],[W5--]
00462:  MOV     [--W15],W5
00464:  RETURN  
*
0052E:  MOV     W5,[W15++]
00530:  MOV     #C,W5
00532:  REPEAT  #3
00534:  MOV     [W5++],[W15++]
00536:  MOV     W0,W7
00538:  MOV     W4,W9
0053A:  BCLR    W4.F
0053C:  CP0     W4
0053E:  BRA     NZ,54C
00540:  BTSC    W9.F
00542:  BRA     548
00544:  MOV     #0,W5
00546:  BRA     566
00548:  MOV     #0,W5
0054A:  BRA     566
0054C:  SUB.B   W4L,#6,W5L
0054E:  BRA     NC,564
00550:  MOV     #30,W0
00552:  BTSS    W9.F
00554:  MOV     #20,W0
00556:  BTSC.B  219.1
00558:  BRA     556
0055A:  MOV.B   W0L,21A
0055C:  DEC     W5,W5
0055E:  BRA     NN,556
00560:  MOV     #5,W5
00562:  BRA     566
00564:  MOV     W4,W5
00566:  MOV     #6,W4
00568:  BSET    W5.E
0056A:  BTSC    W9.F
0056C:  BSET    W5.F
0056E:  MOV     #2710,W8
00570:  REPEAT  #11
00572:  DIV.U   W7,W8
00574:  CALL    5A8
00578:  MOV     W1,W7
0057A:  MOV     #3E8,W8
0057C:  REPEAT  #11
0057E:  DIV.U   W7,W8
00580:  CALL    5A8
00584:  MOV     W1,W7
00586:  MOV     #64,W8
00588:  REPEAT  #11
0058A:  DIV.U   W7,W8
0058C:  CALL    5A8
00590:  MOV     W1,W7
00592:  MOV     #A,W8
00594:  REPEAT  #11
00596:  DIV.U   W7,W8
00598:  CALL    5A8
0059C:  MOV     #30,W0
0059E:  ADD.B   W1L,W0L,W0L
005A0:  BTSC.B  219.1
005A2:  BRA     5A0
005A4:  MOV.B   W0L,21A
005A6:  BRA     5D6
005A8:  MOV     #30,W6
005AA:  CP0     W0
005AC:  BRA     NZ,5CA
005AE:  BTSS    W5.E
005B0:  BRA     5CC
005B2:  DEC     W4,W4
005B4:  CP.B    W4L,W5L
005B6:  BRA     Z,5BC
005B8:  BTSC.B  42.0
005BA:  RETURN  
005BC:  CP0     W0
005BE:  BRA     NZ,5CA
005C0:  BTSS    W5.E
005C2:  BRA     5CC
005C4:  BTSS    W5.F
005C6:  MOV     #20,W6
005C8:  BRA     5CC
005CA:  BCLR    W5.E
005CC:  ADD.B   W6L,W0L,W0L
005CE:  BTSC.B  219.1
005D0:  BRA     5CE
005D2:  MOV.B   W0L,21A
005D4:  RETURN  
005D6:  MOV     #12,W5
005D8:  REPEAT  #3
005DA:  MOV     [--W15],[W5--]
005DC:  MOV     [--W15],W5
005DE:  RETURN  
....................  
.................... #list 
....................  
.................... #DEVICE ADC=10                                                    // Configures the read_adc return size as 10 bit 
.................... #INCLUDE <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                                                      // No Watch Dog Timer  
.................... #FUSES HS2_PLL16                                                  // HS crystal, Freq=16*(Fcryst/2) 
.................... #FUSES NOCKSFSM                                                   // Clock Switching is disabled, fail Safe clock monitor is disabled  
.................... #FUSES BROWNOUT                                                   // Reset when brownout detected  
.................... #FUSES NOPROTECT                                                  // Code not protected from reading  
.................... #FUSES NOWRT                                                      // Program memory not write protected  
.................... #FUSES NODEBUG                                                    // No Debug mode for ICD 
....................  
.................... #USE DELAY(clock=120000000)                                       // delay() func. adjusted for 120Mhz Primary Osc. 
*
004AE:  CP0     W0
004B0:  BTSC.B  42.1
004B2:  BRA     4C0
004B4:  REPEAT  #352B
004B6:  NOP     
004B8:  REPEAT  #3FFE
004BA:  NOP     
004BC:  DEC     W0,W0
004BE:  BRA     NZ,4B4
004C0:  RETURN  
.................... #USE RS232(stream=RS485,UART1,baud=38400,ENABLE=PIN_G3,parity=N,bits=8,stop=1)  // Set UART1 as RS485 stream 
.................... #USE RS232(stream=RS232,UART2,baud=38400,parity=N,bits=8,stop=1)  // Set UART2 as RS232 stream 
....................  
.................... // Registers of the UART1 module 
.................... #WORD UART_IFS0          = 0x088           // UART Interrupt Flag Status Register 
.................... // Bits of the IFS0 register 
.................... #BIT UART_IFS0_U1RXIF    = UART_IFS0.9     // UART Receiver Interrupt flag status bit   
.................... #BIT UART_IFS0_U1TXIF    = UART_IFS0.10    // UART Transmiter Interrupt flag status bit   
....................  
.................... // Led pins 
.................... #DEFINE LED          PIN_B8               // Led used in debugging 
....................  
.................... #DEFINE FLAG_X       PIN_B0               // Y Motor driver is busy when pin high. Input 
.................... #DEFINE FLAG_Y       PIN_B1               // X Motor driver is busy when pin high. Input 
.................... //!#DEFINE LASER_FLAG   PIN_D6            //Laser Writes when high. Output 
.................... #DEFINE LASER_FLAG   PIN_D10              //Laser Writes when high. Output 
.................... #DEFINE RX_Disable   PIN_G2               //If low Receive enabled. 
.................... #DEFINE TX_Enable    PIN_G3               //If high Transmit enabbled. 
....................  
.................... char address = 'x'; 
.................... char start_bit =  '<'; 
.................... char stop_bit  =  '>'; 
.................... char SMD_Uart_READY  = 1; 
.................... char start_bit_got=0; 
.................... char checking_data=0; 
.................... char READY = 1; 
.................... char LASER = 0; 
.................... float step_for_1um = 5.12; 
.................... char Laser_Control=0; 
....................  
.................... char buffer_485[14]; 
.................... unsigned int data_485_size=0; 
....................  
.................... void send_data_single(unsigned int32 data) 
.................... { 
....................    fprintf(RS232,"G%07lu", data); 
*
00466:  BTSC.B  219.1
00468:  BRA     466
0046A:  MOV.B   #47,W0L
0046C:  MOV.B   W0L,21A
0046E:  MOV     970,W0
00470:  MOV     972,W1
00472:  MOV     #8007,W4
00474:  CALL    39E
00478:  RETURN  
.................... } 
....................  
.................... void send_data_array(unsigned int32 data) 
.................... { 
....................    fprintf(RS232,"G%07lu", data); 
....................    char bytes[8]; 
....................    sprintf(bytes, "G%07lu", data); 
....................    unsigned int i=0; 
....................    for(i=0; i<8; i++) 
....................    { 
....................       fputc(bytes[i],RS232); 
....................       delay_ms(1); 
....................    } 
.................... } 
....................  
.................... void send_go(unsigned int32 pos) 
.................... { 
....................    SMD_Uart_READY =  0; 
0047A:  CLR.B   8B3
....................    unsigned int32 step = pos * step_for_1um; //needs 1.28 steps to move 10um in 64 microstepping mode 
0047C:  MOV     95C,W0
0047E:  MOV     95E,W1
00480:  CALL    222
00484:  MOV     8B8,W2
00486:  MOV     8BA,W3
00488:  CALL    25A
0048C:  CALL    31E
00490:  MOV     W0,960
00492:  MOV     W1,962
....................    send_data_single(step); 
00494:  PUSH    960
00496:  POP     970
00498:  PUSH    962
0049A:  POP     972
0049C:  CALL    466
....................     
....................    while(READY);     //yola cýkmasýný bekle 
004A0:  CP0.B   8B6
004A2:  BRA     NZ,4A0
....................    //M geldi=yola çýktý 
....................    while(!READY);    //READY bekle 
004A4:  CP0.B   8B6
004A6:  BRA     Z,4A4
....................    //R geldi=Hedefe ulastý 
....................    SMD_Uart_READY =  1; 
004A8:  MOV.B   #1,W0L
004AA:  MOV.B   W0L,8B3
004AC:  RETURN  
.................... } 
....................  
.................... void send_write(unsigned int32 start_pos, unsigned int32 stop_pos) 
.................... { 
....................    SMD_Uart_READY =  0; 
*
004C2:  CLR.B   8B3
....................    unsigned int32 step = start_pos * step_for_1um; //needs 1.28 steps to move 10um in 64 microstepping mode  
004C4:  MOV     95C,W0
004C6:  MOV     95E,W1
004C8:  CALL    222
004CC:  MOV     8B8,W2
004CE:  MOV     8BA,W3
004D0:  CALL    25A
004D4:  CALL    31E
004D8:  MOV     W0,964
004DA:  MOV     W1,966
....................    send_data_single(step); 
004DC:  PUSH    964
004DE:  POP     970
004E0:  PUSH    966
004E2:  POP     972
004E4:  CALL    466
....................     
....................    while(READY);     //yola cýkmasýný bekle 
004E8:  CP0.B   8B6
004EA:  BRA     NZ,4E8
....................    //M geldi=yola çýktý 
....................    while(!READY);    //READY bekle 
004EC:  CP0.B   8B6
004EE:  BRA     Z,4EC
....................    //R geldi=Hedefe ulastý 
....................     
....................    delay_ms(1000); 
004F0:  MOV     #3E8,W0
004F2:  CALL    4AE
....................    Laser_Control=1; 
004F6:  MOV.B   #1,W0L
004F8:  MOV.B   W0L,8BC
....................    step = stop_pos * step_for_1um; 
004FA:  MOV     960,W0
004FC:  MOV     962,W1
004FE:  CALL    222
00502:  MOV     8B8,W2
00504:  MOV     8BA,W3
00506:  CALL    25A
0050A:  CALL    31E
0050E:  MOV     W0,964
00510:  MOV     W1,966
....................    send_data_single(step); 
00512:  PUSH    964
00514:  POP     970
00516:  PUSH    966
00518:  POP     972
0051A:  CALL    466
....................     
....................    while(READY);     //yola cýkmasýný bekle 
0051E:  CP0.B   8B6
00520:  BRA     NZ,51E
....................    //M geldi=yola çýktý 
....................    while(!READY);    //READY bekle   
00522:  CP0.B   8B6
00524:  BRA     Z,522
....................    //R geldi=Hedefe ulastý 
....................    Laser_Control=0; 
00526:  CLR.B   8BC
....................    SMD_Uart_READY =  1; 
00528:  MOV.B   #1,W0L
0052A:  MOV.B   W0L,8B3
0052C:  RETURN  
.................... } 
....................  
.................... void send_speed(unsigned int16 delay) 
.................... { 
....................    fprintf(RS232,"S%03u", delay); 
*
005E0:  BTSC.B  219.1
005E2:  BRA     5E0
005E4:  MOV.B   #53,W0L
005E6:  MOV.B   W0L,21A
005E8:  MOV     95C,W0
005EA:  MOV     #8003,W4
005EC:  CALL    52E
005F0:  RETURN  
.................... } 
....................  
.................... void check_rs485_message() 
005F2:  MOV     W5,[W15++]
005F4:  MOV     W6,[W15++]
005F6:  MOV     W7,[W15++]
005F8:  CLR     8D0
.................... { 
....................       unsigned int i=0; 
....................       switch (buffer_485[1])     //P ya da W ya da S? 
005FA:  MOV.B   8BF,W0L
005FC:  CLR.B   1
005FE:  XOR     #70,W0
00600:  BRA     Z,610
00602:  XOR     #7,W0
00604:  BRA     Z,6C4
00606:  XOR     #4,W0
00608:  BRA     Z,7EC
0060A:  XOR     #1F,W0
0060C:  BRA     Z,846
0060E:  BRA     87C
....................       { 
....................          case 'p':   if(data_485_size==8) 
00610:  MOV     8CC,W4
00612:  CP      W4,#8
00614:  BRA     NZ,6C0
....................                      { 
....................                         unsigned int32 input_p[6]; 
....................                         for(i=0; i<6; i++) 
00616:  CLR     8D0
00618:  MOV     8D0,W4
0061A:  CP      W4,#6
0061C:  BRA     C,644
....................                         { 
....................                            input_p[i]=(unsigned)buffer_485[i+2]-48; 
0061E:  MOV     8D0,W0
00620:  SL      W0,#2,W0
00622:  MOV     #8D2,W4
00624:  ADD     W0,W4,W5
00626:  MOV     8D0,W4
00628:  ADD     W4,#2,W4
0062A:  MOV     W4,W6
0062C:  MOV     #8BE,W4
0062E:  ADD     W6,W4,W0
00630:  MOV     W0,W4
00632:  MOV.B   [W4],W0L
00634:  SE      W0,W7
00636:  MOV     #30,W4
00638:  SUB     W7,W4,[W5]
0063A:  MOV     #0,W4
0063C:  MOV     W4,[W5+#2]
0063E:  INC     08D0
00640:  GOTO    618
....................                         } 
....................                         unsigned int32 pos = 100000*input_p[0]+10000*input_p[1]+1000*input_p[2]+100*input_p[3]+10*input_p[4]+1*input_p[5]; 
00644:  MOV     #86A0,W0
00646:  MOV     #1,W1
00648:  MOV     8D2,W2
0064A:  MOV     8D4,W3
0064C:  CALL    1F2
00650:  MOV     W0,W5
00652:  MOV     W1,W6
00654:  MOV     #2710,W0
00656:  MOV     #0,W1
00658:  MOV     8D6,W2
0065A:  MOV     8D8,W3
0065C:  CALL    1F2
00660:  ADD     W0,W5,W5
00662:  ADDC    W1,W6,W6
00664:  MOV     #3E8,W0
00666:  MOV     #0,W1
00668:  MOV     8DA,W2
0066A:  MOV     8DC,W3
0066C:  CALL    1F2
00670:  ADD     W0,W5,W5
00672:  ADDC    W1,W6,W6
00674:  MOV     #64,W0
00676:  MOV     #0,W1
00678:  MOV     8DE,W2
0067A:  MOV     8E0,W3
0067C:  CALL    1F2
00680:  ADD     W0,W5,W5
00682:  ADDC    W1,W6,W6
00684:  MOV     #A,W0
00686:  MOV     #0,W1
00688:  MOV     8E2,W2
0068A:  MOV     8E4,W3
0068C:  CALL    1F2
00690:  ADD     W0,W5,W5
00692:  ADDC    W1,W6,W6
00694:  MOV     W5,W0
00696:  ADD     8E6,W0
00698:  MOV     W0,8EA
0069A:  MOV     8E8,W4
0069C:  ADDC    W6,W4,W0
0069E:  MOV     W0,8EC
....................                         if(pos <= 350000) 
006A0:  MOV     8EC,W4
006A2:  CP      W4,#5
006A4:  BRA     GTU,6C0
006A6:  BRA     NC,6B0
006A8:  MOV     8EA,W4
006AA:  MOV     #5730,W3
006AC:  CP      W3,W4
006AE:  BRA     NC,6C0
....................                         { 
....................                            if(SMD_Uart_READY) 
006B0:  CP0.B   8B3
006B2:  BRA     Z,6C0
....................                            { 
....................                               send_go(pos); 
006B4:  PUSH    8EA
006B6:  POP     95C
006B8:  PUSH    8EC
006BA:  POP     95E
006BC:  CALL    47A
....................                            } 
....................                         } 
....................                      }   
....................                      break; 
006C0:  GOTO    87E
....................                       
....................          case 'w':   if(data_485_size==14) 
006C4:  MOV     8CC,W4
006C6:  CP      W4,#E
006C8:  BRA     NZ,7E8
....................                      { 
....................                         unsigned int32 input_w[12]; 
....................                         for(i=0; i<12; i++) 
006CA:  CLR     8D0
006CC:  MOV     8D0,W4
006CE:  CP      W4,#C
006D0:  BRA     C,6F8
....................                         { 
....................                            input_w[i]=(unsigned)buffer_485[i+2]-48; 
006D2:  MOV     8D0,W0
006D4:  SL      W0,#2,W0
006D6:  MOV     #8EE,W4
006D8:  ADD     W0,W4,W5
006DA:  MOV     8D0,W4
006DC:  ADD     W4,#2,W4
006DE:  MOV     W4,W6
006E0:  MOV     #8BE,W4
006E2:  ADD     W6,W4,W0
006E4:  MOV     W0,W4
006E6:  MOV.B   [W4],W0L
006E8:  SE      W0,W7
006EA:  MOV     #30,W4
006EC:  SUB     W7,W4,[W5]
006EE:  MOV     #0,W4
006F0:  MOV     W4,[W5+#2]
006F2:  INC     08D0
006F4:  GOTO    6CC
....................                         } 
....................                         unsigned int32 start_pos = 100000*input_w[0]+10000*input_w[1]+1000*input_w[2]+100*input_w[3]+10*input_w[4]+1*input_w[5]; 
....................                         unsigned int32 stop_pos  = 100000*input_w[6]+10000*input_w[7]+1000*input_w[8]+100*input_w[9]+10*input_w[10]+1*input_w[11]; 
006F8:  MOV     #86A0,W0
006FA:  MOV     #1,W1
006FC:  MOV     8EE,W2
006FE:  MOV     8F0,W3
00700:  CALL    1F2
00704:  MOV     W0,W5
00706:  MOV     W1,W6
00708:  MOV     #2710,W0
0070A:  MOV     #0,W1
0070C:  MOV     8F2,W2
0070E:  MOV     8F4,W3
00710:  CALL    1F2
00714:  ADD     W0,W5,W5
00716:  ADDC    W1,W6,W6
00718:  MOV     #3E8,W0
0071A:  MOV     #0,W1
0071C:  MOV     8F6,W2
0071E:  MOV     8F8,W3
00720:  CALL    1F2
00724:  ADD     W0,W5,W5
00726:  ADDC    W1,W6,W6
00728:  MOV     #64,W0
0072A:  MOV     #0,W1
0072C:  MOV     8FA,W2
0072E:  MOV     8FC,W3
00730:  CALL    1F2
00734:  ADD     W0,W5,W5
00736:  ADDC    W1,W6,W6
00738:  MOV     #A,W0
0073A:  MOV     #0,W1
0073C:  MOV     8FE,W2
0073E:  MOV     900,W3
00740:  CALL    1F2
00744:  ADD     W0,W5,W5
00746:  ADDC    W1,W6,W6
00748:  MOV     W5,W0
0074A:  ADD     902,W0
0074C:  MOV     W0,91E
0074E:  MOV     904,W4
00750:  ADDC    W6,W4,W0
00752:  MOV     W0,920
00754:  MOV     #86A0,W0
00756:  MOV     #1,W1
00758:  MOV     906,W2
0075A:  MOV     908,W3
0075C:  CALL    1F2
00760:  MOV     W0,W5
00762:  MOV     W1,W6
00764:  MOV     #2710,W0
00766:  MOV     #0,W1
00768:  MOV     90A,W2
0076A:  MOV     90C,W3
0076C:  CALL    1F2
00770:  ADD     W0,W5,W5
00772:  ADDC    W1,W6,W6
00774:  MOV     #3E8,W0
00776:  MOV     #0,W1
00778:  MOV     90E,W2
0077A:  MOV     910,W3
0077C:  CALL    1F2
00780:  ADD     W0,W5,W5
00782:  ADDC    W1,W6,W6
00784:  MOV     #64,W0
00786:  MOV     #0,W1
00788:  MOV     912,W2
0078A:  MOV     914,W3
0078C:  CALL    1F2
00790:  ADD     W0,W5,W5
00792:  ADDC    W1,W6,W6
00794:  MOV     #A,W0
00796:  MOV     #0,W1
00798:  MOV     916,W2
0079A:  MOV     918,W3
0079C:  CALL    1F2
007A0:  ADD     W0,W5,W5
007A2:  ADDC    W1,W6,W6
007A4:  MOV     W5,W0
007A6:  ADD     91A,W0
007A8:  MOV     W0,922
007AA:  MOV     91C,W4
007AC:  ADDC    W6,W4,W0
007AE:  MOV     W0,924
....................                         if(start_pos <= 350000 && stop_pos <= 350000) 
007B0:  MOV     920,W4
007B2:  CP      W4,#5
007B4:  BRA     GTU,7E8
007B6:  BRA     NC,7C0
007B8:  MOV     91E,W4
007BA:  MOV     #5730,W3
007BC:  CP      W3,W4
007BE:  BRA     NC,7E8
007C0:  MOV     924,W4
007C2:  CP      W4,#5
007C4:  BRA     GTU,7E8
007C6:  BRA     NC,7D0
007C8:  MOV     922,W4
007CA:  MOV     #5730,W3
007CC:  CP      W3,W4
007CE:  BRA     NC,7E8
....................                         { 
....................                            if(SMD_Uart_READY) 
007D0:  CP0.B   8B3
007D2:  BRA     Z,7E8
....................                            { 
....................                               send_write(start_pos, stop_pos);   
007D4:  PUSH    91E
007D6:  POP     95C
007D8:  PUSH    920
007DA:  POP     95E
007DC:  PUSH    922
007DE:  POP     960
007E0:  PUSH    924
007E2:  POP     962
007E4:  CALL    4C2
....................                            }    
....................                         } 
....................                      }   
....................                      break; 
007E8:  GOTO    87E
....................                       
....................          case 's':   if(data_485_size==5) 
007EC:  MOV     8CC,W4
007EE:  CP      W4,#5
007F0:  BRA     NZ,842
....................                      { 
....................                         unsigned int input_s[3]; 
....................                         for(i=0; i<3; i++) 
007F2:  CLR     8D0
007F4:  MOV     8D0,W4
007F6:  CP      W4,#3
007F8:  BRA     C,81C
....................                         { 
....................                            input_s[i]=(unsigned)buffer_485[i+2]-48; 
007FA:  MOV     8D0,W0
007FC:  SL      W0,#1,W0
007FE:  MOV     #926,W4
00800:  ADD     W0,W4,W5
00802:  MOV     8D0,W4
00804:  ADD     W4,#2,W4
00806:  MOV     W4,W6
00808:  MOV     #8BE,W4
0080A:  ADD     W6,W4,W0
0080C:  MOV     W0,W4
0080E:  MOV.B   [W4],W0L
00810:  SE      W0,W7
00812:  MOV     #30,W4
00814:  SUB     W7,W4,[W5]
00816:  INC     08D0
00818:  GOTO    7F4
....................                         } 
....................                         unsigned int16 delay = 100*input_s[0]+10*input_s[1]+1*input_s[2]; 
0081C:  MOV     #64,W4
0081E:  MOV     926,W3
00820:  MUL.UU  W4,W3,W0
00822:  MOV     W0,W5
00824:  MOV     928,W4
00826:  MUL.UU  W4,#A,W0
00828:  ADD     W0,W5,W5
0082A:  MOV     W5,W0
0082C:  ADD     92A,W0
0082E:  MOV     W0,92C
....................                         if(delay >= 14) 
00830:  MOV     92C,W4
00832:  CP      W4,#E
00834:  BRA     NC,842
....................                         { 
....................                            if(SMD_Uart_READY) 
00836:  CP0.B   8B3
00838:  BRA     Z,842
....................                            { 
....................                               send_speed(delay);;   
0083A:  PUSH    92C
0083C:  POP     95C
0083E:  CALL    5E0
....................                            }    
....................                         } 
....................                      }   
....................                      break; 
00842:  GOTO    87E
....................                       
....................          case 'l':   if(data_485_size==3) 
00846:  MOV     8CC,W4
00848:  CP      W4,#3
0084A:  BRA     NZ,878
....................                      { 
....................                         if(buffer_485[2]-48==1) 
0084C:  MOV.B   8C0,W0L
0084E:  SE      W0,W0
00850:  MOV     #30,W4
00852:  SUB     W0,W4,W5
00854:  CP      W5,#1
00856:  BRA     NZ,864
....................                         { 
....................                            //laser_aç 
....................                            output_high(Laser_Flag); 
00858:  BCLR.B  2D3.2
0085A:  BSET.B  2D7.2
....................                            output_high(LED); 
0085C:  BCLR.B  2C7.0
0085E:  BSET.B  2CB.0
....................                         } 
00860:  GOTO    878
....................                         else if(buffer_485[2]-48==0) 
00864:  MOV.B   8C0,W0L
00866:  SE      W0,W0
00868:  MOV     #30,W4
0086A:  SUB     W0,W4,W5
0086C:  CP0     W5
0086E:  BRA     NZ,878
....................                         { 
....................                            //laser_kapat 
....................                            output_low(Laser_Flag); 
00870:  BCLR.B  2D3.2
00872:  BCLR.B  2D7.2
....................                            output_low(LED); 
00874:  BCLR.B  2C7.0
00876:  BCLR.B  2CB.0
....................                         } 
....................                          
....................                      }   
....................                      break; 
00878:  GOTO    87E
....................                       
....................          default :   return; 
0087C:  BRA     87E
....................       } 
0087E:  MOV     [--W15],W7
00880:  MOV     [--W15],W6
00882:  MOV     [--W15],W5
00884:  RETURN  
.................... } 
....................  
.................... // RS232 receive byte interrupt 
.................... #INT_RDA2 
.................... void isr_rs232_message() 
*
00100:  PUSH    42
00102:  PUSH    36
00104:  PUSH    32
00106:  MOV     W0,[W15++]
00108:  MOV     #2,W0
0010A:  REPEAT  #C
0010C:  MOV     [W0++],[W15++]
0010E:  BTSS.B  218.0
00110:  BRA     10E
00112:  MOV     21C,W0
00114:  MOV.B   W0L,980
.................... { 
....................       char input = fgetc(RS232); 
....................       if(input=='M')      //moving=motor driver is busy 
00116:  MOV     980,W4
00118:  XOR.B   #4D,W4L
0011A:  BRA     NZ,122
....................       { 
....................          READY=0; 
0011C:  CLR.B   8B6
....................       } 
0011E:  GOTO    17A
....................       else if(input=='A')      //accel completed= laser should turn on 
00122:  MOV     980,W4
00124:  XOR.B   #41,W4L
00126:  BRA     NZ,140
....................       { 
....................          if(Laser_Control==1) 
00128:  MOV.B   8BC,W0L
0012A:  SE      W0,W0
0012C:  CP      W0,#1
0012E:  BRA     NZ,13C
....................          { 
....................             LASER=1; 
00130:  MOV.B   #1,W0L
00132:  MOV.B   W0L,8B7
....................             output_high(Laser_Flag); 
00134:  BCLR.B  2D3.2
00136:  BSET.B  2D7.2
....................             output_high(LED); 
00138:  BCLR.B  2C7.0
0013A:  BSET.B  2CB.0
....................          } 
....................           
....................       } 
0013C:  GOTO    17A
....................       else if(input=='D')      //Decel started=laser should turn off 
00140:  MOV     980,W4
00142:  XOR.B   #44,W4L
00144:  BRA     NZ,15C
....................       { 
....................          if(Laser_Control==1) 
00146:  MOV.B   8BC,W0L
00148:  SE      W0,W0
0014A:  CP      W0,#1
0014C:  BRA     NZ,158
....................          { 
....................             LASER=0; 
0014E:  CLR.B   8B7
....................             output_low(Laser_Flag); 
00150:  BCLR.B  2D3.2
00152:  BCLR.B  2D7.2
....................             output_low(LED); 
00154:  BCLR.B  2C7.0
00156:  BCLR.B  2CB.0
....................          } 
....................       } 
00158:  GOTO    17A
....................       else if(input=='R')      //Reached to destination=now ready 
0015C:  MOV     980,W4
0015E:  XOR.B   #52,W4L
00160:  BRA     NZ,16A
....................       { 
....................          READY=1; 
00162:  MOV.B   #1,W0L
00164:  MOV.B   W0L,8B6
....................       }    
00166:  GOTO    17A
....................       else if(input=='L')      //Limit triggered=emergency stop 
0016A:  MOV     980,W4
0016C:  XOR.B   #4C,W4L
0016E:  BRA     NZ,17A
....................       { 
....................          LASER=0; 
00170:  CLR.B   8B7
....................          output_low(Laser_Flag); 
00172:  BCLR.B  2D3.2
00174:  BCLR.B  2D7.2
....................          output_low(LED); 
00176:  BCLR.B  2C7.0
00178:  BCLR.B  2CB.0
....................       }      
.................... } 
....................  
.................... // RS485 receive byte interrupt 
0017A:  BCLR.B  87.0
0017C:  MOV     #1A,W0
0017E:  REPEAT  #C
00180:  MOV     [--W15],[W0--]
00182:  MOV     [--W15],W0
00184:  POP     32
00186:  POP     36
00188:  POP     42
0018A:  RETFIE  
.................... #INT_RDA 
.................... void isr_rs485_message() 
0018C:  PUSH    42
0018E:  PUSH    36
00190:  PUSH    32
00192:  MOV     W0,[W15++]
00194:  MOV     #2,W0
00196:  REPEAT  #C
00198:  MOV     [W0++],[W15++]
0019A:  BTSS.B  20E.0
0019C:  BRA     19A
0019E:  MOV     212,W0
001A0:  MOV.B   W0L,980
.................... { 
....................    // Receive the RS485 message 
....................    char input = fgetc(RS485); 
....................    if(checking_data==0) 
001A2:  MOV.B   8B5,W0L
001A4:  SE      W0,W0
001A6:  CP0     W0
001A8:  BRA     NZ,1E0
....................    { 
....................       if(input == start_bit)  
001AA:  MOV.B   980,W0L
001AC:  CP.B    8B1
001AE:  BRA     NZ,1BA
....................       {   
....................          //start biti geldi, datalarý buffera dizmeye baslayalým 
....................          start_bit_got=1; 
001B0:  MOV.B   #1,W0L
001B2:  MOV.B   W0L,8B4
....................          data_485_size=0; 
001B4:  CLR     8CC
....................       } 
001B6:  GOTO    1E0
....................       else if(input == stop_bit) 
001BA:  MOV.B   980,W0L
001BC:  CP.B    8B2
001BE:  BRA     NZ,1D0
....................       { 
....................          //stop biti geldi. Þimdi datayý iþleme alalým burada iþlenecek 
....................          start_bit_got=0; 
001C0:  CLR.B   8B4
....................          if(buffer_485[0]==address) 
001C2:  MOV.B   8BE,W0L
001C4:  CP.B    8B0
001C6:  BRA     NZ,1CC
....................          { 
....................             checking_data=1; 
001C8:  MOV.B   #1,W0L
001CA:  MOV.B   W0L,8B5
....................          } 
....................       } 
001CC:  GOTO    1E0
....................       else if(start_bit_got) 
001D0:  CP0.B   8B4
001D2:  BRA     Z,1E0
....................       {   
....................          //start biti gelmiþti. Gelen datayý buffer'a dizelim 
....................          buffer_485[data_485_size]=input; 
001D4:  MOV     #8BE,W4
001D6:  MOV     8CC,W3
001D8:  ADD     W3,W4,W5
001DA:  MOV     980,W0
001DC:  MOV.B   W0L,[W5+#0]
....................          data_485_size++; 
001DE:  INC     08CC
....................       } 
....................    } 
001E0:  BCLR.B  85.1
001E2:  MOV     #1A,W0
001E4:  REPEAT  #C
001E6:  MOV     [--W15],[W0--]
001E8:  MOV     [--W15],W0
001EA:  POP     32
001EC:  POP     36
001EE:  POP     42
001F0:  RETFIE  
.................... }  
....................  
.................... // Main method 
.................... void main() 
*
00886:  BSET.B  81.7
00888:  BCLR.B  2E4.3
0088A:  BCLR.B  2E8.3
0088C:  MOV     #8000,W4
0088E:  MOV     W4,20C
00890:  MOV     #400,W4
00892:  MOV     W4,20E
00894:  MOV     #30,W4
00896:  MOV     W4,214
00898:  MOV     #8000,W4
0089A:  MOV     W4,216
0089C:  MOV     #400,W4
0089E:  MOV     W4,218
008A0:  MOV     #30,W4
008A2:  MOV     W4,21E
008A4:  MOV.B   #78,W0L
008A6:  MOV.B   W0L,8B0
008A8:  MOV.B   #3C,W0L
008AA:  MOV.B   W0L,8B1
008AC:  MOV.B   #3E,W0L
008AE:  MOV.B   W0L,8B2
008B0:  MOV.B   #1,W0L
008B2:  MOV.B   W0L,8B3
008B4:  CLR.B   8B4
008B6:  CLR.B   8B5
008B8:  MOV.B   #1,W0L
008BA:  MOV.B   W0L,8B6
008BC:  CLR.B   8B7
008BE:  MOV     #D70A,W4
008C0:  MOV     W4,8B8
008C2:  MOV     #40A3,W4
008C4:  MOV     W4,8BA
008C6:  CLR.B   8BC
008C8:  CLR     8CC
008CA:  SETM    2A8
008CC:  MOV     #2780,W15
008CE:  MOV     #27FF,W0
008D0:  MOV     W0,20
008D2:  NOP     
008D4:  BRA     96A
008D6:  DATA    C0,06,08
008D8:  DATA    00,00,00
008DA:  DATA    4B,F0,3F
008DC:  DATA    5C,0A,58
008DE:  DATA    F6,3B,8F
008E0:  DATA    00,C0,3C
008E2:  DATA    8B,28,AC
008E4:  DATA    3C,BE,F6
008E6:  DATA    3F,D2,D5
008E8:  DATA    44,16,8C
008EA:  DATA    15,D7,BF
008EC:  DATA    69,00,5A
008EE:  DATA    2E,1B,87
008F0:  DATA    99,3F,9A
008F2:  DATA    5F,AD,4B
008F4:  DATA    91,E4,01
008F6:  DATA    C0,5D,11
008F8:  DATA    2F,92,E4
008FA:  DATA    81,FB,3F
008FC:  DATA    38,DA,91
008FE:  DATA    80,9D,C5
00900:  DATA    E0,BF,6F
00902:  DATA    12,C0,B4
00904:  DATA    C3,09,AB
00906:  DATA    3F,6B,C1
00908:  DATA    03,4E,C1
0090A:  DATA    B5,45,BF
0090C:  DATA    F7,40,05
0090E:  DATA    FF,00,5A
00910:  DATA    EF,3F,F3
00912:  DATA    A3,E2,F7
00914:  DATA    D7,FF,01
00916:  DATA    40,C0,B4
00918:  DATA    FF,05,3C
0091A:  DATA    58,FC,3F
0091C:  DATA    3B,D3,C0
0091E:  DATA    B5,BA,8C
00920:  DATA    E2,3F,39
00922:  DATA    D3,C7,3D
00924:  DATA    41,79,B2
00926:  DATA    3F,87,0D
00928:  DATA    3C,50,D0
0092A:  DATA    AF,62,3F
0092C:  DATA    30,4B,8D
0092E:  DATA    A2,82,AA
00930:  DATA    04,40,09
00932:  DATA    A0,40,4A
00934:  DATA    05,76,03
00936:  DATA    40,EC,9E
00938:  DATA    37,88,A6
0093A:  DATA    44,F0,3F
0093C:  DATA    8F,12,8D
0093E:  DATA    29,9A,5B
00940:  DATA    C7,3F,0E
00942:  DATA    E0,80,7C
00944:  DATA    A1,D8,86
00946:  DATA    3F,29,4B
00948:  DATA    FB,95,C2
0094A:  DATA    37,1A,3F
0094C:  DATA    00,00,00
0094E:  INC     W2,W2
00950:  CP      W2,#1
00952:  BRA     NZ,95C
00954:  TBLRDL  [W1],W3
00956:  TBLRDH  [W1++],W4
00958:  MOV.B   6,W0L
0095A:  RETURN  
0095C:  CP      W2,#2
0095E:  BRA     NZ,964
00960:  MOV.B   7,W0L
00962:  RETURN  
00964:  MOV.B   8,W0L
00966:  CLR     W2
00968:  RETURN  
0096A:  MOV     #0,W6
0096C:  MOV     #0,W0
0096E:  MOV     W0,32
00970:  MOV     #8D6,W0
00972:  MOV     W0,W1
00974:  CLR     W2
00976:  CALL    94E
0097A:  MOV.B   W0L,B
0097C:  CALL    94E
00980:  MOV.B   W0L,A
00982:  CP0     W5
00984:  BRA     Z,9B8
00986:  BTSS    W5.F
00988:  BRA     998
0098A:  CALL    94E
0098E:  MOV.B   W0L,D
00990:  CALL    94E
00994:  MOV.B   W0L,C
00996:  BCLR    W5.F
00998:  BTSS    W5.E
0099A:  BRA     9AC
0099C:  BCLR    W5.E
0099E:  DEC     W5,W5
009A0:  CALL    94E
009A4:  MOV.B   W0L,W7L
009A6:  REPEAT  W5
009A8:  MOV.B   W7L,[W6++]
009AA:  BRA     976
009AC:  CALL    94E
009B0:  MOV.B   W0L,[W6++]
009B2:  DEC     W5,W5
009B4:  BRA     NZ,9AC
009B6:  BRA     976
.................... { 
....................    // Set I/O states of the ports 
....................    //           FEDCBA9876543210 
....................    set_tris_b(0b0000000011111111); 
009B8:  MOV     #FF,W4
009BA:  MOV     W4,2C6
....................    set_tris_c(0b1111111111111111); 
009BC:  SETM    2CC
....................    set_tris_d(0b1111101100111111); 
009BE:  MOV     #FB3F,W4
009C0:  MOV     W4,2D2
....................    set_tris_e(0b1111111110000000); 
009C2:  MOV     #FF80,W4
009C4:  MOV     W4,2D8
....................    set_tris_f(0b1111111111111100); 
009C6:  MOV     #FFFC,W4
009C8:  MOV     W4,2DE
....................    set_tris_g(0b1111111100110011); 
009CA:  MOV     #FF33,W4
009CC:  MOV     W4,2E4
....................     
....................    // Turn on debug led 
....................    output_low(LED); 
009CE:  BCLR.B  2C7.0
009D0:  BCLR.B  2CB.0
....................    output_low(RX_Disable); 
009D2:  BCLR.B  2E4.2
009D4:  BCLR.B  2E8.2
....................    output_low(LASER_FLAG); 
009D6:  BCLR.B  2D3.2
009D8:  BCLR.B  2D7.2
....................    // Enable RS485 receive byte interrupt 
....................    enable_interrupts(INT_RDA); 
009DA:  BSET.B  8D.1
....................    enable_interrupts(INT_RDA2); 
009DC:  BSET.B  8F.0
....................  
....................    while(true) 
....................    { 
....................       if(checking_data) 
009DE:  CP0.B   8B5
009E0:  BRA     Z,9E8
....................       { 
....................          check_rs485_message(); 
009E2:  CALL    5F2
....................          checking_data=0; 
009E6:  CLR.B   8B5
....................       } 
009E8:  GOTO    9DE
....................    } 
.................... } 
009EC:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 8713   HS2_PLL16 NOCKSFSM
          H: FF00  
   Word  2L: 003F   WPSB16 WPSA512 NOWDT
          H: FF00  
   Word  3L: 87B3   PUT64 BORRES BROWNOUT LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: FF00  
   Word  4L: 310F   NOWRTB NOBSS NOEBS NORBS
          H: FF00  
   Word  5L: 310F   NOWRTSS NOSSS NORSS
          H: FF00  
   Word  6L: 0007   NOWRT NOPROTECT
          H: FF00  
   Word  7L: C003   ICSP1 NODEBUG
          H: FF00   NODEBUG
