CCS PCM C Compiler, Version 5.008, 5967               23-Eyl-14 15:43

               Filename:   C:\Users\osman_000\Desktop\yuklenmis kodlar\tobb - Copy\Götürülecek Kodlar\SON\motor_sürücü_kodu_32x\X Motoru.lst

               ROM used:   2033 words (99%)
                           Largest free fragment is 14
               RAM used:   24 (7%) at main() level
                           95 (28%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   776
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVF   7B,W
0010:  MOVWF  24
0011:  CLRF   05
0012:  MOVLW  91
0013:  MOVWF  04
0014:  BTFSS  00.5
0015:  GOTO   018
0016:  BTFSC  11.5
0017:  GOTO   284
0018:  MOVF   20,W
0019:  MOVWF  77
001A:  MOVF   21,W
001B:  MOVWF  78
001C:  MOVF   22,W
001D:  MOVWF  79
001E:  MOVF   23,W
001F:  MOVWF  7A
0020:  MOVF   24,W
0021:  MOVWF  7B
0022:  RETFIE
.................... #INCLUDE <16f1826.h>  
.................... //////// Standard Header file for the PIC16F1826 device //////////////// 
.................... #device PIC16F1826 
0023:  MOVWF  7B
0024:  MOVLW  00
0025:  ADDWF  7A,W
0026:  MOVWF  0A
0027:  MOVF   7B,W
0028:  ADDLW  2C
0029:  BTFSC  03.0
002A:  INCF   0A,F
002B:  MOVWF  02
002C:  RETLW  64
002D:  RETLW  64
002E:  RETLW  64
002F:  RETLW  64
0030:  RETLW  64
0031:  RETLW  64
0032:  RETLW  64
0033:  RETLW  64
0034:  RETLW  64
0035:  RETLW  64
0036:  RETLW  64
0037:  RETLW  64
0038:  RETLW  64
0039:  RETLW  64
003A:  RETLW  64
003B:  RETLW  64
003C:  RETLW  64
003D:  RETLW  64
003E:  RETLW  64
003F:  RETLW  64
0040:  RETLW  64
0041:  RETLW  64
0042:  RETLW  64
0043:  RETLW  64
0044:  RETLW  64
0045:  RETLW  64
0046:  RETLW  64
0047:  RETLW  64
0048:  RETLW  64
0049:  RETLW  64
004A:  RETLW  64
004B:  RETLW  64
004C:  RETLW  64
004D:  RETLW  64
004E:  RETLW  64
004F:  RETLW  63
0050:  RETLW  63
0051:  RETLW  63
0052:  RETLW  63
0053:  RETLW  63
0054:  RETLW  63
0055:  RETLW  63
0056:  RETLW  63
0057:  RETLW  63
0058:  RETLW  63
0059:  RETLW  63
005A:  RETLW  63
005B:  RETLW  63
005C:  RETLW  63
005D:  RETLW  63
005E:  RETLW  62
005F:  RETLW  62
0060:  RETLW  62
0061:  RETLW  62
0062:  RETLW  62
0063:  RETLW  62
0064:  RETLW  62
0065:  RETLW  62
0066:  RETLW  62
0067:  RETLW  62
0068:  RETLW  62
0069:  RETLW  62
006A:  RETLW  61
006B:  RETLW  61
006C:  RETLW  61
006D:  RETLW  61
006E:  RETLW  61
006F:  RETLW  61
0070:  RETLW  61
0071:  RETLW  61
0072:  RETLW  61
0073:  RETLW  61
0074:  RETLW  60
0075:  RETLW  60
0076:  RETLW  60
0077:  RETLW  60
0078:  RETLW  60
0079:  RETLW  60
007A:  RETLW  60
007B:  RETLW  60
007C:  RETLW  60
007D:  RETLW  5F
007E:  RETLW  5F
007F:  RETLW  5F
0080:  RETLW  5F
0081:  RETLW  5F
0082:  RETLW  5F
0083:  RETLW  5F
0084:  RETLW  5F
0085:  RETLW  5E
0086:  RETLW  5E
0087:  RETLW  5E
0088:  RETLW  5E
0089:  RETLW  5E
008A:  RETLW  5E
008B:  RETLW  5E
008C:  RETLW  5E
008D:  RETLW  5D
008E:  RETLW  5D
008F:  RETLW  5D
0090:  RETLW  5D
0091:  RETLW  5D
0092:  RETLW  5D
0093:  RETLW  5D
0094:  RETLW  5C
0095:  RETLW  5C
0096:  RETLW  5C
0097:  RETLW  5C
0098:  RETLW  5C
0099:  RETLW  5C
009A:  RETLW  5C
009B:  RETLW  5B
009C:  RETLW  5B
009D:  RETLW  5B
009E:  RETLW  5B
009F:  RETLW  5B
00A0:  RETLW  5B
00A1:  RETLW  5A
00A2:  RETLW  5A
00A3:  RETLW  5A
00A4:  RETLW  5A
00A5:  RETLW  5A
00A6:  RETLW  5A
00A7:  RETLW  59
00A8:  RETLW  59
00A9:  RETLW  59
00AA:  RETLW  59
00AB:  RETLW  59
00AC:  RETLW  59
00AD:  RETLW  58
00AE:  RETLW  58
00AF:  RETLW  58
00B0:  RETLW  58
00B1:  RETLW  58
00B2:  RETLW  58
00B3:  RETLW  57
00B4:  RETLW  57
00B5:  RETLW  57
00B6:  RETLW  57
00B7:  RETLW  57
00B8:  RETLW  57
00B9:  RETLW  56
00BA:  RETLW  56
00BB:  RETLW  56
00BC:  RETLW  56
00BD:  RETLW  56
00BE:  RETLW  55
00BF:  RETLW  55
00C0:  RETLW  55
00C1:  RETLW  55
00C2:  RETLW  55
00C3:  RETLW  55
00C4:  RETLW  54
00C5:  RETLW  54
00C6:  RETLW  54
00C7:  RETLW  54
00C8:  RETLW  54
00C9:  RETLW  53
00CA:  RETLW  53
00CB:  RETLW  53
00CC:  RETLW  53
00CD:  RETLW  53
00CE:  RETLW  52
00CF:  RETLW  52
00D0:  RETLW  52
00D1:  RETLW  52
00D2:  RETLW  52
00D3:  RETLW  51
00D4:  RETLW  51
00D5:  RETLW  51
00D6:  RETLW  51
00D7:  RETLW  51
00D8:  RETLW  50
00D9:  RETLW  50
00DA:  RETLW  50
00DB:  RETLW  50
00DC:  RETLW  50
00DD:  RETLW  4F
00DE:  RETLW  4F
00DF:  RETLW  4F
00E0:  RETLW  4F
00E1:  RETLW  4F
00E2:  RETLW  4E
00E3:  RETLW  4E
00E4:  RETLW  4E
00E5:  RETLW  4E
00E6:  RETLW  4D
00E7:  RETLW  4D
00E8:  RETLW  4D
00E9:  RETLW  4D
00EA:  RETLW  4D
00EB:  RETLW  4C
00EC:  RETLW  4C
00ED:  RETLW  4C
00EE:  RETLW  4C
00EF:  RETLW  4C
00F0:  RETLW  4B
00F1:  RETLW  4B
00F2:  RETLW  4B
00F3:  RETLW  4B
00F4:  RETLW  4A
00F5:  RETLW  4A
00F6:  RETLW  4A
00F7:  RETLW  4A
00F8:  RETLW  4A
00F9:  RETLW  49
00FA:  RETLW  49
00FB:  RETLW  49
00FC:  RETLW  49
00FD:  RETLW  48
00FE:  RETLW  48
00FF:  RETLW  48
0100:  RETLW  48
0101:  RETLW  47
0102:  RETLW  47
0103:  RETLW  47
0104:  RETLW  47
0105:  RETLW  47
0106:  RETLW  46
0107:  RETLW  46
0108:  RETLW  46
0109:  RETLW  46
010A:  RETLW  45
010B:  RETLW  45
010C:  RETLW  45
010D:  RETLW  45
010E:  RETLW  44
010F:  RETLW  44
0110:  RETLW  44
0111:  RETLW  44
0112:  RETLW  44
0113:  RETLW  43
0114:  RETLW  43
0115:  RETLW  43
0116:  RETLW  43
0117:  RETLW  42
0118:  RETLW  42
0119:  RETLW  42
011A:  RETLW  42
011B:  RETLW  41
011C:  RETLW  41
011D:  RETLW  41
011E:  RETLW  41
011F:  RETLW  40
0120:  RETLW  40
0121:  RETLW  40
0122:  RETLW  40
0123:  RETLW  3F
0124:  RETLW  3F
0125:  RETLW  3F
0126:  RETLW  3F
0127:  RETLW  3E
0128:  RETLW  3E
0129:  RETLW  3E
012A:  RETLW  3E
012B:  RETLW  3E
012C:  RETLW  3D
012D:  RETLW  3D
012E:  RETLW  3D
012F:  RETLW  3D
0130:  RETLW  3C
0131:  RETLW  3C
0132:  RETLW  3C
0133:  RETLW  3C
0134:  RETLW  3B
0135:  RETLW  3B
0136:  RETLW  3B
0137:  RETLW  3B
0138:  RETLW  3A
0139:  RETLW  3A
013A:  RETLW  3A
013B:  RETLW  3A
013C:  RETLW  39
013D:  RETLW  39
013E:  RETLW  39
013F:  RETLW  39
0140:  RETLW  38
0141:  RETLW  38
0142:  RETLW  38
0143:  RETLW  38
0144:  RETLW  37
0145:  RETLW  37
0146:  RETLW  37
0147:  RETLW  37
0148:  RETLW  36
0149:  RETLW  36
014A:  RETLW  36
014B:  RETLW  36
014C:  RETLW  35
014D:  RETLW  35
014E:  RETLW  35
014F:  RETLW  35
0150:  RETLW  34
0151:  RETLW  34
0152:  RETLW  34
0153:  RETLW  34
0154:  RETLW  33
0155:  RETLW  33
0156:  RETLW  33
0157:  RETLW  33
0158:  RETLW  32
0159:  RETLW  32
015A:  RETLW  32
015B:  RETLW  32
015C:  RETLW  31
015D:  RETLW  31
015E:  RETLW  31
015F:  RETLW  31
0160:  RETLW  30
0161:  RETLW  30
0162:  RETLW  30
0163:  RETLW  30
0164:  RETLW  2F
0165:  RETLW  2F
0166:  RETLW  2F
0167:  RETLW  2F
0168:  RETLW  2E
0169:  RETLW  2E
016A:  RETLW  2E
016B:  RETLW  2E
016C:  RETLW  2D
016D:  RETLW  2D
016E:  RETLW  2D
016F:  RETLW  2D
0170:  RETLW  2C
0171:  RETLW  2C
0172:  RETLW  2C
0173:  RETLW  2C
0174:  RETLW  2B
0175:  RETLW  2B
0176:  RETLW  2B
0177:  RETLW  2B
0178:  RETLW  2A
0179:  RETLW  2A
017A:  RETLW  2A
017B:  RETLW  2A
017C:  RETLW  29
017D:  RETLW  29
017E:  RETLW  29
017F:  RETLW  29
0180:  RETLW  28
0181:  RETLW  28
0182:  RETLW  28
0183:  RETLW  28
0184:  RETLW  27
0185:  RETLW  27
0186:  RETLW  27
0187:  RETLW  27
0188:  RETLW  27
0189:  RETLW  26
018A:  RETLW  26
018B:  RETLW  26
018C:  RETLW  26
018D:  RETLW  25
018E:  RETLW  25
018F:  RETLW  25
0190:  RETLW  25
0191:  RETLW  24
0192:  RETLW  24
0193:  RETLW  24
0194:  RETLW  24
0195:  RETLW  23
0196:  RETLW  23
0197:  RETLW  23
0198:  RETLW  23
0199:  RETLW  22
019A:  RETLW  22
019B:  RETLW  22
019C:  RETLW  22
019D:  RETLW  21
019E:  RETLW  21
019F:  RETLW  21
01A0:  RETLW  21
01A1:  RETLW  21
01A2:  RETLW  20
01A3:  RETLW  20
01A4:  RETLW  20
01A5:  RETLW  20
01A6:  RETLW  1F
01A7:  RETLW  1F
01A8:  RETLW  1F
01A9:  RETLW  1F
01AA:  RETLW  1E
01AB:  RETLW  1E
01AC:  RETLW  1E
01AD:  RETLW  1E
01AE:  RETLW  1E
01AF:  RETLW  1D
01B0:  RETLW  1D
01B1:  RETLW  1D
01B2:  RETLW  1D
01B3:  RETLW  1C
01B4:  RETLW  1C
01B5:  RETLW  1C
01B6:  RETLW  1C
01B7:  RETLW  1B
01B8:  RETLW  1B
01B9:  RETLW  1B
01BA:  RETLW  1B
01BB:  RETLW  1B
01BC:  RETLW  1A
01BD:  RETLW  1A
01BE:  RETLW  1A
01BF:  RETLW  1A
01C0:  RETLW  19
01C1:  RETLW  19
01C2:  RETLW  19
01C3:  RETLW  19
01C4:  RETLW  19
01C5:  RETLW  18
01C6:  RETLW  18
01C7:  RETLW  18
01C8:  RETLW  18
01C9:  RETLW  18
01CA:  RETLW  17
01CB:  RETLW  17
01CC:  RETLW  17
01CD:  RETLW  17
01CE:  RETLW  16
01CF:  RETLW  16
01D0:  RETLW  16
01D1:  RETLW  16
01D2:  RETLW  16
01D3:  RETLW  15
01D4:  RETLW  15
01D5:  RETLW  15
01D6:  RETLW  15
01D7:  RETLW  15
01D8:  RETLW  14
01D9:  RETLW  14
01DA:  RETLW  14
01DB:  RETLW  14
01DC:  RETLW  14
01DD:  RETLW  13
01DE:  RETLW  13
01DF:  RETLW  13
01E0:  RETLW  13
01E1:  RETLW  13
01E2:  RETLW  12
01E3:  RETLW  12
01E4:  RETLW  12
01E5:  RETLW  12
01E6:  RETLW  12
01E7:  RETLW  11
01E8:  RETLW  11
01E9:  RETLW  11
01EA:  RETLW  11
01EB:  RETLW  11
01EC:  RETLW  10
01ED:  RETLW  10
01EE:  RETLW  10
01EF:  RETLW  10
01F0:  RETLW  10
01F1:  RETLW  10
01F2:  RETLW  0F
01F3:  RETLW  0F
01F4:  RETLW  0F
01F5:  RETLW  0F
01F6:  RETLW  0F
01F7:  RETLW  0E
01F8:  RETLW  0E
01F9:  RETLW  0E
01FA:  RETLW  0E
01FB:  RETLW  0E
01FC:  RETLW  0E
01FD:  RETLW  0D
01FE:  RETLW  0D
01FF:  RETLW  0D
0200:  RETLW  0D
0201:  RETLW  0D
0202:  RETLW  0D
0203:  RETLW  0C
0204:  RETLW  0C
0205:  RETLW  0C
0206:  RETLW  0C
0207:  RETLW  0C
0208:  RETLW  0C
0209:  RETLW  0B
020A:  RETLW  0B
020B:  RETLW  0B
020C:  RETLW  0B
020D:  RETLW  0B
020E:  RETLW  0B
020F:  RETLW  0A
0210:  RETLW  0A
0211:  RETLW  0A
0212:  RETLW  0A
0213:  RETLW  0A
0214:  RETLW  0A
0215:  RETLW  09
0216:  RETLW  09
0217:  RETLW  09
0218:  RETLW  09
0219:  RETLW  09
021A:  RETLW  09
021B:  RETLW  09
021C:  RETLW  08
021D:  RETLW  08
021E:  RETLW  08
021F:  RETLW  08
0220:  RETLW  08
0221:  RETLW  08
0222:  RETLW  08
0223:  RETLW  07
0224:  RETLW  07
0225:  RETLW  07
0226:  RETLW  07
0227:  RETLW  07
0228:  RETLW  07
0229:  RETLW  07
022A:  RETLW  07
022B:  RETLW  06
022C:  RETLW  06
022D:  RETLW  06
022E:  RETLW  06
022F:  RETLW  06
0230:  RETLW  06
0231:  RETLW  06
0232:  RETLW  06
0233:  RETLW  05
0234:  RETLW  05
0235:  RETLW  05
0236:  RETLW  05
0237:  RETLW  05
0238:  RETLW  05
0239:  RETLW  05
023A:  RETLW  05
023B:  RETLW  05
023C:  RETLW  04
023D:  RETLW  04
023E:  RETLW  04
023F:  RETLW  04
0240:  RETLW  04
0241:  RETLW  04
0242:  RETLW  04
0243:  RETLW  04
0244:  RETLW  04
0245:  RETLW  04
0246:  RETLW  03
0247:  RETLW  03
0248:  RETLW  03
0249:  RETLW  03
024A:  RETLW  03
024B:  RETLW  03
024C:  RETLW  03
024D:  RETLW  03
024E:  RETLW  03
024F:  RETLW  03
0250:  RETLW  03
0251:  RETLW  03
0252:  RETLW  02
0253:  RETLW  02
0254:  RETLW  02
0255:  RETLW  02
0256:  RETLW  02
0257:  RETLW  02
0258:  RETLW  02
0259:  RETLW  02
025A:  RETLW  02
025B:  RETLW  02
025C:  RETLW  02
025D:  RETLW  02
025E:  RETLW  02
025F:  RETLW  02
0260:  RETLW  02
0261:  RETLW  01
0262:  RETLW  01
0263:  RETLW  01
0264:  RETLW  01
0265:  RETLW  01
0266:  RETLW  01
0267:  RETLW  01
0268:  RETLW  01
0269:  RETLW  01
026A:  RETLW  01
026B:  RETLW  01
026C:  RETLW  01
026D:  RETLW  01
026E:  RETLW  01
026F:  RETLW  01
0270:  RETLW  01
0271:  RETLW  01
0272:  RETLW  01
0273:  RETLW  01
0274:  RETLW  01
0275:  RETLW  01
0276:  RETLW  01
0277:  RETLW  01
0278:  RETLW  01
0279:  RETLW  01
027A:  RETLW  01
027B:  RETLW  01
027C:  RETLW  01
027D:  RETLW  01
027E:  RETLW  01
027F:  RETLW  01
0280:  RETLW  01
0281:  RETLW  01
0282:  RETLW  01
0283:  RETLW  01
*
043D:  MOVLW  20
043E:  MOVWF  68
043F:  CLRF   64
0440:  CLRF   65
0441:  CLRF   66
0442:  CLRF   67
0443:  MOVF   5F,W
0444:  MOVWF  7A
0445:  MOVF   5E,W
0446:  MOVWF  79
0447:  MOVF   5D,W
0448:  MOVWF  78
0449:  MOVF   5C,W
044A:  MOVWF  77
044B:  BCF    03.0
044C:  BTFSS  77.0
044D:  GOTO   45C
044E:  MOVF   60,W
044F:  ADDWF  64,F
0450:  MOVF   61,W
0451:  BTFSC  03.0
0452:  INCFSZ 61,W
0453:  ADDWF  65,F
0454:  MOVF   62,W
0455:  BTFSC  03.0
0456:  INCFSZ 62,W
0457:  ADDWF  66,F
0458:  MOVF   63,W
0459:  BTFSC  03.0
045A:  INCFSZ 63,W
045B:  ADDWF  67,F
045C:  RRF    67,F
045D:  RRF    66,F
045E:  RRF    65,F
045F:  RRF    64,F
0460:  RRF    7A,F
0461:  RRF    79,F
0462:  RRF    78,F
0463:  RRF    77,F
0464:  DECFSZ 68,F
0465:  GOTO   44B
0466:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #FUSES INTRC_IO      // Internal RC clock (OSC1 and OSC2 pins are normal I/O) 
.................... #FUSES NOWDT         // Watch Dog Timer disabled 
.................... #FUSES PUT           // Power Up Timer enabled 
.................... #FUSES NOMCLR        // Master Clear pin is used for I/O 
.................... #FUSES PROTECT       // Code protected from reads 
.................... #FUSES CPD           // Data EEPROM code protected 
.................... #FUSES BROWNOUT      // Brownout Reset enabled 
.................... #FUSES BORV25        // Brownout Reset at 2.5V 
.................... #FUSES NOCLKOUT      // Disable clock output on OSC2 
.................... #FUSES NOIESO        // Internal External Switch Over Mode disabled 
.................... #FUSES NOFCMEN       // Fail-safe clock monitor disabled 
.................... #FUSES WRT           // Program memory write protected                                               
.................... #FUSES NOLVP         // Low Voltage Programming disabled 
....................  
.................... #USE   DELAY(internal = 32MHz) 
*
02BC:  MOVLW  20
02BD:  MOVWF  05
02BE:  MOVLW  4A
02BF:  MOVWF  04
02C0:  MOVF   00,W
02C1:  BTFSC  03.2
02C2:  GOTO   2D0
02C3:  MOVLW  0A
02C4:  MOVWF  78
02C5:  CLRF   77
02C6:  DECFSZ 77,F
02C7:  GOTO   2C6
02C8:  DECFSZ 78,F
02C9:  GOTO   2C5
02CA:  MOVLW  5F
02CB:  MOVWF  77
02CC:  DECFSZ 77,F
02CD:  GOTO   2CC
02CE:  DECFSZ 00,F
02CF:  GOTO   2C3
02D0:  RETURN
*
031B:  MOVLW  02
031C:  SUBWF  6F,F
031D:  BTFSS  03.0
031E:  GOTO   32C
031F:  MOVLW  20
0320:  MOVWF  05
0321:  MOVLW  4F
0322:  MOVWF  04
0323:  MOVF   00,W
0324:  BTFSC  03.2
0325:  GOTO   32C
0326:  GOTO   32A
0327:  GOTO   328
0328:  GOTO   329
0329:  NOP
032A:  DECFSZ 00,F
032B:  GOTO   327
032C:  RETURN
.................... #USE   RS232(stream=RS232, baud=38400, xmit=PIN_B5, rcv=PIN_B2, parity=N, bits=8, stop=1) 
*
0315:  BTFSS  11.4
0316:  GOTO   315
0317:  MOVLB  03
0318:  MOVWF  1A
0319:  MOVLB  00
031A:  RETURN
....................  
.................... #DEFINE DRV_STEP           PIN_A0                  // Step output pin to driver (Rising edge causes the indexer to move one step) 
.................... #DEFINE DRV_RESET          PIN_A1                  // Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.) 
.................... #DEFINE DRV_DIR            PIN_A4                  // Direction output pin to driver (Logic level, sets the direction of stepping) 
.................... #DEFINE SPI_SDO            PIN_A6                  // SPI data output pin 
.................... #DEFINE SPI_CS             PIN_A7                  // SPI chip select pin 
.................... #DEFINE SPI_SDI            PIN_B1                  // SPI data input pin 
.................... #DEFINE SPI_SCK            PIN_B4                  // SPI clock output pin 
.................... #DEFINE DRV_STALL          PIN_B6                  // Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut) 
.................... #DEFINE DRV_FAULT          PIN_B7                  // Fault input pin from driver (Logic low when in fault condition. Pull up mevcut) 
....................  
.................... #DEFINE LIMIT_SWITCH       PIN_A2                  // Fault output pin to user 
.................... #DEFINE USER_DIR           PIN_A3                  // Direction input pin from user 
.................... #DEFINE USER_STEP          PIN_B0                  // Step input pin from user 
.................... #DEFINE HOME_SWITCH        PIN_B3                  // Enable input pin from user 
....................  
.................... // SPI Registers 
.................... #WORD SPI_SSP1CON1   = 0x215                 // Synchronous serial port control register 
.................... #WORD SPI_SSP1STAT   = 0x214                 // Synchronous serial port status register 
.................... #WORD SPI_SSP1BUF    = 0x211                 // Synchronous serial port buffer register 
.................... #WORD SPI_PIR1       = 0x011                 // Peripheral interrupt request register 
.................... // Pin function control registers 
.................... #WORD PIN_APFCON0    = 0x11D                 // Alternate pin function control register 0 
.................... #WORD PIN_APFCON1    = 0x11E                 // Alternate pin function control register 1 
....................  
.................... // Bits of SSP1CON1 register 
.................... #BIT SPI_WRITE_FLAG     = SPI_SSP1CON1.7     // Synchronous serial port write collision detect bit 
.................... #BIT SPI_ENABLE         = SPI_SSP1CON1.5     // Synchronous serial port enable bit 
.................... #BIT SPI_CLOCK_POLARITY = SPI_SSP1CON1.4     // Synchronous serial port clock polarity select bit 
.................... #BIT SPI_MODE_3         = SPI_SSP1CON1.3     // Synchronous serial port mode select bits 
.................... #BIT SPI_MODE_2         = SPI_SSP1CON1.2    
.................... #BIT SPI_MODE_1         = SPI_SSP1CON1.1    
.................... #BIT SPI_MODE_0         = SPI_SSP1CON1.0   
....................  
.................... // Bits of SPI_SSP1STAT register 
.................... #BIT SPI_INPUT_SAMPLE   = SPI_SSP1STAT.7     // Synchronous serial port data input sample bit 
.................... #BIT SPI_CLOCK_EDGE     = SPI_SSP1STAT.6     // Synchronous serial port clock edge select bit 
.................... #BIT SPI_BUFFER_STATUS  = SPI_SSP1STAT.0     // Synchronous serial port buffer full status bit 
....................  
.................... // Bits of SPI_PIR1 register 
.................... #BIT SPI_FLAG           = SPI_PIR1.3         // Synchronous serial port interrupt flag bit 
....................  
.................... // Bits of PIN_APFCON0 register 
.................... #BIT PIN_SDO_SELECT     = PIN_APFCON0.6      // SDO pin selection bit  
.................... #BIT PIN_SS_SELECT      = PIN_APFCON0.5      // SS pin selection bit  
....................  
.................... unsigned int32 current_distance  = 0; 
.................... int1 reg_rs232_message           = 0; 
.................... int1 mode                        = 0; // mode = 0: 32x mode = 1: 256x 
....................  
.................... unsigned int16 pulse_per_turn    = 6400;   //limit bastýgýnda 1cm açabilmesi için gereken pulse 
.................... unsigned int16 delay             = 30; 
.................... unsigned int16 home_distance     = 4000; 
....................  
.................... unsigned int16 acc_lim           = 600;             // Number of steps before we hit max speed 
.................... unsigned int const periods[600]={ 
.................... 100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100, 
.................... 100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,98,98, 
.................... 98,98,98,98,98,98,98,98,98,98,97,97,97,97,97,97,97,97,97,97,96,96,96,96,96,96,96,96,96,95,95,95, 
.................... 95,95,95,95,95,94,94,94,94,94,94,94,94,93,93,93,93,93,93,93,92,92,92,92,92,92,92,91,91,91,91,91, 
.................... 91,90,90,90,90,90,90,89,89,89,89,89,89,88,88,88,88,88,88,87,87,87,87,87,87,86,86,86,86,86,85,85, 
.................... 85,85,85,85,84,84,84,84,84,83,83,83,83,83,82,82,82,82,82,81,81,81,81,81,80,80,80,80,80,79,79,79, 
.................... 79,79,78,78,78,78,77,77,77,77,77,76,76,76,76,76,75,75,75,75,74,74,74,74,74,73,73,73,73,72,72,72, 
.................... 72,71,71,71,71,71,70,70,70,70,69,69,69,69,68,68,68,68,68,67,67,67,67,66,66,66,66,65,65,65,65,64, 
.................... 64,64,64,63,63,63,63,62,62,62,62,62,61,61,61,61,60,60,60,60,59,59,59,59,58,58,58,58,57,57,57,57, 
.................... 56,56,56,56,55,55,55,55,54,54,54,54,53,53,53,53,52,52,52,52,51,51,51,51,50,50,50,50,49,49,49,49, 
.................... 48,48,48,48,47,47,47,47,46,46,46,46,45,45,45,45,44,44,44,44,43,43,43,43,42,42,42,42,41,41,41,41, 
.................... 40,40,40,40,39,39,39,39,39,38,38,38,38,37,37,37,37,36,36,36,36,35,35,35,35,34,34,34,34,33,33,33, 
.................... 33,33,32,32,32,32,31,31,31,31,30,30,30,30,30,29,29,29,29,28,28,28,28,27,27,27,27,27,26,26,26,26, 
.................... 25,25,25,25,25,24,24,24,24,24,23,23,23,23,22,22,22,22,22,21,21,21,21,21,20,20,20,20,20,19,19,19, 
.................... 19,19,18,18,18,18,18,17,17,17,17,17,16,16,16,16,16,16,15,15,15,15,15,14,14,14,14,14,14,13,13,13, 
.................... 13,13,13,12,12,12,12,12,12,11,11,11,11,11,11,10,10,10,10,10,10,9,9,9,9,9,9,9,8,8,8,8,8,8,8,7,7,7, 
.................... 7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2, 
.................... 2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; 
....................  
.................... // Sets alternative pin functions 
.................... void set_pins() 
.................... { 
....................    // Set RA6 as SDO pin 
....................    PIN_SDO_SELECT = 1; 
*
028B:  MOVLB  02
028C:  BSF    1D.6
....................    // Set RA5 as SS pin 
....................    PIN_SS_SELECT = 1; 
028D:  BSF    1D.5
028E:  MOVLP  00
028F:  MOVLB  00
0290:  GOTO   7A7 (RETURN)
....................    // Set RB5 as TX pin 
.................... } 
.................... // Sets SPI parameters 
.................... void set_SPI() 
.................... { 
....................    // Disable SPI to set registers 
....................    SPI_ENABLE = 0; 
0291:  MOVLB  04
0292:  BCF    15.5
....................     
....................    // Set idle state of the clock to low  
....................    SPI_CLOCK_POLARITY = 0; 
0293:  BCF    15.4
....................    // Set SPI mode to SPI  
....................    SPI_MODE_3 = 0;  
0294:  BCF    15.3
....................    SPI_MODE_2 = 0; 
0295:  BCF    15.2
....................    SPI_MODE_1 = 1; 
0296:  BSF    15.1
....................    SPI_MODE_0 = 0; 
0297:  BCF    15.0
....................    // Input data sampled at the middle of data output time 
....................    SPI_INPUT_SAMPLE = 0; 
0298:  BCF    14.7
....................    // Transmit occurs on transition from active to idle clock state 
....................    SPI_CLOCK_EDGE = 1; 
0299:  BSF    14.6
....................  
....................    // Enable SPI 
....................    SPI_ENABLE = 1; 
029A:  BSF    15.5
029B:  MOVLP  00
029C:  MOVLB  00
029D:  GOTO   7A8 (RETURN)
.................... } 
.................... // Sets variables to default values  
.................... void set_variables() 
.................... { 
....................    output_low(SPI_CS);     // Chip select is active high so keep it low to prevent out-of-sync transaction  
029E:  MOVLB  01
029F:  BCF    0C.7
02A0:  MOVLB  02
02A1:  BCF    0C.7
....................    output_low(DRV_RESET);  // Reset is active high so keep reset pin low to activate driver  
02A2:  MOVLB  01
02A3:  BCF    0C.1
02A4:  MOVLB  02
02A5:  BCF    0C.1
....................    output_low(DRV_DIR);    // Set default direction 
02A6:  MOVLB  01
02A7:  BCF    0C.4
02A8:  MOVLB  02
02A9:  BCF    0C.4
....................    output_low(DRV_STEP);   // Keep step output low until a step command is received from the user 
02AA:  MOVLB  01
02AB:  BCF    0C.0
02AC:  MOVLB  02
02AD:  BCF    0C.0
02AE:  MOVLP  00
02AF:  MOVLB  00
02B0:  GOTO   7A9 (RETURN)
.................... } 
....................  
.................... // Writes the given register byte to the driver 
.................... void write_register_byte(unsigned int8 reg_byte) 
.................... { 
....................    // write the byte to spi buffer 
....................    SPI_SSP1BUF = reg_byte; 
02B1:  MOVLB  04
02B2:  CLRF   12
02B3:  MOVLB  00
02B4:  MOVF   6B,W
02B5:  MOVLB  04
02B6:  MOVWF  11
....................    // Wait until the end of the write operation 
....................    while (!SPI_FLAG); 
02B7:  MOVLB  00
02B8:  BTFSS  11.3
02B9:  GOTO   2B8
....................    // Clear the write-completed-flag of the spi module 
....................    SPI_FLAG = 0; 
02BA:  BCF    11.3
02BB:  RETURN
.................... } 
.................... // Writes the given register to the driver 
.................... void write_register(unsigned int16 reg) 
.................... { 
....................    // start spi write operation by setting the chip select port to high 
....................    output_high(SPI_CS); 
*
02D1:  MOVLB  01
02D2:  BCF    0C.7
02D3:  MOVLB  02
02D4:  BSF    0C.7
....................    // Get and write the MSB of the register 
....................    write_register_byte(make8(reg, 1)); 
02D5:  MOVLB  00
02D6:  MOVF   69,W
02D7:  MOVWF  6A
02D8:  MOVWF  6B
02D9:  CALL   2B1
....................    // Get and write the MSB of the register 
....................    write_register_byte(make8(reg, 0)); 
02DA:  MOVF   68,W
02DB:  MOVWF  6A
02DC:  MOVWF  6B
02DD:  CALL   2B1
....................    // stop spi write operation by setting the chip select port to low 
....................    output_low(SPI_CS); 
02DE:  MOVLB  01
02DF:  BCF    0C.7
02E0:  MOVLB  02
02E1:  BCF    0C.7
....................    delay_ms(10); 
02E2:  MOVLW  0A
02E3:  MOVLB  00
02E4:  MOVWF  6A
02E5:  CALL   2BC
02E6:  RETURN
.................... } 
.................... // Sets driver parameters 
.................... void set_driver() 
.................... { 
....................    if(mode == 0) 
02E7:  BTFSC  29.1
02E8:  GOTO   2EE
....................       write_register(41); //32x microstepping 
02E9:  CLRF   69
02EA:  MOVLW  29
02EB:  MOVWF  68
02EC:  CALL   2D1
02ED:  GOTO   2F2
....................    else 
....................  
....................       write_register(65); //256x microstepping 
02EE:  CLRF   69
02EF:  MOVLW  41
02F0:  MOVWF  68
02F1:  CALL   2D1
....................        
....................    //write_register(4310);   //high torque 
....................    write_register(4146); //lowtorque 
02F2:  MOVLW  10
02F3:  MOVWF  69
02F4:  MOVLW  32
02F5:  MOVWF  68
02F6:  CALL   2D1
....................    write_register(8272); 
02F7:  MOVLW  20
02F8:  MOVWF  69
02F9:  MOVLW  50
02FA:  MOVWF  68
02FB:  CALL   2D1
....................    write_register(12669); 
02FC:  MOVLW  31
02FD:  MOVWF  69
02FE:  MOVLW  7D
02FF:  MOVWF  68
0300:  CALL   2D1
....................    //write_register(17448);   //slow auto mixed decay when high torque 
....................    write_register(17704); //auto mixed decay when paused when low torque 
0301:  MOVLW  45
0302:  MOVWF  69
0303:  MOVLW  28
0304:  MOVWF  68
0305:  CALL   2D1
....................    write_register(22804); 
0306:  MOVLW  59
0307:  MOVWF  69
0308:  MOVLW  14
0309:  MOVWF  68
030A:  CALL   2D1
....................    write_register(24736); 
030B:  MOVLW  60
030C:  MOVWF  69
030D:  MOVLW  A0
030E:  MOVWF  68
030F:  CALL   2D1
....................    //write_register(28672); 
....................    delay_ms(10); 
0310:  MOVLW  0A
0311:  MOVWF  6A
0312:  CALL   2BC
0313:  MOVLP  00
0314:  GOTO   7AA (RETURN)
.................... } 
....................  
.................... // Moves system by given number of steps  
.................... void motion_cycle(int32 target_step) 
.................... { 
....................    write_register(4310);   //high torque 
*
0467:  MOVLW  10
0468:  MOVWF  69
0469:  MOVLW  D6
046A:  MOVWF  68
046B:  CALL   2D1
....................    write_register(17448);   //slow auto mixed decay when high torque 
046C:  MOVLW  44
046D:  MOVWF  69
046E:  MOVLW  28
046F:  MOVWF  68
0470:  CALL   2D1
....................    delay_ms(10); 
0471:  MOVLW  0A
0472:  MOVWF  6A
0473:  CALL   2BC
....................    // System is moving 
....................    putc('M'); 
0474:  MOVLW  4D
0475:  CALL   315
....................    // Laser on 
....................    putc('A'); 
0476:  MOVLW  41
0477:  CALL   315
....................    unsigned int32 i=0; 
0478:  CLRF   67
0479:  CLRF   66
047A:  CLRF   65
047B:  CLRF   64
....................     
....................    if(target_step >= (2*acc_lim)) 
047C:  BCF    03.0
047D:  RLF    30,W
047E:  MOVWF  79
047F:  RLF    31,W
0480:  MOVWF  7A
0481:  MOVF   79,W
0482:  MOVWF  78
0483:  MOVF   63,F
0484:  BTFSS  03.2
0485:  GOTO   493
0486:  MOVF   62,F
0487:  BTFSS  03.2
0488:  GOTO   493
0489:  MOVF   7A,W
048A:  SUBWF  61,W
048B:  BTFSS  03.0
048C:  GOTO   580
048D:  BTFSS  03.2
048E:  GOTO   493
048F:  MOVF   78,W
0490:  SUBWF  60,W
0491:  BTFSS  03.0
0492:  GOTO   580
....................    { 
....................       target_step = target_step-2*acc_lim; 
0493:  BCF    03.0
0494:  RLF    30,W
0495:  MOVWF  79
0496:  RLF    31,W
0497:  MOVWF  7A
0498:  MOVF   79,W
0499:  SUBWF  60,F
049A:  MOVF   7A,W
049B:  SUBWFC 61,F
049C:  MOVLW  00
049D:  SUBWFC 62,F
049E:  SUBWFC 63,F
....................       for(i=0; i<acc_lim; i++) 
049F:  CLRF   67
04A0:  CLRF   66
04A1:  CLRF   65
04A2:  CLRF   64
04A3:  MOVF   67,F
04A4:  BTFSS  03.2
04A5:  GOTO   4E4
04A6:  MOVF   66,F
04A7:  BTFSS  03.2
04A8:  GOTO   4E4
04A9:  MOVF   65,W
04AA:  SUBWF  31,W
04AB:  BTFSS  03.0
04AC:  GOTO   4E4
04AD:  BTFSS  03.2
04AE:  GOTO   4B3
04AF:  MOVF   30,W
04B0:  SUBWF  64,W
04B1:  BTFSC  03.0
04B2:  GOTO   4E4
....................       { 
....................          output_high(DRV_STEP); 
04B3:  MOVLB  01
04B4:  BCF    0C.0
04B5:  MOVLB  02
04B6:  BSF    0C.0
....................          delay_us(3); 
04B7:  MOVLW  07
04B8:  MOVWF  77
04B9:  DECFSZ 77,F
04BA:  GOTO   4B9
04BB:  GOTO   4BC
....................          output_low(DRV_STEP); 
04BC:  MOVLB  01
04BD:  BCF    0C.0
04BE:  MOVLB  02
04BF:  BCF    0C.0
....................          delay_us(periods[i] + delay - 3); 
04C0:  MOVLB  00
04C1:  MOVF   65,W
04C2:  MOVWF  7A
04C3:  MOVF   64,W
04C4:  CALL   023
04C5:  ADDWF  2C,W
04C6:  MOVWF  68
04C7:  MOVLW  00
04C8:  ADDWFC 2D,W
04C9:  MOVWF  69
04CA:  MOVLW  03
04CB:  SUBWF  68,F
04CC:  MOVLW  00
04CD:  SUBWFC 69,F
04CE:  MOVF   69,W
04CF:  MOVWF  6A
04D0:  INCF   6A,F
04D1:  DECF   6A,F
04D2:  BTFSC  03.2
04D3:  GOTO   4D8
04D4:  MOVLW  FF
04D5:  MOVWF  6F
04D6:  CALL   31B
04D7:  GOTO   4D1
04D8:  MOVF   68,W
04D9:  MOVWF  6F
04DA:  CALL   31B
04DB:  MOVLW  01
04DC:  ADDWF  64,F
04DD:  BTFSC  03.0
04DE:  INCF   65,F
04DF:  BTFSC  03.2
04E0:  INCF   66,F
04E1:  BTFSC  03.2
04E2:  INCF   67,F
04E3:  GOTO   4A3
....................       } 
....................       for(i=0; i<(target_step); i++) 
04E4:  CLRF   67
04E5:  CLRF   66
04E6:  CLRF   65
04E7:  CLRF   64
04E8:  MOVF   67,W
04E9:  SUBWF  63,W
04EA:  BTFSS  03.0
04EB:  GOTO   530
04EC:  BTFSS  03.2
04ED:  GOTO   4FE
04EE:  MOVF   66,W
04EF:  SUBWF  62,W
04F0:  BTFSS  03.0
04F1:  GOTO   530
04F2:  BTFSS  03.2
04F3:  GOTO   4FE
04F4:  MOVF   65,W
04F5:  SUBWF  61,W
04F6:  BTFSS  03.0
04F7:  GOTO   530
04F8:  BTFSS  03.2
04F9:  GOTO   4FE
04FA:  MOVF   60,W
04FB:  SUBWF  64,W
04FC:  BTFSC  03.0
04FD:  GOTO   530
....................       { 
....................  
....................  
....................          output_high(DRV_STEP); 
04FE:  MOVLB  01
04FF:  BCF    0C.0
0500:  MOVLB  02
0501:  BSF    0C.0
....................          if(input(LIMIT_SWITCH) == 1) 
0502:  MOVLB  01
0503:  BSF    0C.2
0504:  MOVLB  00
0505:  BTFSS  0C.2
0506:  GOTO   50A
....................          { 
....................             // Limit switch is triggered 
....................             putc('L'); 
0507:  MOVLW  4C
0508:  CALL   315
....................             return;             
0509:  GOTO   5CA
....................          } 
....................          delay_us(3); 
050A:  MOVLW  07
050B:  MOVWF  77
050C:  DECFSZ 77,F
050D:  GOTO   50C
050E:  GOTO   50F
....................          output_low(DRV_STEP); 
050F:  MOVLB  01
0510:  BCF    0C.0
0511:  MOVLB  02
0512:  BCF    0C.0
....................          delay_us(delay - 3); 
0513:  MOVLW  03
0514:  MOVLB  00
0515:  SUBWF  2C,W
0516:  MOVWF  68
0517:  MOVLW  00
0518:  SUBWFC 2D,W
0519:  MOVWF  69
051A:  MOVF   69,W
051B:  MOVWF  6A
051C:  INCF   6A,F
051D:  DECF   6A,F
051E:  BTFSC  03.2
051F:  GOTO   524
0520:  MOVLW  FF
0521:  MOVWF  6F
0522:  CALL   31B
0523:  GOTO   51D
0524:  MOVF   68,W
0525:  MOVWF  6F
0526:  CALL   31B
0527:  MOVLW  01
0528:  ADDWF  64,F
0529:  BTFSC  03.0
052A:  INCF   65,F
052B:  BTFSC  03.2
052C:  INCF   66,F
052D:  BTFSC  03.2
052E:  INCF   67,F
052F:  GOTO   4E8
....................       } 
....................        
....................       for(i=acc_lim; i>0; i--) 
0530:  CLRF   67
0531:  CLRF   66
0532:  MOVF   31,W
0533:  MOVWF  65
0534:  MOVF   30,W
0535:  MOVWF  64
0536:  MOVF   64,F
0537:  BTFSS  03.2
0538:  GOTO   542
0539:  MOVF   65,F
053A:  BTFSS  03.2
053B:  GOTO   542
053C:  MOVF   66,F
053D:  BTFSS  03.2
053E:  GOTO   542
053F:  MOVF   67,F
0540:  BTFSC  03.2
0541:  GOTO   57F
....................       { 
....................          output_high(DRV_STEP); 
0542:  MOVLB  01
0543:  BCF    0C.0
0544:  MOVLB  02
0545:  BSF    0C.0
....................          delay_us(3); 
0546:  MOVLW  07
0547:  MOVWF  77
0548:  DECFSZ 77,F
0549:  GOTO   548
054A:  GOTO   54B
....................          output_low(DRV_STEP); 
054B:  MOVLB  01
054C:  BCF    0C.0
054D:  MOVLB  02
054E:  BCF    0C.0
....................          delay_us(periods[i-1] + delay - 3); 
054F:  MOVLW  01
0550:  MOVLB  00
0551:  SUBWF  64,W
0552:  MOVWF  68
0553:  MOVLW  00
0554:  SUBWFC 65,W
0555:  MOVWF  69
0556:  MOVLW  00
0557:  SUBWFC 66,W
0558:  MOVWF  6A
0559:  MOVLW  00
055A:  SUBWFC 67,W
055B:  MOVWF  6B
055C:  MOVF   69,W
055D:  MOVWF  7A
055E:  MOVF   68,W
055F:  CALL   023
0560:  ADDWF  2C,W
0561:  MOVWF  6C
0562:  MOVLW  00
0563:  ADDWFC 2D,W
0564:  MOVWF  6D
0565:  MOVLW  03
0566:  SUBWF  6C,F
0567:  MOVLW  00
0568:  SUBWFC 6D,F
0569:  MOVF   6D,W
056A:  MOVWF  6E
056B:  INCF   6E,F
056C:  DECF   6E,F
056D:  BTFSC  03.2
056E:  GOTO   573
056F:  MOVLW  FF
0570:  MOVWF  6F
0571:  CALL   31B
0572:  GOTO   56C
0573:  MOVF   6C,W
0574:  MOVWF  6F
0575:  CALL   31B
0576:  MOVLW  FF
0577:  ADDWF  64,F
0578:  BTFSS  03.0
0579:  ADDWF  65,F
057A:  BTFSS  03.0
057B:  ADDWF  66,F
057C:  BTFSS  03.0
057D:  ADDWF  67,F
057E:  GOTO   536
....................       } 
....................    } 
057F:  GOTO   5BC
....................    else 
....................    { 
....................       for(i=0; i<target_step; i++) 
0580:  CLRF   67
0581:  CLRF   66
0582:  CLRF   65
0583:  CLRF   64
0584:  MOVF   67,W
0585:  SUBWF  63,W
0586:  BTFSS  03.0
0587:  GOTO   5BC
0588:  BTFSS  03.2
0589:  GOTO   59A
058A:  MOVF   66,W
058B:  SUBWF  62,W
058C:  BTFSS  03.0
058D:  GOTO   5BC
058E:  BTFSS  03.2
058F:  GOTO   59A
0590:  MOVF   65,W
0591:  SUBWF  61,W
0592:  BTFSS  03.0
0593:  GOTO   5BC
0594:  BTFSS  03.2
0595:  GOTO   59A
0596:  MOVF   60,W
0597:  SUBWF  64,W
0598:  BTFSC  03.0
0599:  GOTO   5BC
....................       { 
....................  
....................          output_high(DRV_STEP); 
059A:  MOVLB  01
059B:  BCF    0C.0
059C:  MOVLB  02
059D:  BSF    0C.0
....................          if(input(LIMIT_SWITCH) == 1) 
059E:  MOVLB  01
059F:  BSF    0C.2
05A0:  MOVLB  00
05A1:  BTFSS  0C.2
05A2:  GOTO   5A6
....................          { 
....................             // Limit switch is triggered 
....................             putc('L'); 
05A3:  MOVLW  4C
05A4:  CALL   315
....................             return;             
05A5:  GOTO   5CA
....................          } 
....................          delay_us(3); 
05A6:  MOVLW  07
05A7:  MOVWF  77
05A8:  DECFSZ 77,F
05A9:  GOTO   5A8
05AA:  GOTO   5AB
....................          output_low(DRV_STEP); 
05AB:  MOVLB  01
05AC:  BCF    0C.0
05AD:  MOVLB  02
05AE:  BCF    0C.0
....................          delay_us(periods[0] - 3); 
05AF:  MOVLW  61
05B0:  MOVLB  00
05B1:  MOVWF  6F
05B2:  CALL   31B
05B3:  MOVLW  01
05B4:  ADDWF  64,F
05B5:  BTFSC  03.0
05B6:  INCF   65,F
05B7:  BTFSC  03.2
05B8:  INCF   66,F
05B9:  BTFSC  03.2
05BA:  INCF   67,F
05BB:  GOTO   584
....................       } 
....................    }  
....................     
....................    // Laser off 
....................    putc('D'); 
05BC:  MOVLW  44
05BD:  CALL   315
....................    // Reached to target destination 
....................    putc('R'); 
05BE:  MOVLW  52
05BF:  CALL   315
....................    write_register(4146); //lowtorque 
05C0:  MOVLW  10
05C1:  MOVWF  69
05C2:  MOVLW  32
05C3:  MOVWF  68
05C4:  CALL   2D1
....................    write_register(17704); //auto mixed decay when paused when low torque 
05C5:  MOVLW  45
05C6:  MOVWF  69
05C7:  MOVLW  28
05C8:  MOVWF  68
05C9:  CALL   2D1
05CA:  RETURN
.................... } 
.................... // Sends system to home position 
.................... void homing_cycle() 
.................... {  
....................    write_register(4310);   //high torque 
*
032D:  MOVLW  10
032E:  MOVWF  69
032F:  MOVLW  D6
0330:  MOVWF  68
0331:  CALL   2D1
....................    write_register(17448);   //slow auto mixed decay when high torque 
0332:  MOVLW  44
0333:  MOVWF  69
0334:  MOVLW  28
0335:  MOVWF  68
0336:  CALL   2D1
....................    putc('M'); 
0337:  MOVLW  4D
0338:  CALL   315
....................     
....................    output_low(DRV_DIR); 
0339:  MOVLB  01
033A:  BCF    0C.4
033B:  MOVLB  02
033C:  BCF    0C.4
....................    delay_ms(100);  
033D:  MOVLW  64
033E:  MOVLB  00
033F:  MOVWF  6A
0340:  CALL   2BC
....................     
....................    unsigned int16 i = 0; 
0341:  CLRF   35
0342:  CLRF   34
....................    for(i=0; i<acc_lim; i++) 
0343:  CLRF   35
0344:  CLRF   34
0345:  MOVF   35,W
0346:  SUBWF  31,W
0347:  BTFSS  03.0
0348:  GOTO   383
0349:  BTFSS  03.2
034A:  GOTO   34F
034B:  MOVF   30,W
034C:  SUBWF  34,W
034D:  BTFSC  03.0
034E:  GOTO   383
....................    { 
....................  
....................       output_high(DRV_STEP); 
034F:  MOVLB  01
0350:  BCF    0C.0
0351:  MOVLB  02
0352:  BSF    0C.0
....................       if(input(LIMIT_SWITCH) == 1) 
0353:  MOVLB  01
0354:  BSF    0C.2
0355:  MOVLB  00
0356:  BTFSS  0C.2
0357:  GOTO   35B
....................       { 
....................          // Limit switch is triggered 
....................          putc('L'); 
0358:  MOVLW  4C
0359:  CALL   315
....................          return;             
035A:  GOTO   43C
....................       } 
....................       delay_us(3); 
035B:  MOVLW  07
035C:  MOVWF  77
035D:  DECFSZ 77,F
035E:  GOTO   35D
035F:  GOTO   360
....................       output_low(DRV_STEP); 
0360:  MOVLB  01
0361:  BCF    0C.0
0362:  MOVLB  02
0363:  BCF    0C.0
....................       delay_us(periods[i] + delay - 3); 
0364:  MOVLB  00
0365:  MOVF   35,W
0366:  MOVWF  7A
0367:  MOVF   34,W
0368:  CALL   023
0369:  ADDWF  2C,W
036A:  MOVWF  36
036B:  MOVLW  00
036C:  ADDWFC 2D,W
036D:  MOVWF  37
036E:  MOVLW  03
036F:  SUBWF  36,F
0370:  MOVLW  00
0371:  SUBWFC 37,F
0372:  MOVF   37,W
0373:  MOVWF  38
0374:  INCF   38,F
0375:  DECF   38,F
0376:  BTFSC  03.2
0377:  GOTO   37C
0378:  MOVLW  FF
0379:  MOVWF  6F
037A:  CALL   31B
037B:  GOTO   375
037C:  MOVF   36,W
037D:  MOVWF  6F
037E:  CALL   31B
037F:  INCF   34,F
0380:  BTFSC  03.2
0381:  INCF   35,F
0382:  GOTO   345
....................    } 
....................    while(input(HOME_SWITCH) == 1) 
0383:  MOVLB  01
0384:  BSF    0D.3
0385:  MOVLB  00
0386:  BTFSS  0D.3
0387:  GOTO   3B2
....................    { 
....................  
....................       output_high(DRV_STEP); 
0388:  MOVLB  01
0389:  BCF    0C.0
038A:  MOVLB  02
038B:  BSF    0C.0
....................       if(input(LIMIT_SWITCH) == 1) 
038C:  MOVLB  01
038D:  BSF    0C.2
038E:  MOVLB  00
038F:  BTFSS  0C.2
0390:  GOTO   394
....................       { 
....................          // Limit switch is triggered 
....................          putc('L'); 
0391:  MOVLW  4C
0392:  CALL   315
....................          return;             
0393:  GOTO   43C
....................       } 
....................       delay_us(3); 
0394:  MOVLW  07
0395:  MOVWF  77
0396:  DECFSZ 77,F
0397:  GOTO   396
0398:  GOTO   399
....................       output_low(DRV_STEP); 
0399:  MOVLB  01
039A:  BCF    0C.0
039B:  MOVLB  02
039C:  BCF    0C.0
....................       delay_us(delay - 3); 
039D:  MOVLW  03
039E:  MOVLB  00
039F:  SUBWF  2C,W
03A0:  MOVWF  36
03A1:  MOVLW  00
03A2:  SUBWFC 2D,W
03A3:  MOVWF  37
03A4:  MOVF   37,W
03A5:  MOVWF  38
03A6:  INCF   38,F
03A7:  DECF   38,F
03A8:  BTFSC  03.2
03A9:  GOTO   3AE
03AA:  MOVLW  FF
03AB:  MOVWF  6F
03AC:  CALL   31B
03AD:  GOTO   3A7
03AE:  MOVF   36,W
03AF:  MOVWF  6F
03B0:  CALL   31B
03B1:  GOTO   383
....................    } 
....................    for(i=acc_lim; i>0; i--) 
03B2:  MOVF   31,W
03B3:  MOVWF  35
03B4:  MOVF   30,W
03B5:  MOVWF  34
03B6:  MOVF   34,F
03B7:  BTFSS  03.2
03B8:  GOTO   3BC
03B9:  MOVF   35,F
03BA:  BTFSC  03.2
03BB:  GOTO   3F7
....................    { 
....................  
....................       output_high(DRV_STEP); 
03BC:  MOVLB  01
03BD:  BCF    0C.0
03BE:  MOVLB  02
03BF:  BSF    0C.0
....................       if(input(LIMIT_SWITCH) == 1) 
03C0:  MOVLB  01
03C1:  BSF    0C.2
03C2:  MOVLB  00
03C3:  BTFSS  0C.2
03C4:  GOTO   3C8
....................       { 
....................          // Limit switch is triggered 
....................          putc('L'); 
03C5:  MOVLW  4C
03C6:  CALL   315
....................          return;             
03C7:  GOTO   43C
....................       } 
....................       delay_us(3); 
03C8:  MOVLW  07
03C9:  MOVWF  77
03CA:  DECFSZ 77,F
03CB:  GOTO   3CA
03CC:  GOTO   3CD
....................       output_low(DRV_STEP); 
03CD:  MOVLB  01
03CE:  BCF    0C.0
03CF:  MOVLB  02
03D0:  BCF    0C.0
....................       delay_us(periods[i-1] + delay - 3); 
03D1:  MOVLW  01
03D2:  MOVLB  00
03D3:  SUBWF  34,W
03D4:  MOVWF  36
03D5:  MOVLW  00
03D6:  SUBWFC 35,W
03D7:  MOVWF  37
03D8:  MOVF   37,W
03D9:  MOVWF  7A
03DA:  MOVF   36,W
03DB:  CALL   023
03DC:  ADDWF  2C,W
03DD:  MOVWF  38
03DE:  MOVLW  00
03DF:  ADDWFC 2D,W
03E0:  MOVWF  39
03E1:  MOVLW  03
03E2:  SUBWF  38,F
03E3:  MOVLW  00
03E4:  SUBWFC 39,F
03E5:  MOVF   39,W
03E6:  MOVWF  3A
03E7:  INCF   3A,F
03E8:  DECF   3A,F
03E9:  BTFSC  03.2
03EA:  GOTO   3EF
03EB:  MOVLW  FF
03EC:  MOVWF  6F
03ED:  CALL   31B
03EE:  GOTO   3E8
03EF:  MOVF   38,W
03F0:  MOVWF  6F
03F1:  CALL   31B
03F2:  MOVF   34,W
03F3:  BTFSC  03.2
03F4:  DECF   35,F
03F5:  DECF   34,F
03F6:  GOTO   3B6
....................    } 
....................     
....................    output_high(DRV_DIR); 
03F7:  MOVLB  01
03F8:  BCF    0C.4
03F9:  MOVLB  02
03FA:  BSF    0C.4
....................    delay_ms(500); 
03FB:  MOVLW  02
03FC:  MOVLB  00
03FD:  MOVWF  36
03FE:  MOVLW  FA
03FF:  MOVWF  6A
0400:  CALL   2BC
0401:  DECFSZ 36,F
0402:  GOTO   3FE
....................     
....................    for(i=home_distance; i>0; i--) 
0403:  MOVF   2F,W
0404:  MOVWF  35
0405:  MOVF   2E,W
0406:  MOVWF  34
0407:  MOVF   34,F
0408:  BTFSS  03.2
0409:  GOTO   40D
040A:  MOVF   35,F
040B:  BTFSC  03.2
040C:  GOTO   42C
....................    { 
....................  
....................       output_high(DRV_STEP); 
040D:  MOVLB  01
040E:  BCF    0C.0
040F:  MOVLB  02
0410:  BSF    0C.0
....................       if(input(LIMIT_SWITCH) == 1) 
0411:  MOVLB  01
0412:  BSF    0C.2
0413:  MOVLB  00
0414:  BTFSS  0C.2
0415:  GOTO   419
....................       { 
....................          // Limit switch is triggered 
....................          putc('L'); 
0416:  MOVLW  4C
0417:  CALL   315
....................          return;             
0418:  GOTO   43C
....................       } 
....................       delay_us(8); 
0419:  MOVLW  14
041A:  MOVWF  77
041B:  DECFSZ 77,F
041C:  GOTO   41B
041D:  GOTO   41E
041E:  NOP
....................       output_low(DRV_STEP); 
041F:  MOVLB  01
0420:  BCF    0C.0
0421:  MOVLB  02
0422:  BCF    0C.0
....................       delay_us(1000); 
0423:  MOVLW  01
0424:  MOVLB  00
0425:  MOVWF  6A
0426:  CALL   2BC
0427:  MOVF   34,W
0428:  BTFSC  03.2
0429:  DECF   35,F
042A:  DECF   34,F
042B:  GOTO   407
....................    } 
....................     
....................    current_distance = 0; 
042C:  CLRF   28
042D:  CLRF   27
042E:  CLRF   26
042F:  CLRF   25
....................    write_register(4146); //lowtorque 
0430:  MOVLW  10
0431:  MOVWF  69
0432:  MOVLW  32
0433:  MOVWF  68
0434:  CALL   2D1
....................    write_register(17704); //auto mixed decay when paused when low torque 
0435:  MOVLW  45
0436:  MOVWF  69
0437:  MOVLW  28
0438:  MOVWF  68
0439:  CALL   2D1
....................    putc('R'); 
043A:  MOVLW  52
043B:  CALL   315
043C:  RETURN
.................... } 
.................... // Calculates the displacement 
.................... void go_position(int32 user_distance) 
.................... { 
....................    if(user_distance>current_distance) 
*
0698:  MOVF   28,W
0699:  SUBWF  5B,W
069A:  BTFSS  03.0
069B:  GOTO   6C8
069C:  BTFSS  03.2
069D:  GOTO   6AE
069E:  MOVF   27,W
069F:  SUBWF  5A,W
06A0:  BTFSS  03.0
06A1:  GOTO   6C8
06A2:  BTFSS  03.2
06A3:  GOTO   6AE
06A4:  MOVF   26,W
06A5:  SUBWF  59,W
06A6:  BTFSS  03.0
06A7:  GOTO   6C8
06A8:  BTFSS  03.2
06A9:  GOTO   6AE
06AA:  MOVF   58,W
06AB:  SUBWF  25,W
06AC:  BTFSC  03.0
06AD:  GOTO   6C8
....................    { 
....................       output_high(DRV_DIR); 
06AE:  MOVLB  01
06AF:  BCF    0C.4
06B0:  MOVLB  02
06B1:  BSF    0C.4
....................       motion_cycle(user_distance - current_distance); 
06B2:  MOVLB  00
06B3:  MOVF   25,W
06B4:  SUBWF  58,W
06B5:  MOVWF  5C
06B6:  MOVF   26,W
06B7:  SUBWFC 59,W
06B8:  MOVWF  5D
06B9:  MOVF   27,W
06BA:  SUBWFC 5A,W
06BB:  MOVWF  5E
06BC:  MOVF   28,W
06BD:  SUBWFC 5B,W
06BE:  MOVWF  5F
06BF:  MOVWF  63
06C0:  MOVF   5E,W
06C1:  MOVWF  62
06C2:  MOVF   5D,W
06C3:  MOVWF  61
06C4:  MOVF   5C,W
06C5:  MOVWF  60
06C6:  CALL   467
....................    } 
06C7:  GOTO   6FC
....................    else if(user_distance<current_distance) 
06C8:  MOVF   5B,W
06C9:  SUBWF  28,W
06CA:  BTFSS  03.0
06CB:  GOTO   6F8
06CC:  BTFSS  03.2
06CD:  GOTO   6DE
06CE:  MOVF   5A,W
06CF:  SUBWF  27,W
06D0:  BTFSS  03.0
06D1:  GOTO   6F8
06D2:  BTFSS  03.2
06D3:  GOTO   6DE
06D4:  MOVF   59,W
06D5:  SUBWF  26,W
06D6:  BTFSS  03.0
06D7:  GOTO   6F8
06D8:  BTFSS  03.2
06D9:  GOTO   6DE
06DA:  MOVF   25,W
06DB:  SUBWF  58,W
06DC:  BTFSC  03.0
06DD:  GOTO   6F8
....................    { 
....................       output_low(DRV_DIR); 
06DE:  MOVLB  01
06DF:  BCF    0C.4
06E0:  MOVLB  02
06E1:  BCF    0C.4
....................       motion_cycle(current_distance-user_distance); 
06E2:  MOVLB  00
06E3:  MOVF   58,W
06E4:  SUBWF  25,W
06E5:  MOVWF  5C
06E6:  MOVF   59,W
06E7:  SUBWFC 26,W
06E8:  MOVWF  5D
06E9:  MOVF   5A,W
06EA:  SUBWFC 27,W
06EB:  MOVWF  5E
06EC:  MOVF   5B,W
06ED:  SUBWFC 28,W
06EE:  MOVWF  5F
06EF:  MOVWF  63
06F0:  MOVF   5E,W
06F1:  MOVWF  62
06F2:  MOVF   5D,W
06F3:  MOVWF  61
06F4:  MOVF   5C,W
06F5:  MOVWF  60
06F6:  CALL   467
....................    } 
06F7:  GOTO   6FC
....................    else 
....................    { 
....................       putc('M'); 
06F8:  MOVLW  4D
06F9:  CALL   315
....................       putc('R'); 
06FA:  MOVLW  52
06FB:  CALL   315
....................    } 
....................     
....................    current_distance = user_distance; 
06FC:  MOVF   5B,W
06FD:  MOVWF  28
06FE:  MOVF   5A,W
06FF:  MOVWF  27
0700:  MOVF   59,W
0701:  MOVWF  26
0702:  MOVF   58,W
0703:  MOVWF  25
.................... } 
....................  
.................... // Handles the messages of RS232 connection 
.................... void rs232_message() 
*
05CB:  BTFSS  11.5
05CC:  GOTO   5CB
05CD:  MOVLB  03
05CE:  MOVF   19,W
05CF:  MOVLB  00
05D0:  MOVWF  34
05D1:  CLRF   35
.................... { 
....................    char command = fgetc(RS232); 
....................    unsigned int i=0; 
....................    unsigned int32 input[7]; 
....................        
....................    switch (command) 
05D2:  MOVF   34,W
05D3:  XORLW  47
05D4:  BTFSC  03.2
05D5:  GOTO   5DA
05D6:  XORLW  14
05D7:  BTFSC  03.2
05D8:  GOTO   705
05D9:  GOTO   774
....................    { 
....................       case 'G':   for(i=0; i<7; i++) 
05DA:  CLRF   35
05DB:  MOVF   35,W
05DC:  SUBLW  06
05DD:  BTFSS  03.0
05DE:  GOTO   5FA
....................                   { 
....................                      input[i]=(unsigned)(fgetc(RS232)-48); 
05DF:  RLF    35,W
05E0:  MOVWF  77
05E1:  RLF    77,F
05E2:  MOVLW  FC
05E3:  ANDWF  77,F
05E4:  MOVF   77,W
05E5:  ADDLW  18
05E6:  MOVWF  04
05E7:  MOVLW  20
05E8:  MOVWF  05
05E9:  BTFSC  03.0
05EA:  INCF   05,F
05EB:  BTFSS  11.5
05EC:  GOTO   5EB
05ED:  MOVLB  03
05EE:  MOVF   19,W
05EF:  ADDLW  D0
05F0:  MOVWF  00
05F1:  ADDFSR 01,FSR0
05F2:  CLRF   00
05F3:  ADDFSR 01,FSR0
05F4:  CLRF   00
05F5:  ADDFSR 01,FSR0
05F6:  CLRF   00
05F7:  MOVLB  00
05F8:  INCF   35,F
05F9:  GOTO   5DB
....................                   } 
....................                    
....................                   int32 data=1000000*input[0]+100000*input[1]+10000*input[2]+1000*input[3]+100*input[4]+10*input[5]+input[6]; 
05FA:  CLRF   5F
05FB:  MOVLW  0F
05FC:  MOVWF  5E
05FD:  MOVLW  42
05FE:  MOVWF  5D
05FF:  MOVLW  40
0600:  MOVWF  5C
0601:  MOVF   3B,W
0602:  MOVWF  63
0603:  MOVF   3A,W
0604:  MOVWF  62
0605:  MOVF   39,W
0606:  MOVWF  61
0607:  MOVF   38,W
0608:  MOVWF  60
0609:  CALL   43D
060A:  MOVF   7A,W
060B:  MOVWF  5B
060C:  MOVF   79,W
060D:  MOVWF  5A
060E:  MOVF   78,W
060F:  MOVWF  59
0610:  MOVF   77,W
0611:  MOVWF  58
0612:  CLRF   5F
0613:  MOVLW  01
0614:  MOVWF  5E
0615:  MOVLW  86
0616:  MOVWF  5D
0617:  MOVLW  A0
0618:  MOVWF  5C
0619:  MOVF   3F,W
061A:  MOVWF  63
061B:  MOVF   3E,W
061C:  MOVWF  62
061D:  MOVF   3D,W
061E:  MOVWF  61
061F:  MOVF   3C,W
0620:  MOVWF  60
0621:  CALL   43D
0622:  MOVF   77,W
0623:  ADDWF  58,F
0624:  MOVF   78,W
0625:  ADDWFC 59,F
0626:  MOVF   79,W
0627:  ADDWFC 5A,F
0628:  MOVF   7A,W
0629:  ADDWFC 5B,F
062A:  CLRF   5F
062B:  CLRF   5E
062C:  MOVLW  27
062D:  MOVWF  5D
062E:  MOVLW  10
062F:  MOVWF  5C
0630:  MOVF   43,W
0631:  MOVWF  63
0632:  MOVF   42,W
0633:  MOVWF  62
0634:  MOVF   41,W
0635:  MOVWF  61
0636:  MOVF   40,W
0637:  MOVWF  60
0638:  CALL   43D
0639:  MOVF   77,W
063A:  ADDWF  58,F
063B:  MOVF   78,W
063C:  ADDWFC 59,F
063D:  MOVF   79,W
063E:  ADDWFC 5A,F
063F:  MOVF   7A,W
0640:  ADDWFC 5B,F
0641:  CLRF   5F
0642:  CLRF   5E
0643:  MOVLW  03
0644:  MOVWF  5D
0645:  MOVLW  E8
0646:  MOVWF  5C
0647:  MOVF   47,W
0648:  MOVWF  63
0649:  MOVF   46,W
064A:  MOVWF  62
064B:  MOVF   45,W
064C:  MOVWF  61
064D:  MOVF   44,W
064E:  MOVWF  60
064F:  CALL   43D
0650:  MOVF   77,W
0651:  ADDWF  58,F
0652:  MOVF   78,W
0653:  ADDWFC 59,F
0654:  MOVF   79,W
0655:  ADDWFC 5A,F
0656:  MOVF   7A,W
0657:  ADDWFC 5B,F
0658:  CLRF   5F
0659:  CLRF   5E
065A:  CLRF   5D
065B:  MOVLW  64
065C:  MOVWF  5C
065D:  MOVF   4B,W
065E:  MOVWF  63
065F:  MOVF   4A,W
0660:  MOVWF  62
0661:  MOVF   49,W
0662:  MOVWF  61
0663:  MOVF   48,W
0664:  MOVWF  60
0665:  CALL   43D
0666:  MOVF   77,W
0667:  ADDWF  58,F
0668:  MOVF   78,W
0669:  ADDWFC 59,F
066A:  MOVF   79,W
066B:  ADDWFC 5A,F
066C:  MOVF   7A,W
066D:  ADDWFC 5B,F
066E:  CLRF   5F
066F:  CLRF   5E
0670:  CLRF   5D
0671:  MOVLW  0A
0672:  MOVWF  5C
0673:  MOVF   4F,W
0674:  MOVWF  63
0675:  MOVF   4E,W
0676:  MOVWF  62
0677:  MOVF   4D,W
0678:  MOVWF  61
0679:  MOVF   4C,W
067A:  MOVWF  60
067B:  CALL   43D
067C:  MOVF   77,W
067D:  ADDWF  58,F
067E:  MOVF   78,W
067F:  ADDWFC 59,F
0680:  MOVF   79,W
0681:  ADDWFC 5A,F
0682:  MOVF   7A,W
0683:  ADDWFC 5B,F
0684:  MOVF   50,W
0685:  ADDWF  58,W
0686:  MOVWF  54
0687:  MOVF   51,W
0688:  ADDWFC 59,W
0689:  MOVWF  55
068A:  MOVF   52,W
068B:  ADDWFC 5A,W
068C:  MOVWF  56
068D:  MOVF   53,W
068E:  ADDWFC 5B,W
068F:  MOVWF  57
....................                    
....................                   go_position(data); 
0690:  MOVF   57,W
0691:  MOVWF  5B
0692:  MOVF   56,W
0693:  MOVWF  5A
0694:  MOVF   55,W
0695:  MOVWF  59
0696:  MOVF   54,W
0697:  MOVWF  58
....................                   break; 
*
0704:  GOTO   774
....................       case 'S':   if(mode == 0) 
0705:  BTFSC  29.1
0706:  GOTO   773
....................                   {         
....................                      for(i=0; i<3; i++) 
0707:  CLRF   35
0708:  MOVF   35,W
0709:  SUBLW  02
070A:  BTFSS  03.0
070B:  GOTO   727
....................                      { 
....................                         input[i]=(unsigned)(fgetc(RS232)-48); 
070C:  RLF    35,W
070D:  MOVWF  77
070E:  RLF    77,F
070F:  MOVLW  FC
0710:  ANDWF  77,F
0711:  MOVF   77,W
0712:  ADDLW  18
0713:  MOVWF  04
0714:  MOVLW  20
0715:  MOVWF  05
0716:  BTFSC  03.0
0717:  INCF   05,F
0718:  BTFSS  11.5
0719:  GOTO   718
071A:  MOVLB  03
071B:  MOVF   19,W
071C:  ADDLW  D0
071D:  MOVWF  00
071E:  ADDFSR 01,FSR0
071F:  CLRF   00
0720:  ADDFSR 01,FSR0
0721:  CLRF   00
0722:  ADDFSR 01,FSR0
0723:  CLRF   00
0724:  MOVLB  00
0725:  INCF   35,F
0726:  GOTO   708
....................                      } 
....................                       
....................                      delay = 100*input[0] + 10*input[1] + input[2]; 
0727:  CLRF   5F
0728:  CLRF   5E
0729:  CLRF   5D
072A:  MOVLW  64
072B:  MOVWF  5C
072C:  MOVF   3B,W
072D:  MOVWF  63
072E:  MOVF   3A,W
072F:  MOVWF  62
0730:  MOVF   39,W
0731:  MOVWF  61
0732:  MOVF   38,W
0733:  MOVWF  60
0734:  CALL   43D
0735:  MOVF   7A,W
0736:  MOVWF  5B
0737:  MOVF   79,W
0738:  MOVWF  5A
0739:  MOVF   78,W
073A:  MOVWF  59
073B:  MOVF   77,W
073C:  MOVWF  58
073D:  CLRF   5F
073E:  CLRF   5E
073F:  CLRF   5D
0740:  MOVLW  0A
0741:  MOVWF  5C
0742:  MOVF   3F,W
0743:  MOVWF  63
0744:  MOVF   3E,W
0745:  MOVWF  62
0746:  MOVF   3D,W
0747:  MOVWF  61
0748:  MOVF   3C,W
0749:  MOVWF  60
074A:  CALL   43D
074B:  MOVF   77,W
074C:  ADDWF  58,F
074D:  MOVF   78,W
074E:  ADDWFC 59,F
074F:  MOVF   79,W
0750:  ADDWFC 5A,F
0751:  MOVF   7A,W
0752:  ADDWFC 5B,F
0753:  MOVF   40,W
0754:  ADDWF  58,W
0755:  MOVWF  2C
0756:  MOVF   41,W
0757:  ADDWFC 59,W
0758:  MOVWF  2D
....................                       
....................                      if(delay > 2000) 
0759:  MOVF   2D,W
075A:  SUBLW  06
075B:  BTFSC  03.0
075C:  GOTO   769
075D:  XORLW  FF
075E:  BTFSS  03.2
075F:  GOTO   764
0760:  MOVF   2C,W
0761:  SUBLW  D0
0762:  BTFSC  03.0
0763:  GOTO   769
....................                         delay =  2000; 
0764:  MOVLW  07
0765:  MOVWF  2D
0766:  MOVLW  D0
0767:  MOVWF  2C
0768:  GOTO   773
....................                      else if (delay < 30) 
0769:  MOVF   2D,F
076A:  BTFSS  03.2
076B:  GOTO   773
076C:  MOVF   2C,W
076D:  SUBLW  1D
076E:  BTFSS  03.0
076F:  GOTO   773
....................                         delay = 30; 
0770:  CLRF   2D
0771:  MOVLW  1E
0772:  MOVWF  2C
....................                   } 
....................                   break; 
0773:  GOTO   774
....................       default :   return;  
....................    } 
0774:  MOVLP  00
0775:  GOTO   7EB (RETURN)
.................... } 
....................  
.................... #INT_RDA 
.................... void isr_rs232_message() 
.................... { 
....................    disable_interrupts(INT_RDA); 
*
0284:  MOVLB  01
0285:  BCF    11.5
....................    // Receive the RS232 message 
....................    reg_rs232_message = 1; 
0286:  MOVLB  00
0287:  BSF    29.0
0288:  BCF    11.5
0289:  MOVLP  00
028A:  GOTO   018
.................... }  
....................  
.................... void main() 
*
0776:  MOVLW  F0
0777:  MOVLB  01
0778:  MOVWF  19
0779:  MOVLB  02
077A:  BSF    1E.0
077B:  BSF    1D.7
077C:  MOVLB  03
077D:  BCF    1F.3
077E:  MOVLW  0C
077F:  MOVWF  1B
0780:  MOVLW  A2
0781:  MOVWF  1E
0782:  MOVLW  90
0783:  MOVWF  1D
0784:  MOVLB  00
0785:  CLRF   28
0786:  CLRF   27
0787:  CLRF   26
0788:  CLRF   25
0789:  BCF    29.0
078A:  BCF    29.1
078B:  MOVLW  19
078C:  MOVWF  2B
078D:  CLRF   2A
078E:  CLRF   2D
078F:  MOVLW  1E
0790:  MOVWF  2C
0791:  MOVLW  0F
0792:  MOVWF  2F
0793:  MOVLW  A0
0794:  MOVWF  2E
0795:  MOVLW  02
0796:  MOVWF  31
0797:  MOVLW  58
0798:  MOVWF  30
0799:  MOVLB  03
079A:  CLRF   0C
079B:  CLRF   0D
079C:  MOVLB  02
079D:  CLRF   12
079E:  CLRF   11
079F:  CLRF   14
07A0:  CLRF   13
.................... { 
....................    // Set I/O states of the ports 
....................    //           76543210                   
....................    set_tris_a(0b00101100);        
07A1:  MOVLW  2C
07A2:  TRIS   5
....................    set_tris_b(0b11001111); 
07A3:  MOVLW  CF
07A4:  TRIS   6
....................  
....................    // Set alternative pin functions 
....................    set_pins(); 
07A5:  MOVLB  00
07A6:  GOTO   28B
....................    // Set SPI parameters 
....................    set_SPI(); 
07A7:  GOTO   291
....................    // Set variables to default values 
....................    set_variables(); 
07A8:  GOTO   29E
....................    // Set driver 
....................    set_driver(); 
07A9:  GOTO   2E7
....................    // Send system to home position 
....................    homing_cycle(); 
07AA:  CALL   32D
....................     
....................    enable_interrupts(global); 
07AB:  MOVLW  C0
07AC:  IORWF  0B,F
....................    enable_interrupts(INT_RDA); 
07AD:  MOVLB  01
07AE:  BSF    11.5
....................    while(true) 
....................    {   
....................       if(input(LIMIT_SWITCH)) 
07AF:  BSF    0C.2
07B0:  MOVLB  00
07B1:  BTFSS  0C.2
07B2:  GOTO   7E7
....................       { 
....................          // Disable RS232 receive byte interrupt 
....................          disable_interrupts(INT_RDA); 
07B3:  MOVLB  01
07B4:  BCF    11.5
....................  
....................          output_toggle(DRV_DIR); 
07B5:  BCF    0C.4
07B6:  MOVLW  10
07B7:  MOVLB  02
07B8:  XORWF  0C,F
....................          delay_ms(500); 
07B9:  MOVLW  02
07BA:  MOVLB  00
07BB:  MOVWF  34
07BC:  MOVLW  FA
07BD:  MOVWF  6A
07BE:  CALL   2BC
07BF:  DECFSZ 34,F
07C0:  GOTO   7BC
....................          for(unsigned int16 i=0; i <= pulse_per_turn; i++) 
07C1:  CLRF   33
07C2:  CLRF   32
07C3:  MOVF   33,W
07C4:  SUBWF  2B,W
07C5:  BTFSS  03.0
07C6:  GOTO   7E2
07C7:  BTFSS  03.2
07C8:  GOTO   7CD
07C9:  MOVF   32,W
07CA:  SUBWF  2A,W
07CB:  BTFSS  03.0
07CC:  GOTO   7E2
....................          { 
....................             output_high(DRV_STEP); 
07CD:  MOVLB  01
07CE:  BCF    0C.0
07CF:  MOVLB  02
07D0:  BSF    0C.0
....................             delay_us(10); 
07D1:  MOVLW  1A
07D2:  MOVWF  77
07D3:  DECFSZ 77,F
07D4:  GOTO   7D3
07D5:  NOP
....................             output_low(DRV_STEP); 
07D6:  MOVLB  01
07D7:  BCF    0C.0
07D8:  MOVLB  02
07D9:  BCF    0C.0
....................             delay_us(1000); 
07DA:  MOVLW  01
07DB:  MOVLB  00
07DC:  MOVWF  6A
07DD:  CALL   2BC
07DE:  INCF   32,F
07DF:  BTFSC  03.2
07E0:  INCF   33,F
07E1:  GOTO   7C3
....................          } 
....................          homing_cycle(); 
07E2:  CALL   32D
....................           
....................          clear_interrupt(INT_RDA); 
07E3:  MOVF   07,W
....................          enable_interrupts(INT_RDA);   
07E4:  MOVLB  01
07E5:  BSF    11.5
07E6:  MOVLB  00
....................       } 
....................       if(reg_rs232_message) 
07E7:  BTFSS  29.0
07E8:  GOTO   7EF
....................       { 
....................          reg_rs232_message = 0; 
07E9:  BCF    29.0
....................          rs232_message(); 
07EA:  GOTO   5CB
....................           
....................          clear_interrupt(INT_RDA); 
07EB:  MOVF   07,W
....................          enable_interrupts(INT_RDA); 
07EC:  MOVLB  01
07ED:  BSF    11.5
07EE:  MOVLB  00
....................       } 
07EF:  MOVLB  01
07F0:  GOTO   7AF
....................    }    
.................... } 
07F1:  SLEEP

Configuration Fuses:
   Word  1: 0E04   INTRC_IO NOWDT PUT NOMCLR PROTECT CPD BROWNOUT NOCLKOUT NOIESO NOFCMEN
   Word  2: 1AFC   WRT PLL_SW STVREN BORV25 NODEBUG NOLVP
