D G "__PCD__" 0 2275 ""5.008""
D G "__DEVICE__" 0 2275 "6014"
D G "__DATE__" 0 2275 ""18-Kas-14""
D G "__TIME__" 0 2275 ""13:27:35"" "Standard Header file for the DSPIC30F6015 device ////////////////"
c L "set_tris_b" 1 5 22 "FUNCTION"
v L "value" 1 41 "int16" `53 
f B "set_tris_b" 1 41 "void(int16 value)" `52 
v L "value" 1 42 "int16" `55 
f B "set_tris_d" 1 42 "void(int16 value)" `54 
v L "value" 1 43 "int16" `57 
f B "set_tris_e" 1 43 "void(int16 value)" `56 
v L "value" 1 44 "int16" `59 
f B "set_tris_f" 1 44 "void(int16 value)" `58 
v L "value" 1 45 "int16" `61 
f B "set_tris_g" 1 45 "void(int16 value)" `60 
f B "get_tris_b" 1 46 "int16()" `62 
f B "get_tris_d" 1 47 "int16()" `63 
f B "get_tris_e" 1 48 "int16()" `64 
f B "get_tris_f" 1 49 "int16()" `65 
f B "get_tris_g" 1 50 "int16()" `66 
v L "value" 1 51 "int16" `68 
f B "output_b" 1 51 "void(int16 value)" `67 
v L "value" 1 52 "int16" `70 
f B "output_d" 1 52 "void(int16 value)" `69 
v L "value" 1 53 "int16" `72 
f B "output_e" 1 53 "void(int16 value)" `71 
v L "value" 1 54 "int16" `74 
f B "output_f" 1 54 "void(int16 value)" `73 
v L "value" 1 55 "int16" `76 
f B "output_g" 1 55 "void(int16 value)" `75 
f B "input_b" 1 56 "int16()" `77 
f B "input_d" 1 57 "int16()" `78 
f B "input_e" 1 58 "int16()" `79 
f B "input_f" 1 59 "int16()" `80 
f B "input_g" 1 60 "int16()" `81 
f B "input_change_b" 1 61 "int8()" `82 
f B "input_change_d" 1 62 "int8()" `83 
f B "input_change_e" 1 63 "int8()" `84 
f B "input_change_f" 1 64 "int8()" `85 
f B "input_change_g" 1 65 "int8()" `86 
v L "state" 1 66 "int8" `88 
f B "set_pullup" 1 66 "void(int8 state)" `87 
v L "state" 1 67 "int8" `90 
v L "pin" 1 67 "int16" `91 
f G "set_pullup" 1 67 "void(int8 state,int16 pin)" `89 
v L "state" 1 68 "int8" `93 
f B "set_pulldown" 1 68 "void(int8 state)" `92 
v L "state" 1 69 "int8" `95 
v L "pin" 1 69 "int16" `96 
f G "set_pulldown" 1 69 "void(int8 state,int16 pin)" `94 
v L "pin" 1 70 "int16" `98 
f B "input" 1 70 "int8(int16 pin)" `97 
v L "pin" 1 71 "int16" `100 
f B "input_state" 1 71 "int8(int16 pin)" `99 
v L "pin" 1 72 "int16" `102 
f B "output_low" 1 72 "void(int16 pin)" `101 
v L "pin" 1 73 "int16" `104 
f B "output_high" 1 73 "void(int16 pin)" `103 
v L "pin" 1 74 "int16" `106 
f B "output_toggle" 1 74 "void(int16 pin)" `105 
v L "pin" 1 75 "int16" `108 
v L "level" 1 75 "int8" `109 
f B "output_bit" 1 75 "void(int16 pin,int8 level)" `107 
v L "pin" 1 76 "int16" `111 
f B "output_float" 1 76 "void(int16 pin)" `110 
v L "pin" 1 77 "int16" `113 
f B "output_drive" 1 77 "void(int16 pin)" `112  "Constants used to identify pins in the above are:"
d G "PIN_B0" 1 80 "5696"
d G "PIN_B1" 1 81 "5697"
d G "PIN_B2" 1 82 "5698"
d G "PIN_B3" 1 83 "5699"
d G "PIN_B4" 1 84 "5700"
d G "PIN_B5" 1 85 "5701"
d G "PIN_B6" 1 86 "5702"
d G "PIN_B7" 1 87 "5703"
d G "PIN_B8" 1 88 "5704"
d G "PIN_B9" 1 89 "5705"
d G "PIN_B10" 1 90 "5706"
d G "PIN_B11" 1 91 "5707"
d G "PIN_B12" 1 92 "5708"
d G "PIN_B13" 1 93 "5709"
d G "PIN_B14" 1 94 "5710"
d G "PIN_B15" 1 95 "5711"
d G "PIN_C13" 1 97 "5757"
d G "PIN_C14" 1 98 "5758"
d G "PIN_C15" 1 99 "5759"
d G "PIN_D0" 1 101 "5792"
d G "PIN_D1" 1 102 "5793"
d G "PIN_D2" 1 103 "5794"
d G "PIN_D3" 1 104 "5795"
d G "PIN_D4" 1 105 "5796"
d G "PIN_D5" 1 106 "5797"
d G "PIN_D6" 1 107 "5798"
d G "PIN_D7" 1 108 "5799"
d G "PIN_D8" 1 109 "5800"
d G "PIN_D9" 1 110 "5801"
d G "PIN_D10" 1 111 "5802"
d G "PIN_D11" 1 112 "5803"
d G "PIN_E0" 1 114 "5840"
d G "PIN_E1" 1 115 "5841"
d G "PIN_E2" 1 116 "5842"
d G "PIN_E3" 1 117 "5843"
d G "PIN_E4" 1 118 "5844"
d G "PIN_E5" 1 119 "5845"
d G "PIN_E6" 1 120 "5846"
d G "PIN_E7" 1 121 "5847"
d G "PIN_F0" 1 123 "5888"
d G "PIN_F1" 1 124 "5889"
d G "PIN_F2" 1 125 "5890"
d G "PIN_F3" 1 126 "5891"
d G "PIN_F4" 1 127 "5892"
d G "PIN_F5" 1 128 "5893"
d G "PIN_F6" 1 129 "5894"
d G "PIN_G2" 1 131 "5938"
d G "PIN_G3" 1 132 "5939"
d G "PIN_G6" 1 133 "5942"
d G "PIN_G7" 1 134 "5943"
d G "PIN_G8" 1 135 "5944"
d G "PIN_G9" 1 136 "5945"
d G "FALSE" 1 139 "0"
d G "TRUE" 1 140 "1"
d G "BYTE" 1 142 "unsigned int8"
d G "BOOLEAN" 1 143 "int1"
d G "getc" 1 145 "getch"
d G "fgetc" 1 146 "getch"
d G "getchar" 1 147 "getch"
d G "putc" 1 148 "putchar"
d G "fputc" 1 149 "putchar"
d G "fgets" 1 150 "gets"
d G "fputs" 1 151 "puts"
c L "output_drive" 1 5 2 "FUNCTION"
v L "baud" 1 155 "int32" `115 
f B "setup_uart" 1 155 "void(int32 baud)" `114 
v L "baud" 1 156 "int32" `117 
v L "stream" 1 156 "int8" `118 
f G "setup_uart" 1 156 "void(int32 baud,int8 stream)" `116 
v L "baud" 1 157 "int32" `120 
v L "stream" 1 157 "int8" `121 
v L "clock" 1 157 "int32" `122 
f G "setup_uart" 1 157 "void(int32 baud,int8 stream,int32 clock)" `119 
v L "baud" 1 158 "int32" `124 
f B "set_uart_speed" 1 158 "void(int32 baud)" `123 
v L "baud" 1 159 "int32" `126 
v L "stream" 1 159 "int8" `127 
f G "set_uart_speed" 1 159 "void(int32 baud,int8 stream)" `125 
v L "baud" 1 160 "int32" `129 
v L "stream" 1 160 "int8" `130 
v L "clock" 1 160 "int32" `131 
f G "set_uart_speed" 1 160 "void(int32 baud,int8 stream,int32 clock)" `128  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 164 "2"
d G "UART_DATA" 1 165 "4"
d G "UART_AUTODETECT" 1 166 "8"
d G "UART_AUTODETECT_NOWAIT" 1 167 "9"
d G "UART_WAKEUP_ON_RDA" 1 168 "10"
d G "UART_SEND_BREAK" 1 169 "13"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 174 "int8" `133 
f B "setup_wdt" 1 174 "void(int8 mode)" `132 
f B "restart_wdt" 1 175 "void()" `134  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 177 "1"
d G "WDT_OFF" 1 178 "0"
d G "WDT_2MS" 1 180 "0x021"
d G "WDT_4MS" 1 181 "0x022"
d G "WDT_8MS" 1 182 "0x023"
d G "WDT_16MS" 1 183 "0x024"
d G "WDT_32MS" 1 184 "0x025"
d G "WDT_64MS" 1 185 "0x026"
d G "WDT_128MS" 1 186 "0x027"
d G "WDT_256MS" 1 187 "0x028"
d G "WDT_512MS" 1 188 "0x029"
d G "WDT_1S" 1 189 "0x02A"
d G "WDT_2S" 1 190 "0x02B"
d G "WDT_4S" 1 191 "0x02C"
d G "WDT_8S" 1 192 "0x02D"
d G "WDT_16S" 1 193 "0x02E"
d G "WDT_33S" 1 194 "0x02F"
d G "WDT_65S" 1 195 "0x030"
d G "WDT_131S" 1 196 "0x04E"
d G "WDT_262S" 1 197 "0x04F"
d G "WDT_524S" 1 198 "0x050"
d G "WDT_1048S" 1 199 "0x06E"
d G "WDT_2097S" 1 200 "0x06F"
d G "WDT_4194S" 1 201 "0x070"
d G "WDT_8388S" 1 202 "0x08E"
d G "WDT_16777S" 1 203 "0x08F"
d G "WDT_33554S" 1 204 "0x090"
c L "restart_wdt" 1 5 3 "FUNCTION"
f B "restart_cause" 1 209 "int8()" `135 
f B "reset_cpu" 1 210 "void()" `136 
f B "sleep" 1 211 "void()" `137 
v L "mode" 1 212 "int8" `139 
f G "sleep" 1 212 "void(int8 mode)" `138  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 1 214 "0"
d G "RESTART_BROWNOUT" 1 215 "1"
d G "RESTART_WATCHDOG" 1 216 "4"
d G "RESTART_SOFTWARE" 1 217 "6"
d G "RESTART_MCLR" 1 218 "7"
d G "RESTART_ILLEGAL_OP" 1 219 "14"
d G "RESTART_TRAP_CONFLICT" 1 220 "15"
d G "SLEEP_FULL" 1 223 "0" "Default"
d G "SLEEP_IDLE" 1 224 "1" "Clock and peripherals don't stop"
c L "sleep" 1 5 2 "FUNCTION"
v L "type" 1 228 "int8" `141 
v L "target" 1 228 "int32" `142 
f B "setup_oscillator" 1 228 "void(int8 type,int32 target)" `140 
v L "type" 1 229 "int8" `144 
v L "target" 1 229 "int32" `145 
v L "source" 1 229 "int32" `146 
f G "setup_oscillator" 1 229 "void(int8 type,int32 target,int32 source)" `143  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 1 231 "32"
d G "OSC_CRYSTAL" 1 232 "1"
d G "OSC_CLOCK" 1 233 "2"
d G "OSC_RC" 1 234 "3"
d G "OSC_SECONDARY" 1 235 "16"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 241 "int16" `148 
f B "setup_timer1" 1 241 "void(int16 mode)" `147 
v L "mode" 1 242 "int16" `150 
v L "period" 1 242 "int16" `151 
f G "setup_timer1" 1 242 "void(int16 mode,int16 period)" `149 
f B "get_timer1" 1 243 "int16()" `152 
v L "value" 1 244 "int16" `154 
f B "set_timer1" 1 244 "void(int16 value)" `153 
v L "mode" 1 245 "int16" `156 
f B "setup_timer2" 1 245 "void(int16 mode)" `155 
v L "mode" 1 246 "int16" `158 
v L "period" 1 246 "int16" `159 
f G "setup_timer2" 1 246 "void(int16 mode,int16 period)" `157 
f B "get_timer2" 1 247 "int16()" `160 
v L "value" 1 248 "int16" `162 
f B "set_timer2" 1 248 "void(int16 value)" `161 
v L "mode" 1 249 "int16" `164 
f B "setup_timer3" 1 249 "void(int16 mode)" `163 
v L "mode" 1 250 "int16" `166 
v L "period" 1 250 "int16" `167 
f G "setup_timer3" 1 250 "void(int16 mode,int16 period)" `165 
f B "get_timer3" 1 251 "int16()" `168 
v L "value" 1 252 "int16" `170 
f B "set_timer3" 1 252 "void(int16 value)" `169 
f B "get_timer23" 1 253 "int32()" `171 
v L "value" 1 254 "int32" `173 
f B "set_timer23" 1 254 "void(int32 value)" `172 
v L "mode" 1 255 "int16" `175 
f B "setup_timer4" 1 255 "void(int16 mode)" `174 
v L "mode" 1 256 "int16" `177 
v L "period" 1 256 "int16" `178 
f G "setup_timer4" 1 256 "void(int16 mode,int16 period)" `176 
f B "get_timer4" 1 257 "int16()" `179 
v L "value" 1 258 "int16" `181 
f B "set_timer4" 1 258 "void(int16 value)" `180 
v L "mode" 1 259 "int16" `183 
f B "setup_timer5" 1 259 "void(int16 mode)" `182 
v L "mode" 1 260 "int16" `185 
v L "period" 1 260 "int16" `186 
f G "setup_timer5" 1 260 "void(int16 mode,int16 period)" `184 
f B "get_timer5" 1 261 "int16()" `187 
v L "value" 1 262 "int16" `189 
f B "set_timer5" 1 262 "void(int16 value)" `188 
f B "get_timer45" 1 263 "int32()" `190 
v L "value" 1 264 "int32" `192 
f B "set_timer45" 1 264 "void(int32 value)" `191  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 1 267 "0x0000"
d G "TMR_INTERNAL" 1 268 "0x8000"
d G "TMR_EXTERNAL" 1 269 "0x8002"
d G "TMR_GATE" 1 270 "0x0040"
d G "TMR_DIV_BY_1" 1 272 "0x0000"
d G "TMR_DIV_BY_8" 1 273 "0x0010"
d G "TMR_DIV_BY_64" 1 274 "0x0020"
d G "TMR_DIV_BY_256" 1 275 "0x0030"
d G "TMR_32_BIT" 1 276 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 1 278 "0x2000"
d G "TMR_CONTINUE_IDLE" 1 279 "0x0000"
d G "T1_EXTERNAL_SYNC" 1 281 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 1 282 "0xC002" "This only applies to Timer1"
c L "set_timer45" 1 5 3 "FUNCTION"
v L "module" 1 286 "int8" `194 
v L "mode" 1 286 "int16" `195 
f B "setup_capture" 1 286 "void(int8 module,int16 mode)" `193 
v L "module" 1 287 "int8" `197 
f B "get_capture" 1 287 "int16(int8 module)" `196 
v L "module" 1 288 "int8" `199 
v L "wait" 1 288 "int8" `200 
f G "get_capture" 1 288 "int16(int8 module,int8 wait)" `198  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 1 290 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 1 291 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 1 292 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 1 293 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 1 294 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 1 295 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 1 296 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 1 299 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 1 300 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 1 301 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 1 302 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 1 305 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 1 306 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 1 309 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 1 310 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 1 5 3 "FUNCTION"
v L "module" 1 315 "int8" `202 
v L "mode" 1 315 "int16" `203 
f B "setup_compare" 1 315 "void(int8 module,int16 mode)" `201 
v L "module" 1 316 "int8" `205 
v L "duty" 1 316 "int16" `206 
f B "set_pwm_duty" 1 316 "void(int8 module,int16 duty)" `204 
v L "module" 1 317 "int8" `208 
v L "ocr" 1 317 "int16" `209 
f B "set_compare_time" 1 317 "void(int8 module,int16 ocr)" `207 
v L "module" 1 318 "int8" `211 
v L "ocr" 1 318 "int16" `212 
v L "ocrs" 1 318 "int16" `213 
f G "set_compare_time" 1 318 "void(int8 module,int16 ocr,int16 ocrs)" `210  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 1 320 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 1 321 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 1 322 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 1 323 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 1 324 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 1 325 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 1 326 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 1 327 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 1 330 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 1 331 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 1 334 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 1 335 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 1 5 3 "FUNCTION"
v L "mode" 1 340 "int16" `215 
f B "setup_spi" 1 340 "void(int16 mode)" `214 
v L "data" 1 341 "int8" `217 
f B "spi_write" 1 341 "void(int8 data)" `216 
f B "spi_read" 1 342 "int8()" `218 
v L "data" 1 343 "int8" `220 
f G "spi_read" 1 343 "int8(int8 data)" `219 
f B "spi_data_in" 1 344 "int8()" `221 
v L "mode" 1 345 "int16" `223 
f B "setup_spi2" 1 345 "void(int16 mode)" `222 
v L "data" 1 346 "int8" `225 
f B "spi_write2" 1 346 "void(int8 data)" `224 
f B "spi_read2" 1 347 "int8()" `226 
v L "data" 1 348 "int8" `228 
f G "spi_read2" 1 348 "int8(int8 data)" `227 
f B "spi_data_in2" 1 349 "int8()" `229  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 1 352 "0x0020"
d G "SPI_SLAVE" 1 353 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 1 355 "0x0040"
d G "SPI_SCK_IDLE_LOW" 1 356 "0x0000"
d G "SPI_XMIT_L_TO_H" 1 358 "0x0100"
d G "SPI_XMIT_H_TO_L" 1 359 "0x0000"
d G "SPI_MODE_16B" 1 361 "0x0400"
d G "SPI_MODE_8B" 1 362 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 364 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 1 365 "0x0000"
d G "SPI_SS_ENABLED" 1 367 "0x0000"
d G "SPI_SS_DISABLED" 1 368 "0x0080"
d G "SPI_CLK_DIV_1" 1 371 "0x001F"
d G "SPI_CLK_DIV_2" 1 372 "0x001B"
d G "SPI_CLK_DIV_3" 1 373 "0x0017"
d G "SPI_CLK_DIV_4" 1 374 "0x001E"
d G "SPI_CLK_DIV_5" 1 375 "0x000F"
d G "SPI_CLK_DIV_6" 1 376 "0x000B"
d G "SPI_CLK_DIV_7" 1 377 "0x0007"
d G "SPI_CLK_DIV_8" 1 378 "0x0003"
d G "SPI_CLK_DIV_12" 1 379 "0x0016"
d G "SPI_CLK_DIV_16" 1 380 "0x001D"
d G "SPI_CLK_DIV_20" 1 381 "0x000E"
d G "SPI_CLK_DIV_24" 1 382 "0x000A"
d G "SPI_CLK_DIV_28" 1 383 "0x0006"
d G "SPI_CLK_DIV_32" 1 384 "0x0002"
d G "SPI_CLK_DIV_48" 1 385 "0x0015"
d G "SPI_CLK_DIV_64" 1 386 "0x001C"
d G "SPI_CLK_DIV_80" 1 387 "0x000D"
d G "SPI_CLK_DIV_96" 1 388 "0x0009"
d G "SPI_CLK_DIV_112" 1 389 "0x0005"
d G "SPI_CLK_DIV_128" 1 390 "0x0001"
d G "SPI_CLK_DIV_192" 1 391 "0x0014"
d G "SPI_CLK_DIV_256" 1 392 "0x0010"
d G "SPI_CLK_DIV_320" 1 393 "0x000C"
d G "SPI_CLK_DIV_384" 1 394 "0x0008"
d G "SPI_CLK_DIV_448" 1 395 "0x0004"
d G "SPI_CLK_DIV_512" 1 396 "0x0000"
d G "SPI_L_TO_H" 1 399 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 400 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 5 4 "FUNCTION"
v L "mode" 1 406 "int32" `231 
f B "setup_adc" 1 406 "void(int32 mode)" `230 
v L "pins" 1 407 "int32" `233 
f B "setup_adc_ports" 1 407 "void(int32 pins)" `232 
v L "pins" 1 408 "int32" `235 
v L "reference" 1 408 "int16" `236 
f G "setup_adc_ports" 1 408 "void(int32 pins,int16 reference)" `234 
v L "??65535" 1 409 "int8" `238 
f B "set_adc_channel" 1 409 "void(int8 )" `237 
f B "read_adc" 1 410 "int16()" `239 
v L "mode" 1 411 "int8" `241 
f G "read_adc" 1 411 "int16(int8 mode)" `240 
f B "adc_done" 1 412 "int8()" `242  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 416 "0x10000"
d G "ADC_CLOCK" 1 417 "0x0000"
d G "ADC_CLOCK_DIV_2" 1 418 "0x0001"
d G "ADC_CLOCK_DIV_4" 1 419 "0x0003"
d G "ADC_CLOCK_DIV_8" 1 420 "0x0007"
d G "ADC_CLOCK_DIV_16" 1 421 "0x000F"
d G "ADC_CLOCK_DIV_32" 1 422 "0x001F"
d G "ADC_CLOCK_DIV_64" 1 423 "0x003F"
d G "ADC_CLOCK_INTERNAL" 1 424 "0x0080" "Internal"
d G "ADC_TAD_MUL_0" 1 428 "0x1F00"
d G "ADC_TAD_MUL_2" 1 429 "0x1D00"
d G "ADC_TAD_MUL_4" 1 430 "0x1B00"
d G "ADC_TAD_MUL_8" 1 431 "0x1700"
d G "ADC_TAD_MUL_16" 1 432 "0x0F00"
d G "ADC_TAD_MUL_31" 1 433 "0x0000"
d G "ADC_START_AND_READ" 1 436 "0x07"
d G "ADC_START_ONLY" 1 437 "0x01"
d G "ADC_READ_ONLY" 1 438 "0x06"
d G "NO_ANALOGS" 1 443 "0" "None"
d G "ALL_ANALOG" 1 444 "0xFFFFFFFF" "All"
d G "sAN0" 1 445 "0x00000001" "| B0"
d G "sAN1" 1 446 "0x00000002" "| B1"
d G "sAN2" 1 447 "0x00000004" "| B2"
d G "sAN3" 1 448 "0x00000008" "| B3"
d G "sAN4" 1 449 "0x00000010" "| B4"
d G "sAN5" 1 450 "0x00000020" "| B5"
d G "sAN6" 1 451 "0x00000040" "| B6"
d G "sAN7" 1 452 "0x00000080" "| B7"
d G "sAN8" 1 453 "0x00000100" "| B8"
d G "sAN9" 1 454 "0x00000200" "| B9"
d G "sAN10" 1 455 "0x00000400" "| B10"
d G "sAN11" 1 456 "0x00000800" "| B11"
d G "sAN12" 1 457 "0x00001000" "| B12"
d G "sAN13" 1 458 "0x00002000" "| B13"
d G "sAN14" 1 459 "0x00004000" "| B14"
d G "sAN15" 1 460 "0x00008000" "| B15"
d G "VSS_VDD" 1 463 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 1 464 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 1 465 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 1 466 "0x2000" "Range 0-VrefH"
c L "adc_done" 1 5 5 "FUNCTION"
v L "pwm" 1 473 "int8" `244 
v L "mode" 1 473 "int32" `245 
v L "timebase" 1 473 "int32" `246 
f B "setup_motor_pwm" 1 473 "void(int8 pwm,int32 mode,int32 timebase)" `243 
v L "pwm" 1 474 "int8" `248 
v L "mode" 1 474 "int32" `249 
v L "prescale" 1 474 "int8" `250 
v L "postscale" 1 474 "int8" `251 
v L "period" 1 474 "int16" `252 
f G "setup_motor_pwm" 1 474 "void(int8 pwm,int32 mode,int8 prescale,int8 postscale,int16 period)" `247 
v L "pwm" 1 475 "int8" `254 
v L "pin_pair" 1 475 "int8" `255 
v L "mode" 1 475 "int16" `256 
v L "active_deadtime" 1 475 "int8" `257 
v L "inactive_deadtime" 1 475 "int8" `258 
f B "set_motor_unit" 1 475 "void(int8 pwm,int8 pin_pair,int16 mode,int8 active_deadtime,int8 inactive_deadtime)" `253 
v L "pwm" 1 476 "int8" `260 
v L "pin_pair" 1 476 "int8" `261 
v L "duty" 1 476 "int16" `262 
f B "set_motor_pwm_duty" 1 476 "void(int8 pwm,int8 pin_pair,int16 duty)" `259 
v L "??65535" 1 477 "int8" `264 
v L "time" 1 477 "sint16" `265 
f B "set_motor_pmw_event" 1 477 "void(int8 ,sint16 time)" `263 
v L "pwm" 1 478 "int8" `267 
f B "get_motor_pwm_count" 1 478 "int16(int8 pwm)" `266  "Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):"
d G "MPWM_DISABLED" 1 480 "0"
d G "MPWM_FREE_RUN" 1 481 "0x8000"
d G "MPWM_SINGLE_PULSE" 1 482 "0x8001"
d G "MPWM_UP_DOWN" 1 483 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 1 484 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 1 486 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 1 487 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 1 488 "0x20000"
d G "MPWM_DISABLE_UPDATES" 1 489 "0x10000"
d G "MPWM_LATCH_FAULTS" 1 490 "0x100000"
d G "MPWM_INDEPENDENT" 1 493 "0x0001"
d G "MPWM_ENABLE" 1 494 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 1 495 "0x0004"
d G "MPWM_ENABLE_L" 1 496 "0x0002"
d G "MPWM_FORCE_L_0" 1 498 "0x0010"
d G "MPWM_FORCE_L_1" 1 499 "0x0050"
d G "MPWM_FORCE_H_0" 1 500 "0x0020"
d G "MPWM_FORCE_H_1" 1 501 "0x00A0"
d G "MPWM_FAULTA_LA_HA" 1 503 "0x0700"
d G "MPWM_FAULTA_LA_HI" 1 504 "0x0500"
d G "MPWM_FAULTA_LI_HA" 1 505 "0x0600"
d G "MPWM_FAULTA_LI_HI" 1 506 "0x0400"
d G "MPWM_FAULTB_LA_HA" 1 507 "0x7000"
d G "MPWM_FAULTB_LA_HI" 1 508 "0x5000"
d G "MPWM_FAULTB_LI_HA" 1 509 "0x6000"
d G "MPWM_FAULTB_LI_HI" 1 510 "0x4000"
d G "MPWM_FAULT_NO_CHANGE" 1 511 "0x0000"
c L "get_motor_pwm_count" 1 5 3 "FUNCTION"
v L "x" 1 517 "sint8" `269 
f B "abs" 1 517 "sint8(sint8 x)" `268 
v L "x" 1 518 "sint16" `271 
f G "abs" 1 518 "sint16(sint16 x)" `270 
v L "x" 1 519 "sint32" `273 
f G "abs" 1 519 "sint32(sint32 x)" `272 
v L "x" 1 520 "float" `275 
f G "abs" 1 520 "float(float x)" `274 
v L "??65535" 1 521 "int8" `277 
v L "??65535" 1 521 "int8" `278 
f B "_mul" 1 521 "int16(int8 ,int8 )" `276 
v L "??65535" 1 522 "sint8" `277 
v L "??65535" 1 522 "sint8" `281 
f G "_mul" 1 522 "sint16(sint8 ,sint8 )" `279 
v L "??65535" 1 523 "int16" `277 
v L "??65535" 1 523 "int16" `284 
f G "_mul" 1 523 "int32(int16 ,int16 )" `282 
v L "??65535" 1 524 "sint16" `277 
v L "??65535" 1 524 "sint16" `287 
f G "_mul" 1 524 "sint32(sint16 ,sint16 )" `285 
v L "x" 1 525 "?" `289 
f G "abs" 1 525 "?(? x)" `288 
v L "x" 1 526 "?" `291 
f G "abs" 1 526 "?(? x)" `290 
v L "x" 1 527 "?" `293 
f G "abs" 1 527 "?(? x)" `292 
v L "x" 1 528 "?" `295 
f G "abs" 1 528 "?(? x)" `294 
v L "??65535" 1 529 "int32" `277 
v L "??65535" 1 529 "int32" `298 
f G "_mul" 1 529 "?(int32 ,int32 )" `296 
v L "??65535" 1 530 "sint32" `277 
v L "??65535" 1 530 "sint32" `301 
f G "_mul" 1 530 "?(sint32 ,sint32 )" `299 
v L "??65535" 1 531 "?" `277 
v L "??65535" 1 531 "?" `304 
f G "_mul" 1 531 "?(? ,? )" `302 
v L "??65535" 1 532 "?" `277 
v L "??65535" 1 532 "?" `307 
f G "_mul" 1 532 "?(? ,? )" `305  "Memory Manipulation Prototypes:"
v L "dest" 1 535 "*sint8" `309 
v L "src" 1 535 "*sint8" `310 
f B "strcpy" 1 535 "void(*sint8 dest,*sint8 src)" `308 
v L "dest" 1 536 "*sint8" `312 
v L "src" 1 536 "*sint8" `313 
f B "strcopy" 1 536 "void(*sint8 dest,*sint8 src)" `311 
v L "destination" 1 537 "*int8" `315 
v L "value" 1 537 "int8" `316 
v L "num" 1 537 "int16" `317 
f B "memset" 1 537 "void(*int8 destination,int8 value,int16 num)" `314 
v L "destination" 1 538 "*int8" `319 
v L "source" 1 538 "*int8" `320 
v L "num" 1 538 "int16" `321 
f B "memcpy" 1 538 "void(*int8 destination,*int8 source,int16 num)" `318  "Data Manipulators Prototypes:"
v L "address" 1 541 "*int8" `323 
v L "bytes" 1 541 "int8" `324 
v L "value" 1 541 "int8" `325 
f B "shift_left" 1 541 "int8(*int8 address,int8 bytes,int8 value)" `322 
v L "address" 1 542 "*int8" `327 
v L "bytes" 1 542 "int8" `328 
v L "value" 1 542 "int8" `329 
f B "shift_right" 1 542 "int8(*int8 address,int8 bytes,int8 value)" `326 
v L "address" 1 543 "*int8" `331 
v L "bytes" 1 543 "int8" `332 
f B "rotate_left" 1 543 "void(*int8 address,int8 bytes)" `330 
v L "address" 1 544 "*int8" `334 
v L "bytes" 1 544 "int8" `335 
f B "rotate_right" 1 544 "void(*int8 address,int8 bytes)" `333 
v L "value" 1 545 "int8" `337 
f B "swap" 1 545 "void(int8 value)" `336 
v L "var" 1 546 "int16" `339 
v L "offset" 1 546 "int8" `340 
f B "make8" 1 546 "int8(int16 var,int8 offset)" `338 
v L "var" 1 547 "int32" `339 
v L "offset" 1 547 "int8" `343 
f G "make8" 1 547 "int8(int32 var,int8 offset)" `341 
v L "varhigh" 1 548 "int8" `345 
v L "varlow" 1 548 "int8" `346 
f B "make16" 1 548 "int16(int8 varhigh,int8 varlow)" `344 
v L "var1" 1 549 "int16" `348 
f B "make32" 1 549 "int32(int16 var1)" `347 
v L "var1" 1 550 "int16" `350 
v L "var2" 1 550 "int16" `351 
f G "make32" 1 550 "int32(int16 var1,int16 var2)" `349 
v L "var1" 1 551 "int16" `350 
v L "var2" 1 551 "int8" `354 
f G "make32" 1 551 "int32(int16 var1,int8 var2)" `352 
v L "var1" 1 552 "int16" `356 
v L "var2" 1 552 "int8" `357 
v L "var3" 1 552 "int8" `358 
f G "make32" 1 552 "int32(int16 var1,int8 var2,int8 var3)" `355 
v L "var1" 1 553 "int8" `360 
f G "make32" 1 553 "int32(int8 var1)" `359 
v L "var1" 1 554 "int8" `350 
v L "var2" 1 554 "int8" `363 
f G "make32" 1 554 "int32(int8 var1,int8 var2)" `361 
v L "var1" 1 555 "int8" `356 
v L "var2" 1 555 "int8" `357 
v L "var3" 1 555 "int8" `367 
f G "make32" 1 555 "int32(int8 var1,int8 var2,int8 var3)" `364 
v L "var1" 1 556 "int8" `369 
v L "var2" 1 556 "int8" `370 
v L "var3" 1 556 "int8" `371 
v L "var4" 1 556 "int8" `372 
f G "make32" 1 556 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `368 
v L "var1" 1 557 "int8" `350 
v L "var2" 1 557 "int16" `375 
f G "make32" 1 557 "int32(int8 var1,int16 var2)" `373 
v L "var1" 1 558 "int8" `356 
v L "var2" 1 558 "int16" `357 
v L "var3" 1 558 "int8" `379 
f G "make32" 1 558 "int32(int8 var1,int16 var2,int8 var3)" `376 
v L "var1" 1 559 "int8" `356 
v L "var2" 1 559 "int8" `357 
v L "var3" 1 559 "int16" `383 
f G "make32" 1 559 "int32(int8 var1,int8 var2,int16 var3)" `380 
v L "var" 1 560 "int8" `385 
v L "bit" 1 560 "int8" `386 
f B "bit_set" 1 560 "void(int8 var,int8 bit)" `384 
v L "var" 1 561 "int16" `385 
v L "bit" 1 561 "int8" `389 
f G "bit_set" 1 561 "void(int16 var,int8 bit)" `387 
v L "var" 1 562 "int32" `385 
v L "bit" 1 562 "int8" `392 
f G "bit_set" 1 562 "void(int32 var,int8 bit)" `390 
v L "var" 1 563 "int8" `394 
v L "bit" 1 563 "int8" `395 
f B "bit_clear" 1 563 "void(int8 var,int8 bit)" `393 
v L "var" 1 564 "int16" `394 
v L "bit" 1 564 "int8" `398 
f G "bit_clear" 1 564 "void(int16 var,int8 bit)" `396 
v L "var" 1 565 "int32" `394 
v L "bit" 1 565 "int8" `401 
f G "bit_clear" 1 565 "void(int32 var,int8 bit)" `399 
v L "var" 1 566 "int8" `403 
v L "bit" 1 566 "int8" `404 
f B "bit_test" 1 566 "int8(int8 var,int8 bit)" `402 
v L "var" 1 567 "int16" `403 
v L "bit" 1 567 "int8" `407 
f G "bit_test" 1 567 "int8(int16 var,int8 bit)" `405 
v L "var" 1 568 "int32" `403 
v L "bit" 1 568 "int8" `410 
f G "bit_test" 1 568 "int8(int32 var,int8 bit)" `408 
v L "var" 1 569 "?" `385 
v L "bit" 1 569 "int8" `413 
f G "bit_set" 1 569 "void(? var,int8 bit)" `411 
v L "var" 1 570 "?" `385 
v L "bit" 1 570 "int8" `416 
f G "bit_set" 1 570 "void(? var,int8 bit)" `414 
v L "var" 1 571 "?" `394 
v L "bit" 1 571 "int8" `419 
f G "bit_clear" 1 571 "void(? var,int8 bit)" `417 
v L "var" 1 572 "?" `394 
v L "bit" 1 572 "int8" `422 
f G "bit_clear" 1 572 "void(? var,int8 bit)" `420 
v L "var" 1 573 "?" `403 
v L "bit" 1 573 "int8" `425 
f G "bit_test" 1 573 "int8(? var,int8 bit)" `423 
v L "var" 1 574 "?" `403 
v L "bit" 1 574 "int8" `428 
f G "bit_test" 1 574 "int8(? var,int8 bit)" `426 
v L "value" 1 575 "int8" `430 
v L "var" 1 575 "int16" `431 
f B "bit_first" 1 575 "int8(int8 value,int16 var)" `429 
v L "var" 1 576 "sint16" `433 
f B "bit_last" 1 576 "int8(sint16 var)" `432 
v L "value" 1 577 "int8" `435 
v L "var" 1 577 "sint16" `436 
f G "bit_last" 1 577 "int8(int8 value,sint16 var)" `434  "#use delay() Prototypes:"
v L "count" 1 580 "int16" `438 
f B "delay_cycles" 1 580 "void(int16 count)" `437 
v L "time" 1 581 "int16" `440 
f B "delay_ms" 1 581 "void(int16 time)" `439 
v L "time" 1 582 "int16" `442 
f B "delay_us" 1 582 "void(int16 time)" `441  "#use rs232() Prototypes:"
v L "cdata" 1 585 "sint8" `444 
f B "putchar" 1 585 "void(sint8 cdata)" `443 
v L "cdata" 1 586 "sint8" `446 
v L "stream" 1 586 "int8" `447 
f G "putchar" 1 586 "void(sint8 cdata,int8 stream)" `445 
v L "string" 1 587 "*sint8" `449 
f B "puts" 1 587 "void(*sint8 string)" `448 
v L "string" 1 588 "*sint8" `451 
v L "stream" 1 588 "int8" `452 
f G "puts" 1 588 "void(*sint8 string,int8 stream)" `450 
f B "getch" 1 589 "sint8()" `453 
v L "stream" 1 590 "int8" `455 
f G "getch" 1 590 "sint8(int8 stream)" `454 
v L "string" 1 591 "*sint8" `457 
f B "gets" 1 591 "void(*sint8 string)" `456 
v L "string" 1 592 "*sint8" `459 
v L "stream" 1 592 "int8" `460 
f G "gets" 1 592 "void(*sint8 string,int8 stream)" `458 
f B "kbhit" 1 593 "int8()" `461 
v L "stream" 1 594 "int8" `463 
f G "kbhit" 1 594 "int8(int8 stream)" `462 
v L "string" 1 595 "*sint8" `465 
f B "printf" 1 595 "void(*sint8 string,*int8 _VA_LIST)" `464 
v L "stream" 1 596 "int8" `468 
v L "string" 1 596 "*sint8" `469 
f B "fprintf" 1 596 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `467 
f B "putc_send" 1 597 "void()" `471 
v L "stream" 1 598 "int8" `473 
f B "fputc_send" 1 598 "void(int8 stream)" `472 
f B "rcv_buffer_full" 1 599 "int8()" `474 
v L "stream" 1 600 "int8" `476 
f G "rcv_buffer_full" 1 600 "int8(int8 stream)" `475 
f B "rcv_buffer_bytes" 1 601 "int16()" `477 
v L "stream" 1 602 "int8" `479 
f G "rcv_buffer_bytes" 1 602 "int16(int8 stream)" `478 
f B "tx_buffer_full" 1 603 "int8()" `480 
v L "stream" 1 604 "int8" `482 
f G "tx_buffer_full" 1 604 "int8(int8 stream)" `481 
f B "tx_buffer_bytes" 1 605 "int16()" `483 
v L "stream" 1 606 "int8" `485 
f G "tx_buffer_bytes" 1 606 "int16(int8 stream)" `484  "#use i2c() Prototypes:"
f B "i2c_read" 1 609 "int8()" `486 
v L "stream" 1 610 "int8" `488 
f G "i2c_read" 1 610 "int8(int8 stream)" `487 
v L "stream" 1 611 "int8" `490 
v L "ack" 1 611 "int8" `491 
f G "i2c_read" 1 611 "int8(int8 stream,int8 ack)" `489 
v L "data" 1 612 "int8" `493 
f B "i2c_write" 1 612 "int8(int8 data)" `492 
v L "stream" 1 613 "int8" `495 
v L "data" 1 613 "int8" `496 
f G "i2c_write" 1 613 "int8(int8 stream,int8 data)" `494 
f B "i2c_start" 1 614 "void()" `497 
v L "stream" 1 615 "int8" `499 
f G "i2c_start" 1 615 "void(int8 stream)" `498 
v L "stream" 1 616 "int8" `501 
v L "restart" 1 616 "int8" `502 
f G "i2c_start" 1 616 "void(int8 stream,int8 restart)" `500 
f B "i2c_stop" 1 617 "void()" `503 
v L "stream" 1 618 "int8" `505 
f G "i2c_stop" 1 618 "void(int8 stream)" `504 
f B "i2c_isr_state" 1 619 "sint8()" `506 
v L "addr" 1 620 "int8" `508 
f B "i2c_slaveaddr" 1 620 "void(int8 addr)" `507 
v L "stream" 1 621 "int8" `510 
v L "addr" 1 621 "int8" `511 
f G "i2c_slaveaddr" 1 621 "void(int8 stream,int8 addr)" `509 
f B "i2c_poll" 1 622 "int8()" `512 
v L "stream" 1 623 "int8" `514 
f G "i2c_poll" 1 623 "int8(int8 stream)" `513 
v L "baud" 1 624 "int32" `516 
f B "i2c_init" 1 624 "void(int32 baud)" `515 
v L "stream" 1 625 "int8" `518 
v L "baud" 1 625 "int32" `519 
f G "i2c_init" 1 625 "void(int8 stream,int32 baud)" `517  "#use spi() Prototypes:"
f B "spi_xfer" 1 628 "int8()" `520 
f G "spi_xfer" 1 629 "int16()" `521 
f G "spi_xfer" 1 630 "int32()" `522 
v L "data" 1 631 "int8" `524 
f G "spi_xfer" 1 631 "int8(int8 data)" `523 
v L "data" 1 632 "int16" `526 
f G "spi_xfer" 1 632 "int16(int16 data)" `525 
v L "data" 1 633 "int32" `528 
f G "spi_xfer" 1 633 "int32(int32 data)" `527 
v L "stream" 1 634 "int8" `530 
v L "data" 1 634 "int8" `531 
f G "spi_xfer" 1 634 "int8(int8 stream,int8 data)" `529 
v L "stream" 1 635 "int8" `530 
v L "data" 1 635 "int16" `534 
f G "spi_xfer" 1 635 "int16(int8 stream,int16 data)" `532 
v L "stream" 1 636 "int8" `530 
v L "data" 1 636 "int32" `537 
f G "spi_xfer" 1 636 "int32(int8 stream,int32 data)" `535 
v L "stream" 1 637 "int8" `539 
v L "data" 1 637 "int8" `540 
v L "bits" 1 637 "int8" `541 
f G "spi_xfer" 1 637 "int8(int8 stream,int8 data,int8 bits)" `538 
v L "stream" 1 638 "int8" `539 
v L "data" 1 638 "int16" `540 
v L "bits" 1 638 "int8" `545 
f G "spi_xfer" 1 638 "int16(int8 stream,int16 data,int8 bits)" `542 
v L "stream" 1 639 "int8" `539 
v L "data" 1 639 "int32" `540 
v L "bits" 1 639 "int8" `549 
f G "spi_xfer" 1 639 "int32(int8 stream,int32 data,int8 bits)" `546 
v L "baud" 1 640 "int32" `551 
f B "spi_init" 1 640 "void(int32 baud)" `550 
v L "stream" 1 641 "int8" `553 
v L "baud" 1 641 "int32" `554 
f G "spi_init" 1 641 "void(int8 stream,int32 baud)" `552 
v L "baud" 1 642 "int32" `556 
f B "spi_speed" 1 642 "void(int32 baud)" `555 
v L "stream" 1 643 "int8" `558 
v L "baud" 1 643 "int32" `559 
f G "spi_speed" 1 643 "void(int8 stream,int32 baud)" `557 
v L "stream" 1 644 "int8" `561 
v L "baud" 1 644 "int32" `562 
v L "clock" 1 644 "int32" `563 
f G "spi_speed" 1 644 "void(int8 stream,int32 baud,int32 clock)" `560 
v L "data" 1 645 "int8" `565 
f B "spi_prewrite" 1 645 "void(int8 data)" `564 
v L "data" 1 646 "int16" `567 
f G "spi_prewrite" 1 646 "void(int16 data)" `566 
v L "data" 1 647 "int32" `569 
f G "spi_prewrite" 1 647 "void(int32 data)" `568 
v L "??65535" 1 648 "int8" `571 
v L "data" 1 648 "int8" `572 
f G "spi_prewrite" 1 648 "void(int8 ,int8 data)" `570 
v L "??65535" 1 649 "int8" `571 
v L "data" 1 649 "int16" `575 
f G "spi_prewrite" 1 649 "void(int8 ,int16 data)" `573 
v L "??65535" 1 650 "int8" `571 
v L "data" 1 650 "int32" `578 
f G "spi_prewrite" 1 650 "void(int8 ,int32 data)" `576 
f B "spi_xfer_in" 1 651 "int8()" `579 
f G "spi_xfer_in" 1 652 "int16()" `580 
f G "spi_xfer_in" 1 653 "int32()" `581 
v L "bits" 1 654 "int8" `583 
f G "spi_xfer_in" 1 654 "int8(int8 bits)" `582 
v L "bits" 1 655 "int8" `585 
f G "spi_xfer_in" 1 655 "int16(int8 bits)" `584 
v L "bits" 1 656 "int8" `587 
f G "spi_xfer_in" 1 656 "int32(int8 bits)" `586 
v L "stream" 1 657 "int8" `589 
v L "bits" 1 657 "int8" `590 
f G "spi_xfer_in" 1 657 "int8(int8 stream,int8 bits)" `588 
v L "stream" 1 658 "int8" `589 
v L "bits" 1 658 "int8" `593 
f G "spi_xfer_in" 1 658 "int16(int8 stream,int8 bits)" `591 
v L "stream" 1 659 "int8" `589 
v L "bits" 1 659 "int8" `596 
f G "spi_xfer_in" 1 659 "int32(int8 stream,int8 bits)" `594  "#use rtos() Prototypes:"
f B "rtos_run" 1 662 "void()" `597 
f B "rtos_yield" 1 663 "void()" `598 
v L "task" 1 664 "int8" `600 
f B "rtos_enable" 1 664 "void(int8 task)" `599 
v L "task" 1 665 "int8" `602 
f B "rtos_disable" 1 665 "void(int8 task)" `601 
f B "rtos_terminate" 1 666 "void()" `603 
v L "flag" 1 667 "int8" `605 
f B "rtos_await" 1 667 "void(int8 flag)" `604 
v L "sem" 1 668 "int8" `607 
f B "rtos_wait" 1 668 "void(int8 sem)" `606 
v L "sem" 1 669 "int8" `609 
f B "rtos_signal" 1 669 "void(int8 sem)" `608 
v L "task" 1 670 "int8" `611 
v L "msg" 1 670 "int8" `612 
f B "rtos_msg_send" 1 670 "void(int8 task,int8 msg)" `610 
f B "rtos_msg_read" 1 671 "int8()" `613 
f B "rtos_msg_poll" 1 672 "int8()" `614 
v L "task" 1 673 "int8" `616 
f B "rtos_overrun" 1 673 "int8(int8 task)" `615 
v L "task" 1 674 "int8" `618 
v L "stat" 1 674 "*int8" `619 
f B "rtos_stats" 1 674 "void(int8 task,*int8 stat)" `617  "#use timer() Prototypes:"
f B "get_ticks" 1 677 "int8()" `620 
f G "get_ticks" 1 678 "int16()" `621 
f G "get_ticks" 1 679 "int32()" `622 
f G "get_ticks" 1 680 "?()" `623 
v L "stream" 1 681 "int8" `625 
f G "get_ticks" 1 681 "int8(int8 stream)" `624 
v L "stream" 1 682 "int8" `627 
f G "get_ticks" 1 682 "int16(int8 stream)" `626 
v L "stream" 1 683 "int8" `629 
f G "get_ticks" 1 683 "int32(int8 stream)" `628 
v L "stream" 1 684 "int8" `631 
f G "get_ticks" 1 684 "?(int8 stream)" `630 
v L "value" 1 685 "int8" `633 
f B "set_ticks" 1 685 "void(int8 value)" `632 
v L "value" 1 686 "int16" `635 
f G "set_ticks" 1 686 "void(int16 value)" `634 
v L "value" 1 687 "int32" `637 
f G "set_ticks" 1 687 "void(int32 value)" `636 
v L "value" 1 688 "?" `639 
f G "set_ticks" 1 688 "void(? value)" `638 
v L "stream" 1 689 "int8" `641 
v L "value" 1 689 "int8" `642 
f G "set_ticks" 1 689 "void(int8 stream,int8 value)" `640 
v L "stream" 1 690 "int8" `641 
v L "value" 1 690 "int16" `645 
f G "set_ticks" 1 690 "void(int8 stream,int16 value)" `643 
v L "stream" 1 691 "int8" `641 
v L "value" 1 691 "int32" `648 
f G "set_ticks" 1 691 "void(int8 stream,int32 value)" `646 
v L "stream" 1 692 "int8" `641 
v L "value" 1 692 "?" `651 
f G "set_ticks" 1 692 "void(int8 stream,? value)" `649  "#use pwm() Prototypes:"
f B "pwm_on" 1 695 "void()" `652 
v L "stream" 1 696 "int8" `654 
f G "pwm_on" 1 696 "void(int8 stream)" `653 
f B "pwm_off" 1 697 "void()" `655 
v L "stream" 1 698 "int8" `657 
f G "pwm_off" 1 698 "void(int8 stream)" `656 
v L "duty" 1 699 "int16" `659 
f B "pwm_set_duty" 1 699 "void(int16 duty)" `658 
v L "stream" 1 700 "int8" `661 
v L "duty" 1 700 "int16" `662 
f G "pwm_set_duty" 1 700 "void(int8 stream,int16 duty)" `660 
v L "percent" 1 701 "int16" `664 
f B "pwm_set_duty_percent" 1 701 "void(int16 percent)" `663 
v L "stream" 1 702 "int8" `666 
v L "percent" 1 702 "int16" `667 
f G "pwm_set_duty_percent" 1 702 "void(int8 stream,int16 percent)" `665 
v L "frequency" 1 703 "int32" `669 
f B "pwm_set_frequency" 1 703 "void(int32 frequency)" `668 
v L "stream" 1 704 "int8" `671 
v L "frequency" 1 704 "int32" `672 
f G "pwm_set_frequency" 1 704 "void(int8 stream,int32 frequency)" `670  "#use capture() Prototypes:"
f B "get_capture_time" 1 707 "int16()" `673 
v L "stream" 1 708 "int8" `675 
f G "get_capture_time" 1 708 "int16(int8 stream)" `674 
f B "get_capture_event" 1 709 "int8()" `676 
v L "stream" 1 710 "int8" `678 
f G "get_capture_event" 1 710 "int8(int8 stream)" `677  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 719 "int32" `680 
f B "goto_address" 1 719 "void(int32 address)" `679 
v L "label" 1 720 "int32" `682 
f B "label_address" 1 720 "int32(int32 label)" `681  "Program Memory Prototypes:"
v L "address" 1 723 "int32" `684 
v L "dataptr" 1 723 "*int8" `685 
v L "count" 1 723 "int16" `686 
f B "read_program_memory" 1 723 "void(int32 address,*int8 dataptr,int16 count)" `683 
v L "address" 1 724 "int32" `688 
f B "erase_program_memory" 1 724 "void(int32 address)" `687 
v L "address" 1 725 "int32" `690 
v L "dataptr" 1 725 "*int8" `691 
v L "count" 1 725 "int16" `692 
f B "write_program_memory" 1 725 "void(int32 address,*int8 dataptr,int16 count)" `689 
v L "dataptr" 1 726 "*int8" `694 
v L "count" 1 726 "int8" `695 
f B "read_configuration_memory" 1 726 "void(*int8 dataptr,int8 count)" `693 
v L "dataptr" 1 727 "*int8" `697 
v L "count" 1 727 "int8" `698 
f B "write_configuration_memory" 1 727 "void(*int8 dataptr,int8 count)" `696  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 732 "int16" `699 
v L "address" 1 737 "__EEADDRESS__" `701 
f B "read_eeprom" 1 737 "int16(__EEADDRESS__ address)" `700 
v L "address" 1 738 "__EEADDRESS__" `703 
v L "bytes" 1 738 "int8" `704 
f G "read_eeprom" 1 738 "int16(__EEADDRESS__ address,int8 bytes)" `702 
v L "address" 1 739 "__EEADDRESS__" `706 
v L "dataptr" 1 739 "*int8" `707 
v L "bytes" 1 739 "int16" `708 
f G "read_eeprom" 1 739 "void(__EEADDRESS__ address,*int8 dataptr,int16 bytes)" `705 
v L "address" 1 740 "__EEADDRESS__" `710 
v L "value" 1 740 "int16" `711 
f B "write_eeprom" 1 740 "void(__EEADDRESS__ address,int16 value)" `709 
v L "address" 1 741 "__EEADDRESS__" `713 
v L "dataptr" 1 741 "*int8" `714 
v L "bytes" 1 741 "int16" `715 
f G "write_eeprom" 1 741 "void(__EEADDRESS__ address,*int8 dataptr,int16 bytes)" `712  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 748 "int16" `717 
f B "enable_interrupts" 1 748 "void(int16 interrupt)" `716 
v L "interrupt" 1 749 "int16" `719 
f B "disable_interrupts" 1 749 "void(int16 interrupt)" `718 
v L "interrupt" 1 750 "int16" `721 
f B "clear_interrupt" 1 750 "void(int16 interrupt)" `720 
v L "interrupt" 1 751 "int16" `723 
f B "interrupt_adctive" 1 751 "int8(int16 interrupt)" `722 
v L "source" 1 752 "int8" `725 
v L "edge" 1 752 "int8" `726 
f B "ext_int_edge" 1 752 "void(int8 source,int8 edge)" `724 
v L "address" 1 753 "int16" `728 
f B "jump_to_isr" 1 753 "void(int16 address)" `727  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 755 "0x40"
d G "H_TO_L" 1 756 "0"
d G "INTR_GLOBAL" 1 759 "0x400"
d G "GLOBAL" 1 760 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 1 761 "0x100"
d G "INTR_ALTERNATE" 1 762 "0x200"
d G "INTR_LEVEL0" 1 763 "0x500"
d G "INTR_LEVEL1" 1 764 "0x501"
d G "INTR_LEVEL2" 1 765 "0x502"
d G "INTR_LEVEL3" 1 766 "0x503"
d G "INTR_LEVEL4" 1 767 "0x504"
d G "INTR_LEVEL5" 1 768 "0x505"
d G "INTR_LEVEL6" 1 769 "0x506"
d G "INTR_LEVEL7" 1 770 "0x507"
d G "INTR_CN_PIN" 1 772 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 1 774 "1"
d G "INT_ADDRERR" 1 775 "2"
d G "INT_STACKERR" 1 776 "3"
d G "INT_MATHERR" 1 777 "4"
d G "INT_DMAERR" 1 778 "5"
d G "INT_EXT0" 1 779 "6"
d G "INT_IC1" 1 780 "7"
d G "INT_OC1" 1 781 "8"
d G "INT_TIMER1" 1 782 "9"
d G "INT_IC2" 1 783 "10"
d G "INT_OC2" 1 784 "11"
d G "INT_TIMER2" 1 785 "12"
d G "INT_TIMER3" 1 786 "13"
d G "INT_SPI1" 1 787 "14"
d G "INT_RDA" 1 788 "15"
d G "INT_TBE" 1 789 "16"
d G "INT_ADC1" 1 790 "17"
d G "INT_EEPROM" 1 791 "18"
d G "INT_SI2C" 1 792 "19"
d G "INT_MI2C" 1 793 "20"
d G "INT_CNI" 1 794 "21"
d G "INT_EXT1" 1 795 "22"
d G "INT_IC7" 1 796 "24"
d G "INT_IC8" 1 797 "25"
d G "INT_OC3" 1 798 "27"
d G "INT_OC4" 1 799 "29"
d G "INT_TIMER4" 1 800 "31"
d G "INT_TIMER5" 1 801 "33"
d G "INT_EXT2" 1 802 "35"
d G "INT_RDA2" 1 803 "36"
d G "INT_TBE2" 1 804 "37"
d G "INT_SPI2" 1 805 "38"
d G "INT_CAN1" 1 806 "39"
d G "INT_IC3" 1 807 "41"
d G "INT_IC4" 1 808 "42"
d G "INT_IC5" 1 809 "44"
d G "INT_IC6" 1 810 "46"
d G "INT_OC5" 1 811 "48"
d G "INT_OC6" 1 812 "50"
d G "INT_OC7" 1 813 "51"
d G "INT_OC8" 1 814 "52"
d G "INT_EXT3" 1 815 "53"
d G "INT_EX4" 1 816 "54"
d G "INT_CAN2" 1 817 "56"
d G "INT_PWM1" 1 818 "58"
d G "INT_QEI" 1 819 "60"
d G "INT_FAULTA" 1 820 "66"
d G "INT_FAULTB" 1 821 "68"
D G "MATH_H" 2 30 ""
D G "PI" 2 35 "3.1415926535897932"
D G "SQRT2" 2 38 "1.4142135623730950"
C L "jump_to_isr" 2 2 3 "FUNCTION"
V L "x" 2 45 "float" `730 
V L "n" 2 45 "int8" `731 
F G "CEIL_FLOOR" 2 46 "float(float x,int8 n)" `729 
V L "y" 2 47 "float" `732 
V L "res" 2 47 "float" `733 
V L "l" 2 48 "int16" `734 
V L "s" 2 49 "int1" `735 
C L "CEIL_FLOOR" 2 2 2 "FUNCTION"
V L "x" 2 96 "?" `750 
V L "n" 2 96 "int8" `751 
F G "CEIL_FLOOR" 2 97 "?(? x,int8 n)" `749 
V L "y" 2 98 "?" `752 
V L "res" 2 98 "?" `753 
V L "l" 2 99 "int32" `754 
V L "s" 2 100 "int1" `755 
C L "CEIL_FLOOR" 2 2 1 "FUNCTION"
V L "x" 2 149 "?" `770 
V L "n" 2 149 "int8" `771 
F G "CEIL_FLOOR" 2 150 "?(? x,int8 n)" `769 
V L "y" 2 151 "?" `772 
V L "res" 2 151 "?" `773 
V L "l" 2 152 "?" `774 
V L "s" 2 153 "int1" `775 
C L "floor" 2 2 3 "FUNCTION"
V L "x" 2 207 "float" `794 
F G "floor" 2 208 "float(float x)" `793 
C L "floor" 2 2 2 "FUNCTION"
V L "x" 2 214 "?" `796 
F G "floor" 2 215 "?(? x)" `795 
C L "floor" 2 2 1 "FUNCTION"
V L "x" 2 220 "?" `798 
F G "floor" 2 221 "?(? x)" `797 
C L "ceil" 2 2 3 "FUNCTION"
V L "x" 2 233 "float" `800 
F G "ceil" 2 234 "float(float x)" `799 
C L "ceil" 2 2 2 "FUNCTION"
V L "x" 2 240 "?" `802 
F G "ceil" 2 241 "?(? x)" `801 
C L "ceil" 2 2 1 "FUNCTION"
V L "x" 2 246 "?" `804 
F G "ceil" 2 247 "?(? x)" `803 
D G "fabs" 2 259 "abs"
C L "fmod" 2 2 6 "FUNCTION"
V L "x" 2 271 "float" `806 
V L "y" 2 271 "float" `807 
F G "fmod" 2 272 "float(float x,float y)" `805 
V L "i" 2 273 "float" `808 
C L "fmod" 2 2 2 "FUNCTION"
V L "x" 2 291 "?" `813 
V L "y" 2 291 "?" `814 
F G "fmod" 2 292 "?(? x,? y)" `812 
V L "i" 2 293 "?" `815 
C L "fmod" 2 2 1 "FUNCTION"
V L "x" 2 309 "?" `820 
V L "y" 2 309 "?" `821 
F G "fmod" 2 310 "?(? x,? y)" `819 
V L "i" 2 311 "?" `822 
D G "LN2" 2 334 "0.6931471805599453"
D G "LN2_INV" 2 335 "1.4426950408889634073"
V G "pe" 2 337 "[6]" `826 
V L "x" 2 341 "float" `830 
F G "exp" 2 342 "float(float x)" `829 
V L "y" 2 343 "float" `831 
V L "res" 2 343 "float" `832 
V L "r" 2 343 "float" `833 
V L "data1" 2 345 "sint8" `834 
V L "n" 2 347 "sint8" `835 
V L "s" 2 348 "int1" `836 
C L "exp" 2 2 1 "FUNCTION"
C L "exp" 2 2 2 "FUNCTION"
V L "x" 2 400 "?" `840 
F G "exp" 2 401 "?(? x)" `839 
V L "y" 2 402 "?" `841 
V L "res" 2 402 "?" `842 
V L "r" 2 402 "?" `843 
V L "data1" 2 403 "sint8" `844 
V L "n" 2 404 "sint8" `845 
V L "s" 2 405 "int1" `846 
V G "pe_64" 2 449 "[12]" `849 
V L "x" 2 456 "?" `853 
F G "exp" 2 457 "?(? x)" `852 
V L "y" 2 458 "?" `854 
V L "res" 2 458 "?" `855 
V L "r" 2 458 "?" `856 
V L "data1" 2 459 "int16" `857 
V L "data2" 2 459 "int16" `858 
V L "p" 2 460 "*int16" `859 
V L "n" 2 461 "sint16" `860 
V L "s" 2 462 "int1" `861 
V G "pl" 2 525 "[4]" `862 
V G "ql" 2 526 "[4]" `865 
C L "log" 2 2 3 "FUNCTION"
V L "x" 2 534 "float" `869 
F G "log" 2 535 "float(float x)" `868 
V L "y" 2 536 "float" `870 
V L "res" 2 536 "float" `871 
V L "r" 2 536 "float" `872 
V L "y2" 2 536 "float" `873 
V L "data1" 2 538 "int8" `874 
V L "data2" 2 538 "int8" `875 
V L "n" 2 540 "sint8" `876 
C L "log" 2 2 1 "FUNCTION"
V G "pl_64" 2 610 "[4]" `877 
V G "ql_64" 2 613 "[4]" `880 
V L "x" 2 616 "?" `884 
F G "log" 2 617 "?(? x)" `883 
V L "y" 2 618 "?" `885 
V L "res" 2 618 "?" `886 
V L "r" 2 618 "?" `887 
V L "y2" 2 618 "?" `888 
V L "data1" 2 619 "int8" `889 
V L "data2" 2 619 "int8" `890 
V L "n" 2 620 "sint8" `891 
V L "x" 2 684 "?" `893 
F G "log" 2 685 "?(? x)" `892 
V L "y" 2 686 "?" `894 
V L "res" 2 686 "?" `895 
V L "r" 2 686 "?" `896 
V L "y2" 2 686 "?" `897 
V L "data1" 2 687 "int16" `898 
V L "data2" 2 687 "int16" `899 
V L "p" 2 688 "*int16" `900 
V L "n" 2 689 "sint16" `901 
D G "LN10" 2 758 "2.3025850929940456"
D G "LN10_INV" 2 759 "0.4342944819032518276"
C L "log10" 2 2 3 "FUNCTION"
V L "x" 2 767 "float" `903 
F G "log10" 2 768 "float(float x)" `902 
V L "r" 2 769 "float" `904 
C L "log10" 2 2 2 "FUNCTION"
V L "x" 2 779 "?" `906 
F G "log10" 2 780 "?(? x)" `905 
V L "r" 2 781 "?" `907 
C L "log10" 2 2 1 "FUNCTION"
V L "x" 2 789 "?" `909 
F G "log10" 2 790 "?(? x)" `908 
V L "r" 2 791 "?" `910 
C L "modf" 2 2 6 "FUNCTION"
V L "value" 2 808 "float" `912 
V L "iptr" 2 808 "*float" `913 
F G "modf" 2 809 "float(float value,*float iptr)" `911 
C L "modf" 2 2 2 "FUNCTION"
V L "value" 2 816 "?" `915 
V L "iptr" 2 816 "?" `916 
F G "modf" 2 817 "?(? value,? iptr)" `914 
C L "modf" 2 2 1 "FUNCTION"
V L "value" 2 822 "?" `918 
V L "iptr" 2 822 "?" `919 
F G "modf" 2 823 "?(? value,? iptr)" `917 
C L "pwr" 2 2 4 "FUNCTION"
V L "x" 2 836 "float" `921 
V L "y" 2 836 "float" `922 
F G "pwr" 2 837 "float(float x,float y)" `920 
C L "pwr" 2 2 2 "FUNCTION"
V L "x" 2 855 "?" `924 
V L "y" 2 855 "?" `925 
F G "pwr" 2 856 "?(? x,? y)" `923 
C L "pwr" 2 2 1 "FUNCTION"
V L "x" 2 872 "?" `927 
V L "y" 2 872 "?" `928 
F G "pwr" 2 873 "?(? x,? y)" `926 
C L "pow" 2 2 5 "FUNCTION"
V L "x" 2 899 "float" `930 
V L "y" 2 899 "float" `931 
F G "pow" 2 900 "float(float x,float y)" `929 
C L "pow" 2 2 2 "FUNCTION"
V L "x" 2 918 "?" `933 
V L "y" 2 918 "?" `934 
F G "pow" 2 919 "?(? x,? y)" `932 
C L "pow" 2 2 1 "FUNCTION"
V L "x" 2 936 "?" `936 
V L "y" 2 936 "?" `937 
F G "pow" 2 937 "?(? x,? y)" `935 
C L "sqrt" 2 2 3 "FUNCTION"
V L "x" 2 960 "float" `939 
F G "sqrt" 2 961 "float(float x)" `938 
V L "y" 2 962 "float" `940 
V L "res" 2 962 "float" `941 
V L "data1" 2 964 "int16" `942 
V L "data2" 2 964 "int16" `943 
V L "p" 2 966 "*int8" `944 
C L "sqrt" 2 2 2 "FUNCTION"
V L "x" 2 1032 "?" `946 
F G "sqrt" 2 1033 "?(? x)" `945 
V L "y" 2 1034 "?" `947 
V L "res" 2 1034 "?" `948 
V L "data1" 2 1035 "int16" `949 
V L "data2" 2 1035 "int16" `950 
V L "p" 2 1036 "*int8" `951 
C L "sqrt" 2 2 1 "FUNCTION"
V L "x" 2 1099 "?" `953 
F G "sqrt" 2 1100 "?(? x)" `952 
V L "y" 2 1101 "?" `954 
V L "res" 2 1101 "?" `955 
V L "p" 2 1102 "*int16" `956 
V L "temp1" 2 1103 "int16" `957 
V L "temp2" 2 1103 "int16" `958 
D G "PI_DIV_BY_TWO_INV" 2 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 2 1159 "1.5707963267948966"
D G "TWOBYPI" 2 1163 "0.6366197723675813"
C L "cos" 2 2 3 "FUNCTION"
V L "x" 2 1171 "float" `960 
F G "cos" 2 1172 "float(float x)" `959 
V L "y" 2 1173 "float" `961 
V L "t" 2 1173 "float" `962 
V L "t2" 2 1173 "float" `963 
V L "quad" 2 1174 "int8" `964 
V L "i" 2 1174 "int8" `965 
V L "frac" 2 1175 "float" `966 
V L "p" 2 1176 "float[5]" `967  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
V L "x" 2 1217 "?" `969 
F G "cos" 2 1218 "?(? x)" `968 
V L "y" 2 1219 "?" `970 
V L "t" 2 1219 "?" `971 
V L "t2" 2 1219 "?" `972 
V L "quad" 2 1220 "int8" `973 
V L "i" 2 1220 "int8" `974 
V L "frac" 2 1221 "?" `975 
V L "p" 2 1222 "?[6]" `976  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
V L "x" 2 1261 "?" `978 
F G "cos" 2 1262 "?(? x)" `977 
V L "y" 2 1263 "?" `979 
V L "t" 2 1263 "?" `980 
V L "t2" 2 1263 "?" `981 
V L "quad" 2 1264 "int8" `982 
V L "i" 2 1264 "int8" `983 
V L "frac" 2 1265 "?" `984 
V L "p_64" 2 1266 "?[9]" `985  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "sin" 2 2 3 "FUNCTION"
V L "x" 2 1312 "float" `987 
F G "sin" 2 1313 "float(float x)" `986 
C L "sin" 2 2 2 "FUNCTION"
V L "x" 2 1320 "?" `989 
F G "sin" 2 1321 "?(? x)" `988 
C L "sin" 2 2 1 "FUNCTION"
V L "x" 2 1326 "?" `991 
F G "sin" 2 1327 "?(? x)" `990 
C L "tan" 2 2 3 "FUNCTION"
V L "x" 2 1338 "float" `993 
F G "tan" 2 1339 "float(float x)" `992 
V L "c" 2 1340 "float" `994 
V L "s" 2 1340 "float" `995 
C L "tan" 2 2 2 "FUNCTION"
V L "x" 2 1352 "?" `997 
F G "tan" 2 1353 "?(? x)" `996 
V L "c" 2 1354 "?" `998 
V L "s" 2 1354 "?" `999 
C L "tan" 2 2 1 "FUNCTION"
V L "x" 2 1365 "?" `1001 
F G "tan" 2 1366 "?(? x)" `1000 
V L "c" 2 1367 "?" `1002 
V L "s" 2 1367 "?" `1003 
V G "pas" 2 1378 "[3]" `1004 
V G "qas" 2 1379 "[3]" `1007 
V L "x" 2 1381 "float" `1011 
V L "n" 2 1381 "int8" `1012 
F G "ASIN_COS" 2 1382 "float(float x,int8 n)" `1010 
V L "y" 2 1383 "float" `1013 
V L "res" 2 1383 "float" `1014 
V L "r" 2 1383 "float" `1015 
V L "y2" 2 1383 "float" `1016 
V L "s" 2 1384 "int1" `1017 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 2 "FUNCTION"
V L "x" 2 1430 "?" `1019 
V L "n" 2 1430 "int8" `1020 
F G "ASIN_COS" 2 1431 "?(? x,int8 n)" `1018 
V L "y" 2 1432 "?" `1021 
V L "res" 2 1432 "?" `1022 
V L "r" 2 1432 "?" `1023 
V L "y2" 2 1432 "?" `1024 
V L "s" 2 1433 "int1" `1025 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
V G "pas_64" 2 1476 "?[5]" `1026 
V G "qas_64" 2 1479 "?[5]" `1027 
V L "x" 2 1482 "?" `1029 
V L "n" 2 1482 "int8" `1030 
F G "ASIN_COS" 2 1483 "?(? x,int8 n)" `1028 
V L "y" 2 1484 "?" `1031 
V L "res" 2 1484 "?" `1032 
V L "r" 2 1484 "?" `1033 
V L "y2" 2 1484 "?" `1034 
V L "s" 2 1485 "int1" `1035 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "asin" 2 2 3 "FUNCTION"
V L "x" 2 1539 "float" `1037 
F G "asin" 2 1540 "float(float x)" `1036 
V L "r" 2 1541 "float" `1038 
C L "asin" 2 2 2 "FUNCTION"
V L "x" 2 1549 "?" `1040 
F G "asin" 2 1550 "?(? x)" `1039 
V L "r" 2 1551 "?" `1041 
C L "asin" 2 2 1 "FUNCTION"
V L "x" 2 1558 "?" `1043 
F G "asin" 2 1559 "?(? x)" `1042 
V L "r" 2 1560 "?" `1044 
C L "acos" 2 2 3 "FUNCTION"
V L "x" 2 1573 "float" `1046 
F G "acos" 2 1574 "float(float x)" `1045 
V L "r" 2 1575 "float" `1047 
C L "acos" 2 2 2 "FUNCTION"
V L "x" 2 1583 "?" `1049 
F G "acos" 2 1584 "?(? x)" `1048 
V L "r" 2 1585 "?" `1050 
C L "acos" 2 2 1 "FUNCTION"
V L "x" 2 1592 "?" `1052 
F G "acos" 2 1593 "?(? x)" `1051 
V L "r" 2 1594 "?" `1053 
V G "pat" 2 1601 "[4]" `1054 
V G "qat" 2 1602 "[4]" `1057 
C L "atan" 2 2 3 "FUNCTION"
V L "x" 2 1610 "float" `1061 
F G "atan" 2 1611 "float(float x)" `1060 
V L "y" 2 1612 "float" `1062 
V L "res" 2 1612 "float" `1063 
V L "r" 2 1612 "float" `1064 
V L "s" 2 1613 "int1" `1065 
V L "flag" 2 1613 "int1" `1066 
C L "atan" 2 2 1 "FUNCTION"
C L "atan" 2 2 2 "FUNCTION"
V L "x" 2 1652 "?" `1068 
F G "atan" 2 1653 "?(? x)" `1067 
V L "y" 2 1654 "?" `1069 
V L "res" 2 1654 "?" `1070 
V L "r" 2 1654 "?" `1071 
V L "s" 2 1655 "int1" `1072 
V L "flag" 2 1655 "int1" `1073 
C L "atan" 2 2 1 "FUNCTION"
V G "pat_64" 2 1692 "?[6]" `1074 
V G "qat_64" 2 1695 "?[6]" `1075 
C L "atan" 2 2 1 "FUNCTION"
V L "x" 2 1698 "?" `1077 
F G "atan" 2 1699 "?(? x)" `1076 
V L "y" 2 1700 "?" `1078 
V L "y2" 2 1700 "?" `1079 
V L "res" 2 1700 "?" `1080 
V L "r" 2 1700 "?" `1081 
V L "s" 2 1701 "int1" `1082 
V L "flag" 2 1701 "int1" `1083 
C L "atan" 2 2 1 "FUNCTION"
C L "atan2" 2 2 5 "FUNCTION"
V L "y" 2 1753 "float" `1085 
V L "x" 2 1753 "float" `1086 
F G "atan2" 2 1754 "float(float y,float x)" `1084 
V L "z" 2 1755 "float" `1087 
V L "sign" 2 1756 "int1" `1088 
V L "quad" 2 1757 "int8" `1089 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 2 "FUNCTION"
V L "y" 2 1825 "?" `1091 
V L "x" 2 1825 "?" `1092 
F G "atan2" 2 1826 "?(? y,? x)" `1090 
V L "z" 2 1827 "?" `1093 
V L "sign" 2 1828 "int1" `1094 
V L "quad" 2 1829 "int8" `1095 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
V L "y" 2 1895 "?" `1097 
V L "x" 2 1895 "?" `1098 
F G "atan2" 2 1896 "?(? y,? x)" `1096 
V L "z" 2 1897 "?" `1099 
V L "sign" 2 1898 "int1" `1100 
V L "quad" 2 1899 "int8" `1101 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "cosh" 2 2 5 "FUNCTION"
V L "x" 2 1975 "float" `1103 
F G "cosh" 2 1976 "float(float x)" `1102 
C L "cosh" 2 2 2 "FUNCTION"
V L "x" 2 1982 "?" `1105 
F G "cosh" 2 1983 "?(? x)" `1104 
C L "cosh" 2 2 1 "FUNCTION"
V L "x" 2 1988 "?" `1107 
F G "cosh" 2 1989 "?(? x)" `1106 
C L "sinh" 2 2 4 "FUNCTION"
V L "x" 2 2002 "float" `1109 
F G "sinh" 2 2003 "float(float x)" `1108 
C L "sinh" 2 2 2 "FUNCTION"
V L "x" 2 2010 "?" `1111 
F G "sinh" 2 2011 "?(? x)" `1110 
C L "sinh" 2 2 1 "FUNCTION"
V L "x" 2 2017 "?" `1113 
F G "sinh" 2 2018 "?(? x)" `1112 
C L "tanh" 2 2 4 "FUNCTION"
V L "x" 2 2032 "float" `1115 
F G "tanh" 2 2033 "float(float x)" `1114 
C L "tanh" 2 2 2 "FUNCTION"
V L "x" 2 2039 "?" `1117 
F G "tanh" 2 2040 "?(? x)" `1116 
C L "tanh" 2 2 1 "FUNCTION"
V L "x" 2 2045 "?" `1119 
F G "tanh" 2 2046 "?(? x)" `1118 
D G "LOG2" 2 2062 ".30102999566398119521"
D G "LOG2_INV" 2 2063 "3.32192809488736234787"
V L "x" 2 2064 "float" `1121 
V L "exp" 2 2064 "*sint8" `1122 
F G "frexp" 2 2065 "float(float x,*sint8 exp)" `1120 
V L "res" 2 2066 "float" `1123 
V L "sign" 2 2067 "int1" `1124 
C L "frexp" 2 2 2 "FUNCTION"
V L "x" 2 2111 "?" `1126 
V L "exp" 2 2111 "*sint8" `1127 
F G "frexp" 2 2112 "?(? x,*sint8 exp)" `1125 
V L "res" 2 2113 "?" `1128 
V L "sign" 2 2114 "int1" `1129 
C L "frexp" 2 2 1 "FUNCTION"
V L "x" 2 2156 "?" `1131 
V L "exp" 2 2156 "*sint8" `1132 
F G "frexp" 2 2157 "?(? x,*sint8 exp)" `1130 
V L "res" 2 2158 "?" `1133 
V L "sign" 2 2159 "int1" `1134 
C L "ldexp" 2 2 4 "FUNCTION"
V L "value" 2 2209 "float" `1138 
V L "exp" 2 2209 "sint8" `1139 
F G "ldexp" 2 2210 "float(float value,sint8 exp)" `1137 
C L "ldexp" 2 2 2 "FUNCTION"
V L "value" 2 2217 "?" `1141 
V L "exp" 2 2217 "sint8" `1142 
F G "ldexp" 2 2218 "?(? value,sint8 exp)" `1140 
C L "ldexp" 2 2 1 "FUNCTION"
V L "value" 2 2222 "?" `1144 
V L "exp" 2 2222 "sint8" `1145 
F G "ldexp" 2 2223 "?(? value,sint8 exp)" `1143 
D G "LED" 0 98 "PIN_B0" "Led used in debugging"
D G "LAS_1" 0 101 "PIN_G6" "Control pin of the first laser"
D G "LAS_2" 0 102 "PIN_G7" "Control pin of the second laser"
D G "LAS_3" 0 103 "PIN_G8" "Control pin of the third laser"
D G "PP_D0" 0 106 "PIN_D3" "Parallel port data pin first bit"
D G "PP_D1" 0 107 "PIN_D2" "Parallel port data pin second bit"
D G "PP_D2" 0 108 "PIN_D1" "Parallel port data pin third bit"
D G "PP_D3" 0 109 "PIN_C14" "Parallel port data pin fourth bit"
D G "PP_D4" 0 110 "PIN_C13" "Parallel port data pin fifth bit"
D G "PP_D5" 0 111 "PIN_D0" "Parallel port data pin sixth bit"
D G "PP_D6" 0 112 "PIN_D11" "Parallel port data pin seventh bit"
D G "PP_D7" 0 113 "PIN_D10" "Parallel port data pin eigth bit"
D G "PP_STR" 0 114 "PIN_D9" "Parallel port strobe pin"
D G "PP_ACK" 0 115 "PIN_D4" "Parallel port acknowledge pin used to"
D G "PP_RDY" 0 116 "PIN_D5" "Parallel port ready pin"
D G "DP_CS" 0 119 "PIN_E0" "Digital potentiometer chip select pin assignment (active low)"
D G "DP_UD" 0 120 "PIN_F1" "Digital potentiometer up/down control pin assignment"
D G "MD_MS" 0 123 "PIN_E5" "Step resolution select pin assignment"
D G "MD_RESET" 0 124 "PIN_E7" "Reset input pin assignment (active low)"
D G "MD_STEP" 0 125 "PIN_E6" "Step input pin assignment"
D G "MD_ENABLE" 0 126 "PIN_D6" "Enable input pin assignment (active low)"
D G "MD_SLEEP" 0 127 "PIN_D7" "Sleep input pin assignment (active low)"
D G "MD_DIR" 0 128 "PIN_F0" "Direction input pin assignment"
D G "MD_SW" 0 131 "PIN_G9" "Homing switch input pin assignment"
D G "MD_LIM" 0 132 "PIN_D8" "Limit switch input pin assignment"
D G "FR_CS" 0 135 "PIN_B2" "FRAM chip select pin assignment (active low)"
D G "FR_WP" 0 136 "PIN_G3" "FRAM write protection pin assignment (active low)"
D G "FR_SCK" 0 137 "PIN_F6" "FRAM serial clock pin assignment"
D G "FR_SI" 0 138 "PIN_F2" "FRAM serial input pin assignment"
D G "FR_SO" 0 139 "PIN_F3" "FRAM serial output pin assignment"
D G "HOME" 0 142 "0"
D G "ACCEL" 0 143 "1"
D G "DECEL" 0 144 "2"
D G "RUN" 0 145 "3"
D G "POS" 0 146 "4"
D G "LIMIT" 0 147 "5"
D G "FREE" 0 150 "0"
D G "SINGLE" 0 151 "1"
V G "debug_mode_dp" 0 153 "int1" `1216 
V G "debug_mode_pp" 0 154 "int1" `1217 
V G "debug_mode_fr" 0 155 "int1" `1218 
V G "debug_mode_md" 0 156 "int1" `1219 
V G "debug_mode_pwm" 0 157 "int1" `1220 
V G "debug_mode_qei" 0 158 "int1" `1221 
V G "dp_tap_limit" 0 160 "int16" `1222 
V G "dp_voltage_limit" 0 161 "int16" `1223 
V G "mt_voltage_limit" 0 163 "int16" `1224 
V G "mt_percent_trip" 0 164 "int16" `1225 
V G "mt_percent_rest" 0 165 "int16" `1226 
V G "md_conv_const" 0 167 "int16" `1227 
V G "md_move_range" 0 168 "int16" `1228 
V G "md_home_pos" 0 169 "int16" `1229 
V G "md_end_pos" 0 170 "int16" `1230 
V G "md_end_offset" 0 171 "int16" `1231 
V G "md_home_offset" 0 172 "int16" `1232 
V G "md_min_distance" 0 173 "int16" `1233 
V G "md_target_count" 0 174 "int16" `1234 
V G "md_accel" 0 176 "int16" `1235 
V G "md_decel" 0 177 "int16" `1236 
V G "md_min_delay" 0 179 "int16" `1237 
V G "md_run_state" 0 180 "int8" `1238 
V G "md_decel_lim" 0 181 "int16" `1239 
V G "md_accel_lim" 0 182 "int16" `1240 
V G "md_decel_count" 0 183 "int16" `1241 
V G "md_pos_iter" 0 184 "int16" `1242 
V G "md_error" 0 185 "sint16" `1243 
V G "md_backlash" 0 186 "int16" `1244 
V G "md_cc_step" 0 188 "int16" `1245 
V G "md_cc_count" 0 189 "int16" `1246 
V G "md_lim_disp" 0 190 "int16" `1247 
V G "fr_serial_no" 0 192 "int16" `1248 
V G "fr_move_range" 0 193 "int16" `1249 
V G "fr_home_pos" 0 194 "int16" `1250 
V G "fr_end_pos" 0 195 "int16" `1251 
V G "fr_conv_const" 0 196 "int16" `1252 
V G "fr_backlash" 0 197 "int16" `1253 
V G "fr_comm_type" 0 198 "int16" `1254 
V G "fr_last_pos" 0 199 "int16" `1255 
V G "fr_pos_table" 0 200 "int16" `1256 
V G "pp_str_check" 0 202 "int16" `1257 
V G "pp_str_delay" 0 203 "int16" `1258 
V G "pp_ack_delay" 0 204 "int16" `1259 
V G "pp_rdy_delay" 0 205 "int16" `1260 
V G "reg_comm_type" 0 207 "int1" `1261 
V G "reg_pp_stop" 0 208 "int1" `1262 
V G "reg_md_home" 0 209 "int1" `1263 
V G "reg_md_home_return" 0 210 "int1" `1264 
V G "reg_rs232_message" 0 211 "int1" `1265 
V G "reg_md_cc_sample" 0 212 "int1" `1266 
V G "reg_md_limit" 0 213 "int1" `1267 
D G "ACC_15" 0 215 ""
V G "md_max_acc_lim" 0 225 "int16" `1268 
V G "delays" 0 226 "[88]" `1269 
V L "position" 0 248 "int16" `1273 
F G "move_pos" 0 248 "void(int16 position)" `1272 
F G "qei_get_count" 0 249 "int16()" `1274  "Initializes digital potentiometer"
F G "dp_init" 0 253 "void()" `1275 
C L "dp_init" 0 15 1 "FUNCTION"
C L "dp_init" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
V L "tap" 0 258 "int16" `1277 
F G "dp_up" 0 259 "void(int16 tap)" `1276 
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
V L "i" 0 268 "int16" `1278 
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_up" 0 15 1 "FUNCTION"
C L "dp_down" 0 15 1 "FUNCTION"
V L "tap" 0 282 "int16" `1280 
F G "dp_down" 0 283 "void(int16 tap)" `1279 
C L "dp_down" 0 15 1 "FUNCTION"
C L "dp_down" 0 15 1 "FUNCTION"
C L "dp_down" 0 15 1 "FUNCTION"
V L "i" 0 292 "int16" `1281 
C L "dp_down" 0 15 1 "FUNCTION"
C L "dp_down" 0 15 1 "FUNCTION"
C L "dp_down" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
V L "voltage" 0 304 "int16" `1283 
F G "dp_set" 0 305 "void(int16 voltage)" `1282 
V L "iteration_limit" 0 306 "int16" `1284 
C L "dp_set" 0 15 1 "FUNCTION"
V L "iteration" 0 307 "int16" `1285 
C L "dp_set" 0 15 1 "FUNCTION"
V L "region" 0 308 "int16" `1286 
C L "dp_set" 0 15 1 "FUNCTION"
V L "tap_desired" 0 309 "int16" `1287 
C L "dp_set" 0 15 1 "FUNCTION"
V L "voltage_current" 0 310 "int16" `1288 
C L "dp_set" 0 15 1 "FUNCTION"
V L "voltage_diff" 0 311 "int16" `1289 
C L "dp_set" 0 15 1 "FUNCTION"
V L "tap_current" 0 312 "int16" `1290  "Current tap value"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "dp_set" 0 15 1 "FUNCTION"
C L "md_mt_get" 0 15 1 "FUNCTION"
F G "md_mt_get" 0 382 "int16()" `1308 
V L "analog" 0 383 "int16" `1309 
C L "md_mt_get" 0 15 1 "FUNCTION"
V L "percent" 0 384 "int16" `1310 
C L "md_mt_get" 0 15 1 "FUNCTION"
C L "md_mt_set" 0 15 1 "FUNCTION"
V L "percent" 0 392 "int16" `1319 
F G "md_mt_set" 0 393 "int16(int16 percent)" `1318  "percent must be between 0 and 100"
V L "voltage" 0 404 "int16" `1322 
C L "md_mt_set" 0 15 1 "FUNCTION"
C L "md_mt_set" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
F G "md_init" 0 411 "void()" `1323 
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "md_init" 0 15 1 "FUNCTION"
C L "fr_init" 0 15 1 "FUNCTION"
F G "fr_init" 0 424 "void()" `1324 
C L "fr_init" 0 15 1 "FUNCTION"
C L "fr_init" 0 15 1 "FUNCTION"
C L "fr_init" 0 15 1 "FUNCTION"
C L "fr_init" 0 15 1 "FUNCTION"
C L "fr_write_byte" 0 15 1 "FUNCTION"
V L "address" 0 431 "int16" `1326 
V L "data" 0 431 "int8" `1327 
F G "fr_write_byte" 0 432 "void(int16 address,int8 data)" `1325 
V L "cmd" 0 433 "int8[4]" `1328 
V L "i" 0 434 "int8" `1329 
V L "wren" 0 435 "int8" `1330 
V L "write" 0 436 "int8" `1331 
V L "wrdi" 0 437 "int8" `1332  "76543210"
C L "fr_write_byte" 0 15 1 "FUNCTION"
C L "fr_write_byte" 0 15 1 "FUNCTION"
C L "fr_write_byte" 0 15 2 "FUNCTION"
C L "fr_read_byte" 0 15 1 "FUNCTION"
V L "address" 0 505 "int16" `1334 
F G "fr_read_byte" 0 506 "int8(int16 address)" `1333 
V L "cmd" 0 507 "int8[3]" `1335 
V L "i" 0 508 "int8" `1336 
V L "data" 0 508 "int8" `1337 
V L "read" 0 509 "int8" `1338  "76543210"
C L "fr_read_byte" 0 15 3 "FUNCTION"
C L "fr_write" 0 15 1 "FUNCTION"
V L "address" 0 550 "int16" `1340 
V L "data" 0 550 "int16" `1341 
F G "fr_write" 0 551 "void(int16 address,int16 data)" `1339 
V L "data_high" 0 552 "int8" `1342 
V L "data_low" 0 553 "int8" `1343 
C L "fr_read" 0 15 1 "FUNCTION"
V L "address" 0 563 "int16" `1345 
F G "fr_read" 0 564 "int16(int16 address)" `1344 
V L "data_buffer" 0 565 "int16" `1346 
V L "data_low" 0 566 "int16" `1347 
V L "data_high" 0 567 "int16" `1348 
C L "data_get_serial_no" 0 15 1 "FUNCTION"
F G "data_get_serial_no" 0 579 "void()" `1349 
V L "i" 0 583 "int8" `1350 
V L "input" 0 584 "int8[13]" `1351 
C L "data_get_move_range" 0 15 1 "FUNCTION"
F G "data_get_move_range" 0 596 "int16()" `1354 
V L "range" 0 597 "int16" `1355 
C L "data_get_home_pos" 0 15 1 "FUNCTION"
F G "data_get_home_pos" 0 606 "int16()" `1357 
V L "home_pos" 0 607 "int16" `1358 
C L "data_get_end_pos" 0 15 1 "FUNCTION"
F G "data_get_end_pos" 0 616 "int16()" `1360 
V L "end" 0 617 "int16" `1361 
C L "data_get_conv_const" 0 15 1 "FUNCTION"
F G "data_get_conv_const" 0 626 "int16()" `1363 
V L "conv_const" 0 627 "int16" `1364 
C L "data_get_backlash" 0 15 1 "FUNCTION"
F G "data_get_backlash" 0 639 "int16()" `1366 
V L "backlash" 0 640 "int16" `1367 
C L "data_get_comm_type" 0 15 1 "FUNCTION"
F G "data_get_comm_type" 0 649 "int8()" `1369 
V L "comm_type" 0 650 "int8" `1370 
C L "data_get_last_pos" 0 15 1 "FUNCTION"
F G "data_get_last_pos" 0 667 "int16()" `1374 
V L "position" 0 668 "int16" `1375 
C L "data_get_pos" 0 15 1 "FUNCTION"
V L "index" 0 676 "int8" `1378 
F G "data_get_pos" 0 677 "int16(int8 index)" `1377 
V L "position" 0 678 "int16" `1379 
C L "data_get_pos_table" 0 15 1 "FUNCTION"
F G "data_get_pos_table" 0 687 "void()" `1381 
V L "input" 0 690 "int16" `1382 
V L "i" 0 691 "int16" `1383 
V L "index" 0 692 "int16" `1384 
C L "data_get_sys_data" 0 15 1 "FUNCTION"
F G "data_get_sys_data" 0 712 "void()" `1386 
C L "data_get_reset_state" 0 15 1 "FUNCTION"
F G "data_get_reset_state" 0 736 "void()" `1397 
C L "data_set_serial_no" 0 15 1 "FUNCTION"
F G "data_set_serial_no" 0 794 "void()" `1438 
V L "i" 0 795 "int8" `1439 
V L "input" 0 796 "int8[13]" `1440 
C L "data_set_move_range" 0 15 1 "FUNCTION"
F G "data_set_move_range" 0 806 "void()" `1441 
V L "i" 0 807 "int8" `1442 
V L "input" 0 808 "int16[4]" `1443 
V L "range" 0 814 "int16" `1444 
C L "data_set_home_pos" 0 15 1 "FUNCTION"
F G "data_set_home_pos" 0 837 "void()" `1447 
V L "i" 0 838 "int8" `1448 
V L "input" 0 839 "int16[4]" `1449 
V L "home_pos" 0 845 "int16" `1450 
C L "data_set_end_pos" 0 15 1 "FUNCTION"
F G "data_set_end_pos" 0 858 "void()" `1452 
V L "i" 0 859 "int8" `1453 
V L "input" 0 860 "int16[5]" `1454 
V L "end" 0 866 "int16" `1455 
C L "data_set_conv_const" 0 15 1 "FUNCTION"
F G "data_set_conv_const" 0 879 "void()" `1457 
V L "cc_first_count" 0 886 "int16" `1458 
V L "conv_const" 0 891 "int16" `1459 
C L "data_set_backlash" 0 15 1 "FUNCTION"
F G "data_set_backlash" 0 902 "void()" `1463 
V L "i" 0 903 "int8" `1464 
V L "input" 0 904 "int16[2]" `1465 
V L "backlash" 0 910 "int16" `1466 
C L "data_set_comm_type" 0 15 1 "FUNCTION"
F G "data_set_comm_type" 0 917 "void()" `1467 
V L "input" 0 918 "int8" `1468 
C L "data_set_last_pos" 0 15 1 "FUNCTION"
V L "position" 0 936 "int16" `1470 
F G "data_set_last_pos" 0 937 "void(int16 position)" `1469 
C L "data_set_pos" 0 15 1 "FUNCTION"
V L "index" 0 941 "int8" `1472 
V L "position" 0 941 "int16" `1473 
F G "data_set_pos" 0 942 "void(int8 index,int16 position)" `1471 
C L "qei_init" 0 15 1 "FUNCTION"
F G "qei_init" 0 948 "void()" `1474  "Disable QEI module"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_init" 0 15 1 "FUNCTION"
C L "qei_set_count" 0 15 1 "FUNCTION"
V L "value" 0 997 "int16" `1477 
F G "qei_set_count" 0 998 "void(int16 value)" `1476 
C L "qei_set_max_count" 0 15 1 "FUNCTION"
V L "value" 0 1005 "int16" `1480 
F G "qei_set_max_count" 0 1006 "void(int16 value)" `1479 
C L "qei_get_count" 0 15 1 "FUNCTION"
F G "qei_get_count" 0 1013 "int16()" `1274 
C L "pwm_select_mode" 0 15 1 "FUNCTION"
V L "mode" 0 1016 "int16" `1483 
F G "pwm_select_mode" 0 1017 "void(int16 mode)" `1482 
C L "pwm_select_mode" 0 15 1 "FUNCTION"
C L "pwm_select_mode" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
F G "pwm_init" 0 1033 "void()" `1484  "Disable PWM module"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_init" 0 15 1 "FUNCTION"
C L "pwm_set_period" 0 15 1 "FUNCTION"
V L "period" 0 1068 "int16" `1487 
F G "pwm_set_period" 0 1069 "void(int16 period)" `1486  "PWM period"
V L "pwm_period" 0 1071 "int16" `1488  "Set the PWM period"
C L "pwm_set_period" 0 15 1 "FUNCTION"
C L "pwm_set_period" 0 15 1 "FUNCTION"
C L "pwm_set_period" 0 15 1 "FUNCTION"
C L "pwm_set_period" 0 15 1 "FUNCTION"
C L "pwm_disable" 0 15 1 "FUNCTION"
F G "pwm_disable" 0 1090 "void()" `1489  "Set duty cycle to zero"
C L "pwm_disable" 0 15 1 "FUNCTION"
C L "pwm_disable" 0 15 1 "FUNCTION"
C L "pwm_disable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
F G "pwm_enable" 0 1105 "void()" `1491  "Disable RS232 receive byte interrupt"
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
V L "reg_md_running" 0 1112 "int1" `1492 
V L "md_step_count" 0 1113 "int16" `1493 
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
V L "difference" 0 1269 "sint16" `1495 
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "pwm_enable" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
V L "count" 0 1315 "int16" `1497 
F G "move_to" 0 1316 "void(int16 count)" `1496  "Calculate the number of steps"
V L "displ" 0 1318 "int16" `1498  "Calculate the current motor step by using current encoder count"
V L "current_count" 0 1320 "int16" `1499 
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_to" 0 15 1 "FUNCTION"
C L "move_pos" 0 15 1 "FUNCTION"
V L "position" 0 1385 "int16" `1511 
F G "move_pos" 0 1386 "void(int16 position)" `1272 
V L "count" 0 1404 "int16" `1513 
C L "move_home" 0 15 1 "FUNCTION"
F G "move_home" 0 1426 "void()" `1523 
C L "move_init" 0 15 1 "FUNCTION"
F G "move_init" 0 1443 "void()" `1525 
C L "move_init" 0 15 1 "FUNCTION"
C L "move_from_limit" 0 15 1 "FUNCTION"
F G "move_from_limit" 0 1466 "void()" `1527 
V L "i" 0 1469 "sint16" `1529 
C L "move_from_limit" 0 15 1 "FUNCTION"
F G "pp_str_low_check" 0 1494 "void()" `1530 
V L "check" 0 1495 "int1" `1531 
V L "sum" 0 1496 "sint16" `1532 
V L "i" 0 1503 "int16" `1533 
F G "pp_str_high_check" 0 1518 "void()" `1534 
V L "check" 0 1519 "int1" `1535 
V L "sum" 0 1520 "sint16" `1536 
V L "i" 0 1527 "int16" `1537 
C L "pp_str_check" 0 15 1 "FUNCTION"
F G "pp_str_check" 0 1543 "void()" `1538 
C L "pp_get_byte" 0 15 1 "FUNCTION"
F G "pp_get_byte" 0 1549 "int16()" `1539 
V L "data" 0 1550 "int16" `1540 
V L "D7" 0 1551 "int16" `1541 
V L "D6" 0 1552 "int16" `1542 
V L "D5" 0 1553 "int16" `1543 
V L "D4" 0 1554 "int16" `1544 
V L "D3" 0 1555 "int16" `1545 
V L "D2" 0 1556 "int16" `1546 
V L "D1" 0 1557 "int16" `1547 
V L "D0" 0 1558 "int16" `1548 
V L "i" 0 1560 "int16" `1549 
V L "check" 0 1561 "int1" `1550 
V L "sum7" 0 1565 "sint16" `1551 
V L "sum6" 0 1566 "sint16" `1552 
V L "sum5" 0 1567 "sint16" `1553 
V L "sum4" 0 1568 "sint16" `1554 
V L "sum3" 0 1569 "sint16" `1555 
V L "sum2" 0 1570 "sint16" `1556 
V L "sum1" 0 1571 "sint16" `1557 
V L "sum0" 0 1572 "sint16" `1558 
C L "pp_get_BCD_byte" 0 15 1 "FUNCTION"
F G "pp_get_BCD_byte" 0 1659 "int16()" `1559 
V L "data" 0 1660 "int16" `1560 
V L "D7" 0 1661 "int16" `1561 
V L "D6" 0 1662 "int16" `1562 
V L "D5" 0 1663 "int16" `1563 
V L "D4" 0 1664 "int16" `1564 
V L "D3" 0 1665 "int16" `1565 
V L "D2" 0 1666 "int16" `1566 
V L "D1" 0 1667 "int16" `1567 
V L "D0" 0 1668 "int16" `1568 
V L "i" 0 1670 "int16" `1569 
V L "check" 0 1671 "int1" `1570 
V L "sum7" 0 1675 "sint16" `1571 
V L "sum6" 0 1676 "sint16" `1572 
V L "sum5" 0 1677 "sint16" `1573 
V L "sum4" 0 1678 "sint16" `1574 
V L "sum3" 0 1679 "sint16" `1575 
V L "sum2" 0 1680 "sint16" `1576 
V L "sum1" 0 1681 "sint16" `1577 
V L "sum0" 0 1682 "sint16" `1578 
V L "byte0" 0 1764 "int16" `1579 
V L "byte1" 0 1765 "int16" `1580 
C L "pp_set_pos" 0 15 1 "FUNCTION"
F G "pp_set_pos" 0 1775 "void()" `1581 
V L "index" 0 1786 "int16" `1582 
V L "pos0" 0 1798 "int16" `1583 
V L "pos1" 0 1810 "int16" `1584 
C L "pp_move_pos" 0 15 1 "FUNCTION"
V L "input" 0 1819 "int16" `1587 
F G "pp_move_pos" 0 1820 "void(int16 input)" `1586 
V L "index" 0 1821 "int16" `1588 
V L "position" 0 1822 "int16" `1589 
C L "pp_get_command" 0 15 1 "FUNCTION"
F G "pp_get_command" 0 1830 "void()" `1591 
V L "input" 0 1836 "int16" `1592 
C L "rs232_message" 0 15 1 "FUNCTION"
F G "rs232_message" 0 1874 "void()" `1598 
V L "input" 0 1875 "sint8" `1599 
V L "i" 0 1933 "int16" `1635 
V L "input_step" 0 1934 "int16[4]" `1636 
V L "step" 0 1935 "int16" `1637 
V L "k" 0 1947 "int16" `1640 
V L "input_index" 0 1948 "int16[2]" `1641 
V L "index" 0 1949 "int16" `1642 
V L "input_pos" 0 1961 "int16[2]" `1646 
V L "posi" 0 1962 "int16" `1647 
V L "r" 0 1976 "int16" `1651 
V L "input_speed" 0 1977 "int16[4]" `1652 
V L "delay" 0 1978 "int16" `1653 
V L "m" 0 1987 "int16" `1655 
V L "pos_cal" 0 1988 "int16" `1656 
V L "num" 0 1989 "int16" `1657 
V L "p" 0 2006 "int16" `1659 
V L "l" 0 2015 "int16" `1661 
V L "pos_cal_2" 0 2016 "int16" `1662 
V L "num_2" 0 2017 "int16" `1663 
V L "value" 0 2043 "int1" `1673 
V L "f" 0 2044 "int16" `1674 
V L "input_ds" 0 2045 "sint8[2]" `1675 
V L "input_mem_test" 0 2089 "int16" `1681 
V L "mem" 0 2092 "int8" `1682 
C L "isr_md_limit" 0 15 1 "FUNCTION"
F G "isr_md_limit" 0 2134 "void()" `1686 
C L "isr_rs232_message" 0 15 1 "FUNCTION"
F G "isr_rs232_message" 0 2140 "void()" `1687  "Receive the RS232 message"
C L "rs232_clear" 0 15 1 "FUNCTION"
F G "rs232_clear" 0 2146 "void()" `1688 
C L "MAIN" 0 15 1 "FUNCTION"
F G "MAIN" 0 2154 "void()" `1689  "Set I/O states of the ports"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 2 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
V L "i" 0 2243 "int16" `1697 
V L "sum" 0 2244 "sint16" `1698 
C L "MAIN" 0 15 2 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_eeprom" 1 3
F B "write_eeprom" 2 3
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 0
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
