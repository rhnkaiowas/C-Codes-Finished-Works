CCS PCM C Compiler, Version 4.108, 15145               25-Haz-14 09:55

               Filename: E:\File Server\Modesis\Proje Dosyalarý\SMD - Adým Motor Sürücü\Software\3 eksen örnek\3 Eksen (SMD V1.1)(Beta)\3 Eksen (SMD V1.1).lst

               ROM used: 438 words (21%)
                         Largest free fragment is 1610
               RAM used: 7 (2%) at main() level
                         35 (10%) worst case
               Stack:    2 locations

*
0000:  MOVLP  00
0001:  GOTO   18F
0002:  NOP
.................... #INCLUDE <16f1826.h>  
.................... //////// Standard Header file for the PIC16F1826 device //////////////// 
.................... #device PIC16F1826 
.................... #list 
....................  
....................  
.................... #FUSES INTRC_IO      // Internal RC clock (OSC1 and OSC2 pins are normal I/O) 
.................... #FUSES NOWDT         // Watch Dog Timer disabled 
.................... #FUSES PUT           // Power Up Timer enabled 
.................... #FUSES NOMCLR        // Master Clear pin is used for I/O 
.................... #FUSES PROTECT       // Code protected from reads 
.................... #FUSES CPD           // Data EEPROM code protected 
.................... #FUSES BROWNOUT      // Brownout Reset enabled 
.................... #FUSES BORV25        // Brownout Reset at 2.5V 
.................... #FUSES NOCLKOUT      // Disable clock output on OSC2 
.................... #FUSES NOIESO        // Internal External Switch Over Mode disabled 
.................... #FUSES NOFCMEN       // Fail-safe clock monitor disabled 
.................... #FUSES WRT           // Program memory write protected                                               
.................... #FUSES NOLVP         // Low Voltage Programming disabled 
....................  
.................... #USE   DELAY(internal = 32MHz) 
*
002B:  MOVLW  20
002C:  MOVWF  05
002D:  MOVLW  13
002E:  MOVWF  04
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   03F
0032:  MOVLW  0A
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  5F
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 00,F
003E:  GOTO   032
003F:  RETURN
.................... #USE   RS232(baud=38400,XMIT=PIN_B5,RCV=PIN_B2,parity=N,bits=8,stop=1) 
*
0169:  MOVLB  01
016A:  BCF    0D.1
016B:  MOVLB  02
016C:  BCF    0D.1
016D:  MOVLW  08
016E:  MOVWF  78
016F:  GOTO   170
0170:  NOP
0171:  BSF    78.7
0172:  GOTO   183
0173:  BCF    78.7
0174:  MOVLB  00
0175:  RRF    23,F
0176:  MOVLB  02
0177:  BTFSC  03.0
0178:  BSF    0D.1
0179:  BTFSS  03.0
017A:  BCF    0D.1
017B:  BSF    78.6
017C:  GOTO   183
017D:  BCF    78.6
017E:  DECFSZ 78,F
017F:  GOTO   174
0180:  GOTO   181
0181:  NOP
0182:  BSF    0D.1
0183:  MOVLW  3E
0184:  MOVWF  04
0185:  DECFSZ 04,F
0186:  GOTO   185
0187:  GOTO   188
0188:  BTFSC  78.7
0189:  GOTO   173
018A:  BTFSC  78.6
018B:  GOTO   17D
018C:  MOVLP  00
018D:  MOVLB  00
018E:  GOTO   1B5 (RETURN)
....................  
.................... #DEFINE DRV_STEP     PIN_A0                  // Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.) 
.................... #DEFINE DRV_RESET    PIN_A1                  // Sleep output pin to driver (Logic high to enable device) 
.................... #DEFINE LIMIT_SWITCH PIN_A2                  // Limit Switches input pin(normal 0V, while trigged 5V) 
.................... #DEFINE USER_DIR     PIN_A3                  // Direction input pin from user 
.................... #DEFINE DRV_DIR      PIN_A4                  // Direction output pin to driver (Logic level, sets the direction of stepping) 
....................  
.................... #DEFINE SPI_SDO      PIN_A6                  // SPI data output pin 
.................... #DEFINE SPI_CS       PIN_A7                  // Step output pin to driver (Rising edge causes the indexer to move one step) 
....................  
.................... #DEFINE USER_STEP    PIN_B0                  // Step input pin from user 
.................... #DEFINE SPI_SDI      PIN_B1                  // SPI data input pin 
....................  
.................... #DEFINE USER_ENABLE  PIN_B3                  // Enable input pin from user 
.................... #DEFINE SPI_SCK      PIN_B4                  // SPI clock output pin 
....................  
.................... #DEFINE DRV_STALL    PIN_B6                  // Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut) 
.................... #DEFINE DRV_FAULT    PIN_B7                  // Fault input pin from driver (Logic low when in fault condition. Pull up mevcut) 
....................  
....................  
....................  
.................... // Interrupt On Change Registers 
.................... #WORD IOC_INTCON     =0x00B 
.................... #WORD IOC_IOCBP      =0x394 
.................... #WORD IOC_IOCBN      =0x395 
.................... #WORD IOC_IOCBF      =0x396 
.................... #WORD ANSELB         =0x18d 
....................  
.................... //Bits of IOC_INTCON register 
.................... #BIT IOC_GIE           = IOC_INTCON.7        //General interrupt enable bit 
.................... #BIT IOC_PEIE          = IOC_INTCON.6        //Peripheral interrupt enable bit 
.................... #BIT IOC_IOCIE         = IOC_INTCON.3        //Interrupt on change enable bit 
....................  
.................... //Bits of IOC_IOCBP register 
.................... #BIT IOC_PINB3_RISING            = IOC_IOCBP.3        //Pin B3 interrupt on change enable bit(Rising Edge) 
....................  
.................... //Bits of IOC_IOCBN register 
.................... #BIT IOC_PINB3_FALLING           = IOC_IOCBN.3        //Pin B3 interrupt on change enable bit(Falling Edge) 
....................  
.................... //Bits of IOC_IOCBF register 
.................... #BIT IOC_PINB3_FLAG              = IOC_IOCBF.3        //Pin B3 interrupt on change interrupt flag bit(Both Rising and Falling Edges) 
.................... //Bits of ANSELB register 
....................  
.................... #BIT ANSELB_PINB3                = ANSELB.3           //Selection of Pin B3 as a Digial I/O (0) or an Analog input (1) selection bit 
....................  
.................... // SPI Registers 
.................... #WORD SPI_SSP1CON1   = 0x215                 // Synchronous serial port control register 
.................... #WORD SPI_SSP1STAT   = 0x214                 // Synchronous serial port status register 
.................... #WORD SPI_SSP1BUF    = 0x211                 // Synchronous serial port buffer register 
.................... #WORD SPI_PIR1       = 0x011                 // Peripheral interrupt request register 
.................... // Pin function control registers 
.................... #WORD PIN_APFCON0    = 0x11D                 // Alternate pin function control register 0 
.................... #WORD PIN_APFCON1    = 0x11E                 // Alternate pin function control register 1 
....................  
.................... // Bits of SSP1CON1 register 
.................... #BIT SPI_WRITE_FLAG     = SPI_SSP1CON1.7     // Synchronous serial port write collision detect bit 
.................... #BIT SPI_ENABLE         = SPI_SSP1CON1.5     // Synchronous serial port enable bit 
.................... #BIT SPI_CLOCK_POLARITY = SPI_SSP1CON1.4     // Synchronous serial port clock polarity select bit 
.................... #BIT SPI_MODE_3         = SPI_SSP1CON1.3     // Synchronous serial port mode select bits 
.................... #BIT SPI_MODE_2         = SPI_SSP1CON1.2    
.................... #BIT SPI_MODE_1         = SPI_SSP1CON1.1    
.................... #BIT SPI_MODE_0         = SPI_SSP1CON1.0   
....................  
.................... // Bits of SPI_SSP1STAT register 
.................... #BIT SPI_INPUT_SAMPLE   = SPI_SSP1STAT.7     // Synchronous serial port data input sample bit 
.................... #BIT SPI_CLOCK_EDGE     = SPI_SSP1STAT.6     // Synchronous serial port clock edge select bit 
.................... #BIT SPI_BUFFER_STATUS  = SPI_SSP1STAT.0     // Synchronous serial port buffer full status bit 
....................  
.................... // Bits of SPI_PIR1 register 
.................... #BIT SPI_FLAG           = SPI_PIR1.3         // Synchronous serial port interrupt flag bit 
....................  
.................... // Bits of PIN_APFCON0 register 
.................... #BIT PIN_RX_SELECT      = PIN_APFCON0.7      // RX pin selection bit 
.................... #BIT PIN_SDO_SELECT     = PIN_APFCON0.6      // SDO pin selection bit 
.................... #BIT PIN_SS_SELECT      = PIN_APFCON0.5      // SS pin selection bit  
....................  
.................... // Bits of PIN_APFCON1 register 
.................... #BIT PIN_TX_SELECT      = PIN_APFCON1.0      // TX pin selection bit 
....................  
.................... int1  dir         = 0; 
.................... int1  step        = 0; 
.................... int1 limit_old    = 0; 
.................... int8 up_lim_add   = 0; 
.................... int8 down_lim_add = 1; 
....................  
.................... // Sets alternative pin functions 
.................... void set_pins() 
.................... { 
....................    // Set RB2 as RX pin 
....................    PIN_RX_SELECT = 1; 
*
0003:  MOVLB  02
0004:  BSF    1D.7
....................    // Set RA6 as SDO pin 
....................    PIN_SDO_SELECT = 1; 
0005:  BSF    1D.6
....................    // Set RA5 as SS pin 
....................    PIN_SS_SELECT = 1; 
0006:  BSF    1D.5
....................    // Set RB5 as TX pin 
....................    PIN_TX_SELECT = 1; 
0007:  BSF    1E.0
.................... } 
0008:  MOVLP  00
0009:  MOVLB  00
000A:  GOTO   1AF (RETURN)
.................... // Sets SPI parameters 
.................... void set_SPI() 
.................... { 
....................    // Disable SPI to set registers 
....................    SPI_ENABLE = 0; 
000B:  MOVLB  04
000C:  BCF    15.5
....................    // Set idle state of the clock to low  
....................    SPI_CLOCK_POLARITY = 0; 
000D:  BCF    15.4
....................    // Set SPI mode to SPI  
....................    SPI_MODE_3 = 0;  
000E:  BCF    15.3
....................    SPI_MODE_2 = 0; 
000F:  BCF    15.2
....................    SPI_MODE_1 = 1; 
0010:  BSF    15.1
....................    SPI_MODE_0 = 0; 
0011:  BCF    15.0
....................    // Input data sampled at the middle of data output time 
....................    SPI_INPUT_SAMPLE = 0; 
0012:  BCF    14.7
....................    // Transmit occurs on transition from active to idle clock state 
....................    SPI_CLOCK_EDGE = 1; 
0013:  BSF    14.6
....................  
....................    // Enable SPI 
....................    SPI_ENABLE = 1; 
0014:  BSF    15.5
.................... } 
0015:  MOVLP  00
0016:  MOVLB  00
0017:  GOTO   1B0 (RETURN)
.................... // Sets variables to default values  
.................... void set_variables() 
.................... { 
....................    output_low(SPI_CS);     // Chip select is active high so keep it low to prevent out-of-sync transaction 
0018:  MOVLB  01
0019:  BCF    0C.7
001A:  MOVLB  02
001B:  BCF    0C.7
....................    output_low(DRV_RESET);  // Reset is active high so keep reset pin low to activate driver  
001C:  MOVLB  01
001D:  BCF    0C.1
001E:  MOVLB  02
001F:  BCF    0C.1
....................    output_low(DRV_DIR);    // Set default direction 
0020:  MOVLB  01
0021:  BCF    0C.4
0022:  MOVLB  02
0023:  BCF    0C.4
....................    output_low(DRV_STEP);   // Keep step output low until a step command is received from the user 
0024:  MOVLB  01
0025:  BCF    0C.0
0026:  MOVLB  02
0027:  BCF    0C.0
.................... } 
0028:  MOVLP  00
0029:  MOVLB  00
002A:  GOTO   1B1 (RETURN)
.................... // Sets driver parameters to default values 
.................... void set_driver() 
.................... { 
....................    // Driver control register sets these parameters 
....................    // data operation type                       (bit 15)    1=read,  
....................    //                                                       0=write 
....................    // register adress                           (bit 14-12) 000=CTRL reg 
....................    // DTIME (dead time between MOSFET switching)(bit 11-10) 00=400ns,  
....................    //                                                       01=450ns,  
....................    //                                                       10=650ns,  
....................    //                                                       11=850ns 
....................    // ISGain (current amplifier gain)           (bit 9-8)   00=Gain of 5,  
....................    //                                                       01=Gain of 10,  
....................    //                                                       10=Gain of 20,  
....................    //                                                       11=Gain of 40 
....................    // EXSTALL (source of stall detection)       (bit 7)     0=Internal 
....................    //                                                       1=External 
....................    // MODE (microstepping mode)                 (bit 6-3)   0000=Full-step, 71% current 
....................    //                                                       0001=Half step 
....................    //                                                       0010=1/4 step 
....................    //                                                       0011=1/8 step 
....................    //                                                       0100=1/16 step 
....................    //                                                       0101=1/32 step 
....................    //                                                       0110=1/64 step 
....................    //                                                       0111=1/128 step 
....................    //                                                       1000=1/256 step 
....................    // RSTEP (single step output)                (bit 2)     0=No action 
....................    //                                                       1=Indexer will advance one step; automatically cleared after write 
....................    // direction                                 (bit 1)     0=Direction set by DIR pin 
....................    //                                                       1=Direction set by inverse of DIR pin 
....................    // enable                                    (bit 0)     0=Disable motor 
....................    //                                                       1=Enable motor 
....................    //   
....................    //                 76543210 
....................     
....................    output_high(SPI_CS); 
*
0040:  MOVLB  01
0041:  BCF    0C.7
0042:  MOVLB  02
0043:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Ctrl_1     = 0b00000001; 
....................                     //76543210 
....................    int Ctrl_0     = 0b00011001; 
0044:  MOVLW  01
0045:  MOVLB  00
0046:  MOVWF  23
0047:  MOVLW  19
0048:  MOVWF  24
....................    SPI_SSP1BUF = Ctrl_1; 
0049:  MOVLB  04
004A:  CLRF   12
004B:  MOVLB  00
004C:  MOVF   23,W
004D:  MOVLB  04
004E:  MOVWF  11
....................    while (!SPI_FLAG); 
004F:  MOVLB  00
0050:  BTFSS  11.3
0051:  GOTO   050
....................    SPI_FLAG = 0; 
0052:  BCF    11.3
....................    SPI_SSP1BUF = Ctrl_0; 
0053:  MOVLB  04
0054:  CLRF   12
0055:  MOVLB  00
0056:  MOVF   24,W
0057:  MOVLB  04
0058:  MOVWF  11
....................    while (!SPI_FLAG); 
0059:  MOVLB  00
005A:  BTFSS  11.3
005B:  GOTO   05A
....................    SPI_FLAG = 0; 
005C:  BCF    11.3
....................    output_low(SPI_CS); 
005D:  MOVLB  01
005E:  BCF    0C.7
005F:  MOVLB  02
0060:  BCF    0C.7
....................    delay_ms(10); 
0061:  MOVLW  0A
0062:  MOVLB  00
0063:  MOVWF  33
0064:  CALL   02B
....................  
....................    output_high(SPI_CS); 
0065:  MOVLB  01
0066:  BCF    0C.7
0067:  MOVLB  02
0068:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Torque_1   = 0b00010000; 
....................                     //76543210 
....................    int Torque_0   = 0b01111000; 
0069:  MOVLW  10
006A:  MOVLB  00
006B:  MOVWF  25
006C:  MOVLW  78
006D:  MOVWF  26
....................    SPI_SSP1BUF = Torque_1; 
006E:  MOVLB  04
006F:  CLRF   12
0070:  MOVLB  00
0071:  MOVF   25,W
0072:  MOVLB  04
0073:  MOVWF  11
....................    while (!SPI_FLAG); 
0074:  MOVLB  00
0075:  BTFSS  11.3
0076:  GOTO   075
....................    SPI_FLAG = 0; 
0077:  BCF    11.3
....................    SPI_SSP1BUF = Torque_0; 
0078:  MOVLB  04
0079:  CLRF   12
007A:  MOVLB  00
007B:  MOVF   26,W
007C:  MOVLB  04
007D:  MOVWF  11
....................    while (!SPI_FLAG); 
007E:  MOVLB  00
007F:  BTFSS  11.3
0080:  GOTO   07F
....................    SPI_FLAG = 0; 
0081:  BCF    11.3
....................    output_low(SPI_CS); 
0082:  MOVLB  01
0083:  BCF    0C.7
0084:  MOVLB  02
0085:  BCF    0C.7
....................    delay_ms(10); 
0086:  MOVLW  0A
0087:  MOVLB  00
0088:  MOVWF  33
0089:  CALL   02B
....................     
....................    output_high(SPI_CS); 
008A:  MOVLB  01
008B:  BCF    0C.7
008C:  MOVLB  02
008D:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Off_1      = 0b00100000; 
....................                     //76543210 
....................    int Off_0      = 0b01111001; 
008E:  MOVLW  20
008F:  MOVLB  00
0090:  MOVWF  27
0091:  MOVLW  79
0092:  MOVWF  28
....................    SPI_SSP1BUF = Off_1; 
0093:  MOVLB  04
0094:  CLRF   12
0095:  MOVLB  00
0096:  MOVF   27,W
0097:  MOVLB  04
0098:  MOVWF  11
....................    while (!SPI_FLAG); 
0099:  MOVLB  00
009A:  BTFSS  11.3
009B:  GOTO   09A
....................    SPI_FLAG = 0; 
009C:  BCF    11.3
....................    SPI_SSP1BUF = Off_0; 
009D:  MOVLB  04
009E:  CLRF   12
009F:  MOVLB  00
00A0:  MOVF   28,W
00A1:  MOVLB  04
00A2:  MOVWF  11
....................    while (!SPI_FLAG); 
00A3:  MOVLB  00
00A4:  BTFSS  11.3
00A5:  GOTO   0A4
....................    SPI_FLAG = 0; 
00A6:  BCF    11.3
....................    output_low(SPI_CS); 
00A7:  MOVLB  01
00A8:  BCF    0C.7
00A9:  MOVLB  02
00AA:  BCF    0C.7
....................    delay_ms(10); 
00AB:  MOVLW  0A
00AC:  MOVLB  00
00AD:  MOVWF  33
00AE:  CALL   02B
....................     
....................    output_high(SPI_CS); 
00AF:  MOVLB  01
00B0:  BCF    0C.7
00B1:  MOVLB  02
00B2:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Blank_1    = 0b00110001; 
....................                     //76543210 
....................    int Blank_0    = 0b10010110; 
00B3:  MOVLW  31
00B4:  MOVLB  00
00B5:  MOVWF  29
00B6:  MOVLW  96
00B7:  MOVWF  2A
....................    SPI_SSP1BUF = Blank_1; 
00B8:  MOVLB  04
00B9:  CLRF   12
00BA:  MOVLB  00
00BB:  MOVF   29,W
00BC:  MOVLB  04
00BD:  MOVWF  11
....................    while (!SPI_FLAG); 
00BE:  MOVLB  00
00BF:  BTFSS  11.3
00C0:  GOTO   0BF
....................    SPI_FLAG = 0; 
00C1:  BCF    11.3
....................    SPI_SSP1BUF = Blank_0; 
00C2:  MOVLB  04
00C3:  CLRF   12
00C4:  MOVLB  00
00C5:  MOVF   2A,W
00C6:  MOVLB  04
00C7:  MOVWF  11
....................    while (!SPI_FLAG); 
00C8:  MOVLB  00
00C9:  BTFSS  11.3
00CA:  GOTO   0C9
....................    SPI_FLAG = 0; 
00CB:  BCF    11.3
....................    output_low(SPI_CS); 
00CC:  MOVLB  01
00CD:  BCF    0C.7
00CE:  MOVLB  02
00CF:  BCF    0C.7
....................    delay_ms(10); 
00D0:  MOVLW  0A
00D1:  MOVLB  00
00D2:  MOVWF  33
00D3:  CALL   02B
....................     
....................    output_high(SPI_CS); 
00D4:  MOVLB  01
00D5:  BCF    0C.7
00D6:  MOVLB  02
00D7:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Decay_1    = 0b01000101; 
....................                     //76543210 
....................    int Decay_0    = 0b00011100; 
00D8:  MOVLW  45
00D9:  MOVLB  00
00DA:  MOVWF  2B
00DB:  MOVLW  1C
00DC:  MOVWF  2C
....................    SPI_SSP1BUF = Decay_1; 
00DD:  MOVLB  04
00DE:  CLRF   12
00DF:  MOVLB  00
00E0:  MOVF   2B,W
00E1:  MOVLB  04
00E2:  MOVWF  11
....................    while (!SPI_FLAG); 
00E3:  MOVLB  00
00E4:  BTFSS  11.3
00E5:  GOTO   0E4
....................    SPI_FLAG = 0; 
00E6:  BCF    11.3
....................    SPI_SSP1BUF = Decay_0; 
00E7:  MOVLB  04
00E8:  CLRF   12
00E9:  MOVLB  00
00EA:  MOVF   2C,W
00EB:  MOVLB  04
00EC:  MOVWF  11
....................    while (!SPI_FLAG); 
00ED:  MOVLB  00
00EE:  BTFSS  11.3
00EF:  GOTO   0EE
....................    SPI_FLAG = 0; 
00F0:  BCF    11.3
....................    output_low(SPI_CS); 
00F1:  MOVLB  01
00F2:  BCF    0C.7
00F3:  MOVLB  02
00F4:  BCF    0C.7
....................    delay_ms(10); 
00F5:  MOVLW  0A
00F6:  MOVLB  00
00F7:  MOVWF  33
00F8:  CALL   02B
....................     
....................    output_high(SPI_CS); 
00F9:  MOVLB  01
00FA:  BCF    0C.7
00FB:  MOVLB  02
00FC:  BSF    0C.7
....................    int Stall_1    = 0b01011001; 
....................    int Stall_0    = 0b00010100; 
00FD:  MOVLW  59
00FE:  MOVLB  00
00FF:  MOVWF  2D
0100:  MOVLW  14
0101:  MOVWF  2E
....................    SPI_SSP1BUF = Stall_1; 
0102:  MOVLB  04
0103:  CLRF   12
0104:  MOVLB  00
0105:  MOVF   2D,W
0106:  MOVLB  04
0107:  MOVWF  11
....................    while (!SPI_FLAG); 
0108:  MOVLB  00
0109:  BTFSS  11.3
010A:  GOTO   109
....................    SPI_FLAG = 0; 
010B:  BCF    11.3
....................    SPI_SSP1BUF = Stall_0; 
010C:  MOVLB  04
010D:  CLRF   12
010E:  MOVLB  00
010F:  MOVF   2E,W
0110:  MOVLB  04
0111:  MOVWF  11
....................    while (!SPI_FLAG); 
0112:  MOVLB  00
0113:  BTFSS  11.3
0114:  GOTO   113
....................    SPI_FLAG = 0; 
0115:  BCF    11.3
....................    output_low(SPI_CS); 
0116:  MOVLB  01
0117:  BCF    0C.7
0118:  MOVLB  02
0119:  BCF    0C.7
....................    delay_ms(10); 
011A:  MOVLW  0A
011B:  MOVLB  00
011C:  MOVWF  33
011D:  CALL   02B
....................     
....................    output_high(SPI_CS); 
011E:  MOVLB  01
011F:  BCF    0C.7
0120:  MOVLB  02
0121:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Drive_1    = 0b01101010; 
....................                     //76543210 
....................    int Drive_0    = 0b10100000; 
0122:  MOVLW  6A
0123:  MOVLB  00
0124:  MOVWF  2F
0125:  MOVLW  A0
0126:  MOVWF  30
....................    SPI_SSP1BUF = Drive_1; 
0127:  MOVLB  04
0128:  CLRF   12
0129:  MOVLB  00
012A:  MOVF   2F,W
012B:  MOVLB  04
012C:  MOVWF  11
....................    while (!SPI_FLAG); 
012D:  MOVLB  00
012E:  BTFSS  11.3
012F:  GOTO   12E
....................    SPI_FLAG = 0; 
0130:  BCF    11.3
....................    SPI_SSP1BUF = Drive_0; 
0131:  MOVLB  04
0132:  CLRF   12
0133:  MOVLB  00
0134:  MOVF   30,W
0135:  MOVLB  04
0136:  MOVWF  11
....................    while (!SPI_FLAG); 
0137:  MOVLB  00
0138:  BTFSS  11.3
0139:  GOTO   138
....................    SPI_FLAG = 0; 
013A:  BCF    11.3
....................    output_low(SPI_CS); 
013B:  MOVLB  01
013C:  BCF    0C.7
013D:  MOVLB  02
013E:  BCF    0C.7
....................    delay_ms(10); 
013F:  MOVLW  0A
0140:  MOVLB  00
0141:  MOVWF  33
0142:  CALL   02B
....................     
....................    output_high(SPI_CS); 
0143:  MOVLB  01
0144:  BCF    0C.7
0145:  MOVLB  02
0146:  BSF    0C.7
....................    int Status_1   = 0b01110000; 
....................    int Status_0   = 0b00000000; 
0147:  MOVLW  70
0148:  MOVLB  00
0149:  MOVWF  31
014A:  CLRF   32
....................    SPI_SSP1BUF = Status_1; 
014B:  MOVLB  04
014C:  CLRF   12
014D:  MOVLB  00
014E:  MOVF   31,W
014F:  MOVLB  04
0150:  MOVWF  11
....................    while (!SPI_FLAG); 
0151:  MOVLB  00
0152:  BTFSS  11.3
0153:  GOTO   152
....................    SPI_FLAG = 0; 
0154:  BCF    11.3
....................    SPI_SSP1BUF = Status_0; 
0155:  MOVLB  04
0156:  CLRF   12
0157:  MOVLB  00
0158:  MOVF   32,W
0159:  MOVLB  04
015A:  MOVWF  11
....................    while (!SPI_FLAG); 
015B:  MOVLB  00
015C:  BTFSS  11.3
015D:  GOTO   15C
....................    SPI_FLAG = 0; 
015E:  BCF    11.3
....................    output_low(SPI_CS); 
015F:  MOVLB  01
0160:  BCF    0C.7
0161:  MOVLB  02
0162:  BCF    0C.7
....................    delay_ms(10); 
0163:  MOVLW  0A
0164:  MOVLB  00
0165:  MOVWF  33
0166:  CALL   02B
....................  
.................... } 
0167:  MOVLP  00
0168:  GOTO   1B2 (RETURN)
....................  
.................... void check_limit_state() 
.................... { 
....................    int1 limit_new = input(LIMIT_SWITCH); 
....................     
....................    if(limit_old == 0 && limit_new == 1) 
....................    { 
....................       if(input(USER_DIR) == true) 
....................       { 
....................          write_eeprom(up_lim_add, 1); 
....................          write_eeprom(down_lim_add, 0); 
....................       } 
....................       if(input(USER_DIR) == false) 
....................       { 
....................          write_eeprom(up_lim_add, 0); 
....................          write_eeprom(down_lim_add, 1); 
....................       } 
....................    } 
....................    else if(limit_old == 1 && limit_new == 0) 
....................    { 
....................       write_eeprom(up_lim_add, 0); 
....................       write_eeprom(down_lim_add, 0); 
....................    } 
....................     
....................    limit_old = limit_new; 
.................... } 
.................... void set_enable(int1 state) 
.................... { 
....................    int Ctrl_1 = 0b00000001; 
....................    int Ctrl_0; 
....................     
....................    if(state == true) 
....................       Ctrl_0     = 0b00011001; 
....................    else 
....................       Ctrl_0     = 0b00011000; 
....................     
....................    output_high(SPI_CS); 
....................    SPI_SSP1BUF = Ctrl_1; 
....................    while (!SPI_FLAG); 
....................    SPI_FLAG = 0; 
....................    SPI_SSP1BUF = Ctrl_0; 
....................    while (!SPI_FLAG); 
....................    SPI_FLAG = 0; 
....................    output_low(SPI_CS); 
....................    delay_ms(10); 
.................... } 
.................... void set_direction() 
.................... { 
....................    if(dir != input(USER_DIR)) 
....................    { 
....................       output_bit(DRV_DIR, input(USER_DIR)); 
....................       dir = input(USER_DIR); 
....................    } 
.................... } 
.................... void motion_cycle() 
.................... { 
....................    step  = input(USER_STEP); 
....................    dir   = input(USER_DIR); 
....................    while(true) 
....................    {  
....................       if(input(USER_ENABLE) == true) 
....................       { 
....................          set_enable(true); 
....................           
....................          while(input(USER_ENABLE)) 
....................          { 
....................             check_limit_state(); 
....................             set_direction (); 
....................              
....................             if(read_eeprom(up_lim_add) == 0 && dir == 1) 
....................             { 
....................                if(step != input(USER_STEP)) 
....................                { 
....................                   output_bit(DRV_STEP, input(USER_STEP)); 
....................                   step = input(USER_STEP); 
....................                } 
....................             } 
....................             else if(read_eeprom (down_lim_add) == 0 && dir == 0) 
....................             { 
....................                if(step != input(USER_STEP)) 
....................                { 
....................                   output_bit(DRV_STEP, input(USER_STEP)); 
....................                   step = input(USER_STEP); 
....................                } 
....................              
....................             } 
....................          } 
....................       } 
....................       else if (!input(USER_ENABLE) || input(LIMIT_SWITCH) ) 
....................       { 
....................          set_enable(false); 
....................       } 
....................    } 
.................... } 
....................  
.................... void main() 
.................... { 
*
018F:  CLRF   05
0190:  CLRF   04
0191:  MOVLW  1F
0192:  ANDWF  03,F
0193:  MOVLW  F4
0194:  MOVLB  01
0195:  MOVWF  19
0196:  BCF    0D.1
0197:  MOVLB  02
0198:  BSF    0D.1
0199:  MOVLB  00
019A:  BCF    20.0
019B:  BCF    20.1
019C:  BCF    20.2
019D:  CLRF   21
019E:  MOVLW  01
019F:  MOVWF  22
01A0:  MOVLB  03
01A1:  CLRF   0C
01A2:  CLRF   0D
01A3:  MOVLB  02
01A4:  CLRF   12
01A5:  CLRF   11
01A6:  CLRF   14
01A7:  CLRF   13
.................... // Set I/O states of the ports 
....................    //           76543210                  
....................    set_tris_a(0b00101100);        
01A8:  MOVLW  2C
01A9:  MOVLB  01
01AA:  MOVWF  0C
....................    set_tris_b(0b11001111); 
01AB:  MOVLW  CF
01AC:  MOVWF  0D
....................  
....................    // Set alternative pin functions 
....................    set_pins(); 
01AD:  MOVLB  00
01AE:  GOTO   003
....................    // Set SPI parameters 
....................    set_SPI(); 
01AF:  GOTO   00B
....................    //set_IOC(); 
....................     
....................    // Give user a hint of system start by turning on fault led 
....................     
....................    // Set variables to default values 
....................    set_variables(); 
01B0:  GOTO   018
....................    // Set driver variables to default values 
....................    set_driver(); 
01B1:  GOTO   040
....................    //setup_uart(UART_AUTODETECT); 
....................     
....................    //int1 up_limit = read_eeprom (up_lim_add); 
....................    //int1 down_limit = read_eeprom (down_lim_add); 
....................    //if(up_limit == 1 || down_limit == 1) 
....................       //limit_old = 1; 
....................    putc('c'); 
01B2:  MOVLW  63
01B3:  MOVWF  23
01B4:  GOTO   169
....................    //fprintf("______________________________________________________________\n\r"); 
....................    //fprintf("\n\n\rMODESIS LASER POSITIONING SYSTEM\n\n\r"); 
....................    //fprintf("\n\n\rCard Version V1.1 Software Version v1.0\n\n\r"); 
....................    //motion_cycle(); 
.................... } 
01B5:  SLEEP

Configuration Fuses:
   Word  1: 0E04   NOWDT PUT PROTECT NOMCLR CPD BROWNOUT NOIESO NOFCMEN INTRC_IO NOCLKOUT
   Word  2: 1210   WRT NOVCAP PLL_SW STVREN BORV25 NODEBUG NOLVP
