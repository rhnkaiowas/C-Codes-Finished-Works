CCS PCM C Compiler, Version 4.108, 15145               29-Mar-14 11:38

               Filename: E:\File Server\Modesis\Proje Dosyalarý\SMD - Adým Motor Sürücü\Software\Asansör Kod DRV8711\Asansor rs232 pulser\Pulser_rs232-asansor.lst

               ROM used: 1514 words (74%)
                         Largest free fragment is 533
               RAM used: 26 (8%) at main() level
                         52 (16%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLP  00
0001:  GOTO   505
0002:  NOP
*
0004:  CLRF   03
0005:  CLRF   0A
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.5
0013:  GOTO   016
0014:  BTFSC  11.5
0015:  GOTO   01F
0016:  MOVF   20,W
0017:  MOVWF  77
0018:  MOVF   21,W
0019:  MOVWF  78
001A:  MOVF   22,W
001B:  MOVWF  79
001C:  MOVF   23,W
001D:  MOVWF  7A
001E:  RETFIE
.................... #INCLUDE <16f1826.h>  
.................... //////// Standard Header file for the PIC16F1826 device //////////////// 
.................... #device PIC16F1826 
.................... #list 
....................  
....................  
.................... #FUSES INTRC_IO                                                      // High Speed Oscilator (>4 Mhz) crystal 
.................... #FUSES NOWDT                                                         // Watch Dog Timer disabled 
.................... #FUSES PUT                                                           // Power Up Timer enabled 
.................... #FUSES MCLR                                                          // Master Clear pin enabled 
.................... #FUSES BROWNOUT                                                      // Brownout Reset enabled 
.................... #FUSES BORV25                                                        // Brownout Reset at 2.5V 
.................... #FUSES NOLVP                                                         // Low Voltage Programming disabled 
.................... #FUSES CPD                                                           // Data EEPROM code protected 
.................... #FUSES PROTECT                                                       // Code protected from reads 
.................... #FUSES NOIESO                                                        // Internal External Switch Over Mode disabled 
.................... #FUSES NOFCMEN                                                       // Fail-safe clock monitor disabled 
....................  
.................... #USE   DELAY(clock=32000000)                                         // delay() func. adjusted for 20Mhz Primary Osc. 
*
0112:  MOVLW  20
0113:  MOVWF  05
0114:  MOVLW  18
0115:  MOVWF  04
0116:  MOVF   00,W
0117:  BTFSC  03.2
0118:  GOTO   126
0119:  MOVLW  0A
011A:  MOVWF  78
011B:  CLRF   77
011C:  DECFSZ 77,F
011D:  GOTO   11C
011E:  DECFSZ 78,F
011F:  GOTO   11B
0120:  MOVLW  5F
0121:  MOVWF  77
0122:  DECFSZ 77,F
0123:  GOTO   122
0124:  DECFSZ 00,F
0125:  GOTO   119
0126:  RETURN
.................... #USE RS232(stream=RS232,xmit=PIN_B2,rcv=PIN_B1,baud=38400,parity=N,bits=8,stop=1)     // Set UART2 as RS232 stream 
0127:  MOVLB  01
0128:  BCF    0D.1
0129:  MOVLB  02
012A:  BCF    0D.1
012B:  MOVLW  08
012C:  MOVWF  78
012D:  GOTO   12E
012E:  NOP
012F:  BSF    78.7
0130:  GOTO   141
0131:  BCF    78.7
0132:  MOVLB  00
0133:  RRF    41,F
0134:  MOVLB  02
0135:  BTFSC  03.0
0136:  BSF    0D.1
0137:  BTFSS  03.0
0138:  BCF    0D.1
0139:  BSF    78.6
013A:  GOTO   141
013B:  BCF    78.6
013C:  DECFSZ 78,F
013D:  GOTO   132
013E:  GOTO   13F
013F:  NOP
0140:  BSF    0D.1
0141:  MOVLW  3E
0142:  MOVWF  04
0143:  DECFSZ 04,F
0144:  GOTO   143
0145:  GOTO   146
0146:  BTFSC  78.7
0147:  GOTO   131
0148:  BTFSC  78.6
0149:  GOTO   13B
014A:  MOVLB  00
014B:  RETURN
*
018C:  MOVLB  01
018D:  BSF    0D.1
018E:  MOVLB  00
018F:  BTFSC  0D.1
0190:  GOTO   18F
0191:  MOVLW  08
0192:  MOVWF  77
0193:  CLRF   42
0194:  BSF    77.7
0195:  GOTO   1A4
0196:  BCF    77.7
0197:  GOTO   1A4
0198:  BCF    03.0
0199:  BTFSC  0D.1
019A:  BSF    03.0
019B:  RRF    42,F
019C:  BSF    77.6
019D:  GOTO   1A4
019E:  BCF    77.6
019F:  DECFSZ 77,F
01A0:  GOTO   198
01A1:  MOVF   42,W
01A2:  MOVWF  78
01A3:  GOTO   1AF
01A4:  MOVLW  3F
01A5:  BTFSC  77.7
01A6:  MOVLW  11
01A7:  MOVWF  78
01A8:  DECFSZ 78,F
01A9:  GOTO   1A8
01AA:  BTFSC  77.7
01AB:  GOTO   196
01AC:  BTFSC  77.6
01AD:  GOTO   19E
01AE:  GOTO   198
01AF:  RETURN
.................... // Pin assignments 
.................... #DEFINE DBG_LED      PIN_A3                                          // Debug LED output pin 
.................... #DEFINE MD_MS1       PIN_B0                                          // Step resolution select output MS1 
.................... #DEFINE MD_MS2       PIN_A4                                          // Step resolution select output MS2 
.................... #DEFINE MD_STEP      PIN_B3                                          // Step output pin 
.................... #DEFINE MD_ENABLE    PIN_B6                                          // Enable output pin (active low) 
.................... #DEFINE MD_DIR       PIN_A2                                          // Direction output pin 
.................... #DEFINE MD_HOME      PIN_B7                                          // Home input pin 
.................... #DEFINE LM_UP        PIN_B4                                          // Up limit switch input pin 
.................... #DEFINE LM_DOWN      PIN_B5                                          // Down limit switch input pin 
.................... #DEFINE ENABLE       PIN_A1                                          // Enable Output 
.................... #DEFINE CLOCK        PIN_A0                                          // Clock Output 
....................  
.................... enum  State     {OFF = 0, ON   = 1};                                 // Motor states 
.................... enum  Direction {UP  = 0, DOWN = 1};                                 // Direction of motion 
.................... enum  Motion    {ACC = 0, WALK = 1, RUN  = 2, DEC = 3, STEADY = 4};  // State of the motion 
....................  
.................... int1           reg_rs232_message    = 0; 
.................... int16          frequency            = 0; 
.................... int16          delay                = 0; 
.................... int1           enable_state         = 0; 
.................... int16          up_distance          = 0; 
.................... int16          down_distance        = 0; 
.................... int1           up_state             = 0; 
.................... int1           down_state           = 0; 
.................... int32          down_distance_step   = 0; 
.................... int32          up_distance_step     = 0; 
....................  
....................  
.................... // RS232 receive byte interrupt 
.................... #INT_RDA 
.................... void isr_rs232_message() 
.................... { 
....................    // Receive the RS232 message 
....................    reg_rs232_message = 1;   
*
001F:  BSF    24.0
.................... }  
.................... // Handles the messages of RS232 connection 
0020:  BCF    11.5
0021:  MOVLP  00
0022:  GOTO   016
.................... void data_set_frequency() 
.................... { 
*
0247:  CLRF   38
....................    unsigned int8 i=0; 
....................    unsigned int8 input[5]; 
....................    for(i=0; i<5; i++) 
0248:  CLRF   38
0249:  MOVF   38,W
024A:  SUBLW  04
024B:  BTFSS  03.0
024C:  GOTO   26E
....................    { 
....................       input[i]=(unsigned)(fgetc(RS232)-48); 
024D:  MOVLW  19
024E:  ADDWF  38,W
024F:  MOVWF  04
0250:  MOVLW  20
0251:  MOVWF  05
0252:  BTFSC  03.0
0253:  INCF   05,F
0254:  MOVF   05,W
0255:  MOVWF  41
0256:  MOVF   04,W
0257:  MOVWF  40
0258:  CALL   18C
0259:  MOVF   41,W
025A:  MOVWF  05
025B:  MOVF   40,W
025C:  MOVWF  04
025D:  MOVLW  30
025E:  SUBWF  78,W
025F:  MOVWF  00
....................       fputc(input[i]+48,RS232); 
0260:  MOVLW  19
0261:  ADDWF  38,W
0262:  MOVWF  04
0263:  MOVLW  20
0264:  MOVWF  05
0265:  BTFSC  03.0
0266:  INCF   05,F
0267:  MOVLW  30
0268:  ADDWF  00,W
0269:  MOVWF  3E
026A:  MOVWF  41
026B:  CALL   127
....................    } 
026C:  INCF   38,F
026D:  GOTO   249
....................    frequency=((input[0]*10000)+(input[0]*1000)+(input[0]*100)+(input[0]*10)+(input[0])); 
026E:  CLRF   41
026F:  MOVF   39,W
0270:  MOVWF  40
0271:  MOVLW  27
0272:  MOVWF  43
0273:  MOVLW  10
0274:  MOVWF  42
0275:  CALL   232
0276:  MOVF   79,W
0277:  MOVWF  3F
0278:  MOVF   78,W
0279:  MOVWF  3E
027A:  CLRF   41
027B:  MOVF   39,W
027C:  MOVWF  40
027D:  MOVLW  03
027E:  MOVWF  43
027F:  MOVLW  E8
0280:  MOVWF  42
0281:  CALL   232
0282:  MOVF   79,W
0283:  MOVWF  7A
0284:  MOVF   78,W
0285:  ADDWF  3E,F
0286:  MOVF   79,W
0287:  ADDWFC 3F,F
0288:  MOVF   39,W
0289:  MOVWF  40
028A:  MOVLW  64
028B:  MOVWF  41
028C:  CALL   20D
028D:  MOVF   78,W
028E:  ADDWF  3E,F
028F:  MOVLW  00
0290:  ADDWFC 3F,F
0291:  MOVF   39,W
0292:  MOVWF  40
0293:  MOVLW  0A
0294:  MOVWF  41
0295:  CALL   20D
0296:  MOVF   78,W
0297:  ADDWF  3E,F
0298:  MOVLW  00
0299:  ADDWFC 3F,F
029A:  MOVF   39,W
029B:  ADDWF  3E,W
029C:  MOVWF  25
029D:  MOVLW  00
029E:  ADDWFC 3F,W
029F:  MOVWF  26
....................    delay=1000/(2*frequency); 
02A0:  BCF    03.0
02A1:  RLF    25,W
02A2:  MOVWF  79
02A3:  RLF    26,W
02A4:  MOVWF  7A
02A5:  MOVF   79,W
02A6:  MOVWF  3E
02A7:  MOVF   7A,W
02A8:  MOVWF  3F
02A9:  MOVLW  03
02AA:  MOVWF  41
02AB:  MOVLW  E8
02AC:  MOVWF  40
02AD:  MOVF   3F,W
02AE:  MOVWF  43
02AF:  MOVF   3E,W
02B0:  MOVWF  42
*
02D5:  MOVF   79,W
02D6:  MOVWF  28
02D7:  MOVF   78,W
02D8:  MOVWF  27
.................... } 
02D9:  RETURN
....................  
.................... void data_set_enable() 
.................... { 
02DA:  CLRF   38
....................    unsigned int8 i=0; 
....................    unsigned int8 input[1]; 
....................    for(i=0; i<1; i++) 
02DB:  CLRF   38
02DC:  MOVF   38,F
02DD:  BTFSS  03.2
02DE:  GOTO   300
....................    { 
....................       input[i]=(unsigned)(fgetc(RS232)-48); 
02DF:  MOVLW  19
02E0:  ADDWF  38,W
02E1:  MOVWF  04
02E2:  MOVLW  20
02E3:  MOVWF  05
02E4:  BTFSC  03.0
02E5:  INCF   05,F
02E6:  MOVF   05,W
02E7:  MOVWF  3D
02E8:  MOVF   04,W
02E9:  MOVWF  3C
02EA:  CALL   18C
02EB:  MOVF   3D,W
02EC:  MOVWF  05
02ED:  MOVF   3C,W
02EE:  MOVWF  04
02EF:  MOVLW  30
02F0:  SUBWF  78,W
02F1:  MOVWF  00
....................       fputc(input[i]+48,RS232); 
02F2:  MOVLW  19
02F3:  ADDWF  38,W
02F4:  MOVWF  04
02F5:  MOVLW  20
02F6:  MOVWF  05
02F7:  BTFSC  03.0
02F8:  INCF   05,F
02F9:  MOVLW  30
02FA:  ADDWF  00,W
02FB:  MOVWF  3A
02FC:  MOVWF  41
02FD:  CALL   127
....................    } 
02FE:  INCF   38,F
02FF:  GOTO   2DC
....................    enable_state=input[0]; 
0300:  BCF    24.1
0301:  BTFSC  39.0
0302:  BSF    24.1
....................    if (enable_state==1) 
0303:  BTFSS  24.1
0304:  GOTO   30B
....................    { 
....................    output_high(ENABLE); 
0305:  MOVLB  01
0306:  BCF    0C.1
0307:  MOVLB  02
0308:  BSF    0C.1
....................    } 
....................    else 
0309:  GOTO   30F
030A:  MOVLB  00
....................    { 
....................    output_low(ENABLE); 
030B:  MOVLB  01
030C:  BCF    0C.1
030D:  MOVLB  02
030E:  BCF    0C.1
....................    } 
.................... } 
030F:  MOVLB  00
0310:  RETURN
....................  
.................... void data_set_distance_upwards() 
.................... { 
*
0416:  CLRF   38
....................    unsigned int8 i=0; 
....................    unsigned int8 input[3]; 
....................    for(i=0; i<3; i++) 
0417:  CLRF   38
0418:  MOVF   38,W
0419:  SUBLW  02
041A:  BTFSS  03.0
041B:  GOTO   43D
....................    { 
....................       input[i]=(unsigned)(fgetc(RS232)-48); 
041C:  MOVLW  19
041D:  ADDWF  38,W
041E:  MOVWF  04
041F:  MOVLW  20
0420:  MOVWF  05
0421:  BTFSC  03.0
0422:  INCF   05,F
0423:  MOVF   05,W
0424:  MOVWF  3F
0425:  MOVF   04,W
0426:  MOVWF  3E
0427:  CALL   18C
0428:  MOVF   3F,W
0429:  MOVWF  05
042A:  MOVF   3E,W
042B:  MOVWF  04
042C:  MOVLW  30
042D:  SUBWF  78,W
042E:  MOVWF  00
....................       fputc(input[i]+48,RS232); 
042F:  MOVLW  19
0430:  ADDWF  38,W
0431:  MOVWF  04
0432:  MOVLW  20
0433:  MOVWF  05
0434:  BTFSC  03.0
0435:  INCF   05,F
0436:  MOVLW  30
0437:  ADDWF  00,W
0438:  MOVWF  3C
0439:  MOVWF  41
043A:  CALL   127
....................    } 
043B:  INCF   38,F
043C:  GOTO   418
....................    up_distance=((input[0]*100)+(input[0]*10)+(input[0])); 
043D:  MOVF   39,W
043E:  MOVWF  40
043F:  MOVLW  64
0440:  MOVWF  41
0441:  CALL   20D
0442:  MOVF   78,W
0443:  MOVWF  3C
0444:  MOVF   39,W
0445:  MOVWF  40
0446:  MOVLW  0A
0447:  MOVWF  41
0448:  CALL   20D
0449:  MOVF   78,W
044A:  ADDWF  3C,W
044B:  ADDWF  39,W
044C:  MOVWF  29
044D:  CLRF   2A
....................    up_distance_step=up_distance*25600; 
044E:  MOVF   2A,W
044F:  MOVWF  41
0450:  MOVF   29,W
0451:  MOVWF  40
0452:  MOVLW  64
0453:  MOVWF  43
0454:  CLRF   42
0455:  CALL   232
0456:  CLRF   34
0457:  CLRF   33
0458:  MOVF   79,W
0459:  MOVWF  32
045A:  MOVF   78,W
045B:  MOVWF  31
....................    up_state=1; 
045C:  BSF    24.2
....................  
....................  
.................... } 
....................  
.................... void data_set_distance_downwards() 
.................... { 
*
0490:  CLRF   38
....................    unsigned int8 i=0; 
....................    unsigned int8 input[3]; 
....................    for(i=0; i<3; i++) 
0491:  CLRF   38
0492:  MOVF   38,W
0493:  SUBLW  02
0494:  BTFSS  03.0
0495:  GOTO   4B7
....................    { 
....................       input[i]=(unsigned)(fgetc(RS232)-48); 
0496:  MOVLW  19
0497:  ADDWF  38,W
0498:  MOVWF  04
0499:  MOVLW  20
049A:  MOVWF  05
049B:  BTFSC  03.0
049C:  INCF   05,F
049D:  MOVF   05,W
049E:  MOVWF  3F
049F:  MOVF   04,W
04A0:  MOVWF  3E
04A1:  CALL   18C
04A2:  MOVF   3F,W
04A3:  MOVWF  05
04A4:  MOVF   3E,W
04A5:  MOVWF  04
04A6:  MOVLW  30
04A7:  SUBWF  78,W
04A8:  MOVWF  00
....................       fputc(input[i]+48,RS232); 
04A9:  MOVLW  19
04AA:  ADDWF  38,W
04AB:  MOVWF  04
04AC:  MOVLW  20
04AD:  MOVWF  05
04AE:  BTFSC  03.0
04AF:  INCF   05,F
04B0:  MOVLW  30
04B1:  ADDWF  00,W
04B2:  MOVWF  3C
04B3:  MOVWF  41
04B4:  CALL   127
....................    } 
04B5:  INCF   38,F
04B6:  GOTO   492
....................    down_distance=((input[0]*100)+(input[0]*10)+(input[0])); 
04B7:  MOVF   39,W
04B8:  MOVWF  40
04B9:  MOVLW  64
04BA:  MOVWF  41
04BB:  CALL   20D
04BC:  MOVF   78,W
04BD:  MOVWF  3C
04BE:  MOVF   39,W
04BF:  MOVWF  40
04C0:  MOVLW  0A
04C1:  MOVWF  41
04C2:  CALL   20D
04C3:  MOVF   78,W
04C4:  ADDWF  3C,W
04C5:  ADDWF  39,W
04C6:  MOVWF  2B
04C7:  CLRF   2C
....................    down_distance_step= down_distance*25600; 
04C8:  MOVF   2C,W
04C9:  MOVWF  41
04CA:  MOVF   2B,W
04CB:  MOVWF  40
04CC:  MOVLW  64
04CD:  MOVWF  43
04CE:  CLRF   42
04CF:  CALL   232
04D0:  CLRF   30
04D1:  CLRF   2F
04D2:  MOVF   79,W
04D3:  MOVWF  2E
04D4:  MOVF   78,W
04D5:  MOVWF  2D
....................    down_state=1; 
04D6:  BSF    24.3
....................  
....................  
.................... } 
....................  
.................... // Handles the messages of RS232 connection// Handles the messages of RS232 connection 
.................... void rs232_message() 
.................... { 
....................    char input; 
....................     
....................    input=fgetc(RS232); 
*
0311:  CALL   18C
0312:  MOVF   78,W
0313:  MOVWF  37
....................    switch (input){ 
0314:  MOVF   37,W
0315:  XORLW  63
0316:  BTFSC  03.2
0317:  GOTO   322
0318:  XORLW  0A
0319:  BTFSC  03.2
031A:  GOTO   341
031B:  XORLW  1C
031C:  BTFSC  03.2
031D:  GOTO   40F
031E:  XORLW  11
031F:  BTFSC  03.2
0320:  GOTO   489
0321:  GOTO   503
....................       case 'c':fprintf(RS232,"\n\rSetted Frequency and State of Enable\t(i)"); 
0322:  MOVLW  23
0323:  MOVLB  03
0324:  MOVWF  11
0325:  MOVLW  00
0326:  MOVWF  12
0327:  MOVLB  00
0328:  CALL   14C
....................                fprintf(RS232,"\n\rGo Upwards (mm): \t(u)"); 
0329:  MOVLW  39
032A:  MOVLB  03
032B:  MOVWF  11
032C:  MOVLW  00
032D:  MOVWF  12
032E:  MOVLB  00
032F:  CALL   14C
....................                fprintf(RS232,"\n\rGo Downwards (mm): \t(d)"); 
0330:  MOVLW  45
0331:  MOVLB  03
0332:  MOVWF  11
0333:  MOVLW  00
0334:  MOVWF  12
0335:  MOVLB  00
0336:  CALL   14C
.................... //!               fprintf(RS232,"\n\rSet Frequecy Value\t(f)"); 
.................... //!               fprintf(RS232,"\n\rSet Enable Status\t(e)"); 
....................                fprintf(RS232,"\n\n\r"); 
0337:  MOVLW  0A
0338:  MOVWF  41
0339:  CALL   127
033A:  MOVLW  0A
033B:  MOVWF  41
033C:  CALL   127
033D:  MOVLW  0D
033E:  MOVWF  41
033F:  CALL   127
....................                break; 
0340:  GOTO   503
....................                 
.................... //!      case 'f':fprintf(RS232,"\n\rFrequecy Value (5 Characters): )"); 
.................... //!               data_set_frequency(); 
.................... //!               fprintf(RS232,"\n\n\r"); 
.................... //!               break; 
.................... //! 
.................... //!      case 'e':fprintf(RS232,"\n\rEnable State (1 or 0): )"); 
.................... //!               data_set_enable(); 
.................... //!               fprintf(RS232,"\n\n\r"); 
.................... //!               break; 
....................                 
....................       case 'i':fprintf(RS232,"Frequency: %Lu\n\r)",frequency); 
0341:  MOVLW  52
0342:  MOVLB  03
0343:  MOVWF  11
0344:  MOVLW  00
0345:  MOVWF  12
0346:  BCF    03.0
0347:  MOVLW  0B
0348:  MOVLB  00
0349:  MOVWF  39
034A:  CALL   1B0
034B:  MOVLW  10
034C:  MOVWF  04
034D:  MOVF   26,W
034E:  MOVWF  39
034F:  MOVF   25,W
0350:  MOVWF  38
*
03AE:  MOVLW  0A
03AF:  MOVWF  41
03B0:  CALL   127
03B1:  MOVLW  0D
03B2:  MOVWF  41
03B3:  CALL   127
03B4:  MOVLW  29
03B5:  MOVWF  41
03B6:  CALL   127
....................                fprintf(RS232,"Enable State: %u\n\r)",enable_state); 
03B7:  MOVLW  00
03B8:  BTFSC  24.1
03B9:  MOVLW  01
03BA:  MOVWF  38
03BB:  MOVLW  5B
03BC:  MOVLB  03
03BD:  MOVWF  11
03BE:  MOVLW  00
03BF:  MOVWF  12
03C0:  BCF    03.0
03C1:  MOVLW  0E
03C2:  MOVLB  00
03C3:  MOVWF  39
03C4:  CALL   1B0
03C5:  MOVF   38,W
03C6:  MOVWF  39
03C7:  MOVLW  1B
03C8:  MOVWF  3A
*
03FC:  MOVLW  0A
03FD:  MOVWF  41
03FE:  CALL   127
03FF:  MOVLW  0D
0400:  MOVWF  41
0401:  CALL   127
0402:  MOVLW  29
0403:  MOVWF  41
0404:  CALL   127
....................                fprintf(RS232,"\n\n\r"); 
0405:  MOVLW  0A
0406:  MOVWF  41
0407:  CALL   127
0408:  MOVLW  0A
0409:  MOVWF  41
040A:  CALL   127
040B:  MOVLW  0D
040C:  MOVWF  41
040D:  CALL   127
....................                break; 
040E:  GOTO   503
....................                 
....................       case 'u':fprintf(RS232,"Upwards Distance (3 Caracters (mm)): )"); 
040F:  MOVLW  65
0410:  MOVLB  03
0411:  MOVWF  11
0412:  MOVLW  00
0413:  MOVWF  12
0414:  MOVLB  00
0415:  CALL   14C
....................                data_set_distance_upwards(); 
....................                fprintf(RS232,"\n\n\r"); 
*
045D:  MOVLW  0A
045E:  MOVWF  41
045F:  CALL   127
0460:  MOVLW  0A
0461:  MOVWF  41
0462:  CALL   127
0463:  MOVLW  0D
0464:  MOVWF  41
0465:  CALL   127
....................                 
....................                fprintf(RS232,"\n\rFrequecy Value (5 Characters): )"); 
0466:  MOVLW  79
0467:  MOVLB  03
0468:  MOVWF  11
0469:  MOVLW  00
046A:  MOVWF  12
046B:  MOVLB  00
046C:  CALL   14C
....................                data_set_frequency(); 
046D:  CALL   247
....................                fprintf(RS232,"\n\n\r"); 
046E:  MOVLW  0A
046F:  MOVWF  41
0470:  CALL   127
0471:  MOVLW  0A
0472:  MOVWF  41
0473:  CALL   127
0474:  MOVLW  0D
0475:  MOVWF  41
0476:  CALL   127
....................                 
....................                fprintf(RS232,"\n\rEnable State (1 or 0): )"); 
0477:  MOVLW  8B
0478:  MOVLB  03
0479:  MOVWF  11
047A:  MOVLW  00
047B:  MOVWF  12
047C:  MOVLB  00
047D:  CALL   14C
....................                data_set_enable(); 
047E:  CALL   2DA
....................                fprintf(RS232,"\n\n\r"); 
047F:  MOVLW  0A
0480:  MOVWF  41
0481:  CALL   127
0482:  MOVLW  0A
0483:  MOVWF  41
0484:  CALL   127
0485:  MOVLW  0D
0486:  MOVWF  41
0487:  CALL   127
....................                break; 
0488:  GOTO   503
....................                 
....................       case 'd':fprintf(RS232,"Downwards Distance (3 Characters (mm)): )"); 
0489:  MOVLW  99
048A:  MOVLB  03
048B:  MOVWF  11
048C:  MOVLW  00
048D:  MOVWF  12
048E:  MOVLB  00
048F:  CALL   14C
....................                data_set_distance_downwards(); 
....................                fprintf(RS232,"\n\n\r"); 
*
04D7:  MOVLW  0A
04D8:  MOVWF  41
04D9:  CALL   127
04DA:  MOVLW  0A
04DB:  MOVWF  41
04DC:  CALL   127
04DD:  MOVLW  0D
04DE:  MOVWF  41
04DF:  CALL   127
....................                 
....................                fprintf(RS232,"\n\rFrequecy Value (5 Characters): )"); 
04E0:  MOVLW  AE
04E1:  MOVLB  03
04E2:  MOVWF  11
04E3:  MOVLW  00
04E4:  MOVWF  12
04E5:  MOVLB  00
04E6:  CALL   14C
....................                data_set_frequency(); 
04E7:  CALL   247
....................                fprintf(RS232,"\n\n\r"); 
04E8:  MOVLW  0A
04E9:  MOVWF  41
04EA:  CALL   127
04EB:  MOVLW  0A
04EC:  MOVWF  41
04ED:  CALL   127
04EE:  MOVLW  0D
04EF:  MOVWF  41
04F0:  CALL   127
....................                 
....................                fprintf(RS232,"\n\rEnable State (1 or 0): )"); 
04F1:  MOVLW  C0
04F2:  MOVLB  03
04F3:  MOVWF  11
04F4:  MOVLW  00
04F5:  MOVWF  12
04F6:  MOVLB  00
04F7:  CALL   14C
....................                data_set_enable(); 
04F8:  CALL   2DA
....................                fprintf(RS232,"\n\n\r"); 
04F9:  MOVLW  0A
04FA:  MOVWF  41
04FB:  CALL   127
04FC:  MOVLW  0A
04FD:  MOVWF  41
04FE:  CALL   127
04FF:  MOVLW  0D
0500:  MOVWF  41
0501:  CALL   127
....................                break; 
0502:  GOTO   503
....................                 
....................                 
....................                 
....................    } 
....................     
....................    return; 
.................... } 
0503:  MOVLP  00
0504:  GOTO   55F (RETURN)
.................... // Main method 
.................... void main() 
.................... { 
0505:  CLRF   05
0506:  CLRF   04
0507:  MOVLW  1F
0508:  ANDWF  03,F
0509:  MOVLW  F4
050A:  MOVLB  01
050B:  MOVWF  19
050C:  BCF    0D.1
050D:  MOVLB  02
050E:  BSF    0D.1
050F:  MOVLB  00
0510:  BCF    24.0
0511:  CLRF   26
0512:  CLRF   25
0513:  CLRF   28
0514:  CLRF   27
0515:  BCF    24.1
0516:  CLRF   2A
0517:  CLRF   29
0518:  CLRF   2C
0519:  CLRF   2B
051A:  BCF    24.2
051B:  BCF    24.3
051C:  CLRF   30
051D:  CLRF   2F
051E:  CLRF   2E
051F:  CLRF   2D
0520:  CLRF   34
0521:  CLRF   33
0522:  CLRF   32
0523:  CLRF   31
0524:  MOVLB  03
0525:  CLRF   0C
0526:  CLRF   0D
0527:  MOVLB  02
0528:  CLRF   12
0529:  CLRF   11
052A:  CLRF   14
052B:  CLRF   13
....................    //           76543210 
....................    set_tris_a(0b11100000);                                              // Set I/O states of the ports 
052C:  MOVLW  E0
052D:  MOVLB  01
052E:  MOVWF  0C
....................    set_tris_b(0b10110010); 
052F:  MOVLW  B2
0530:  MOVWF  0D
....................     
....................    enable_interrupts(INT_RDA); 
0531:  BSF    11.5
....................    //fprintf(RS232,"\n\n\rMODESIS LASER POSITIONING STAGE\n\n\r"); 
....................    output_high(DBG_LED); 
0532:  BCF    0C.3
0533:  MOVLB  02
0534:  BSF    0C.3
....................    delay_ms(500); 
0535:  MOVLW  02
0536:  MOVLB  00
0537:  MOVWF  37
0538:  MOVLW  FA
0539:  MOVWF  38
053A:  CALL   112
053B:  DECFSZ 37,F
053C:  GOTO   538
....................     
....................    fprintf(RS232,"\n\r"); 
053D:  MOVLW  0A
053E:  MOVWF  41
053F:  CALL   127
0540:  MOVLW  0D
0541:  MOVWF  41
0542:  CALL   127
....................    fprintf(RS232,"______________________________________________________________\n\r"); 
0543:  MOVLW  CE
0544:  MOVLB  03
0545:  MOVWF  11
0546:  MOVLW  00
0547:  MOVWF  12
0548:  MOVLB  00
0549:  CALL   14C
....................    fprintf(RS232,"\n\n\rMODESIS LASER POSITIONING SYSTEM\n\n\r"); 
054A:  MOVLW  EF
054B:  MOVLB  03
054C:  MOVWF  11
054D:  MOVLW  00
054E:  MOVWF  12
054F:  MOVLB  00
0550:  CALL   14C
....................    fprintf(RS232,"Press 'c' for command list\n\n\r"); 
0551:  MOVLW  03
0552:  MOVLB  03
0553:  MOVWF  11
0554:  MOVLW  01
0555:  MOVWF  12
0556:  MOVLB  00
0557:  CALL   14C
....................     
....................    while(true) 
.................... { 
....................        
....................       if(reg_rs232_message) 
0558:  BTFSS  24.0
0559:  GOTO   563
....................       { 
....................          // Disable RS232 receive byte interrupt 
....................          disable_interrupts(INT_RDA); 
055A:  MOVLB  01
055B:  BCF    11.5
....................           
....................          reg_rs232_message = 0; 
055C:  MOVLB  00
055D:  BCF    24.0
....................          rs232_message(); 
055E:  GOTO   311
....................           
....................          // Enable RS232 receive byte interrupt 
....................          clear_interrupt(INT_RDA); 
055F:  MOVF   07,W
....................          enable_interrupts(INT_RDA); 
0560:  MOVLB  01
0561:  BSF    11.5
0562:  MOVLB  00
....................       } 
....................       while(enable_state==1) 
....................       { 
0563:  BTFSS  24.1
0564:  GOTO   5E9
....................          if(frequency!=0) 
0565:  MOVF   25,F
0566:  BTFSS  03.2
0567:  GOTO   56B
0568:  MOVF   26,F
0569:  BTFSC  03.2
056A:  GOTO   5E8
....................          { 
....................             if(up_state==1) 
056B:  BTFSS  24.2
056C:  GOTO   5AA
....................             { 
....................                disable_interrupts(INT_RDA); 
056D:  MOVLB  01
056E:  BCF    11.5
....................                unsigned int8 i=0; 
056F:  MOVLB  00
0570:  CLRF   35
....................                for(i=0; i<up_distance_step; i++) 
0571:  CLRF   35
0572:  MOVF   34,F
0573:  BTFSS  03.2
0574:  GOTO   57F
0575:  MOVF   33,F
0576:  BTFSS  03.2
0577:  GOTO   57F
0578:  MOVF   32,F
0579:  BTFSS  03.2
057A:  GOTO   57F
057B:  MOVF   31,W
057C:  SUBWF  35,W
057D:  BTFSC  03.0
057E:  GOTO   5A5
....................                { 
....................                output_high(CLOCK); 
057F:  MOVLB  01
0580:  BCF    0C.0
0581:  MOVLB  02
0582:  BSF    0C.0
....................                delay_ms(delay); 
0583:  MOVLB  00
0584:  MOVF   28,W
0585:  MOVWF  37
0586:  INCF   37,F
0587:  DECF   37,F
0588:  BTFSC  03.2
0589:  GOTO   58E
058A:  MOVLW  FF
058B:  MOVWF  38
058C:  CALL   112
058D:  GOTO   587
058E:  MOVF   27,W
058F:  MOVWF  38
0590:  CALL   112
....................                output_low(CLOCK); 
0591:  MOVLB  01
0592:  BCF    0C.0
0593:  MOVLB  02
0594:  BCF    0C.0
....................                delay_ms(delay); 
0595:  MOVLB  00
0596:  MOVF   28,W
0597:  MOVWF  37
0598:  INCF   37,F
0599:  DECF   37,F
059A:  BTFSC  03.2
059B:  GOTO   5A0
059C:  MOVLW  FF
059D:  MOVWF  38
059E:  CALL   112
059F:  GOTO   599
05A0:  MOVF   27,W
05A1:  MOVWF  38
05A2:  CALL   112
....................                } 
05A3:  INCF   35,F
05A4:  GOTO   572
....................                up_state=0; 
05A5:  BCF    24.2
....................                enable_interrupts(INT_RDA); 
05A6:  MOVLB  01
05A7:  BSF    11.5
....................             } 
....................             else if(down_state==1) 
05A8:  GOTO   5E7
05A9:  MOVLB  00
05AA:  BTFSS  24.3
05AB:  GOTO   5E8
....................             { 
....................             disable_interrupts(INT_RDA); 
05AC:  MOVLB  01
05AD:  BCF    11.5
....................                unsigned int8 i=0; 
05AE:  MOVLB  00
05AF:  CLRF   36
....................                for(i=0; i<down_distance_step; i++) 
05B0:  CLRF   36
05B1:  MOVF   30,F
05B2:  BTFSS  03.2
05B3:  GOTO   5BE
05B4:  MOVF   2F,F
05B5:  BTFSS  03.2
05B6:  GOTO   5BE
05B7:  MOVF   2E,F
05B8:  BTFSS  03.2
05B9:  GOTO   5BE
05BA:  MOVF   2D,W
05BB:  SUBWF  36,W
05BC:  BTFSC  03.0
05BD:  GOTO   5E4
....................             { 
....................                output_high(CLOCK); 
05BE:  MOVLB  01
05BF:  BCF    0C.0
05C0:  MOVLB  02
05C1:  BSF    0C.0
....................                delay_ms(delay); 
05C2:  MOVLB  00
05C3:  MOVF   28,W
05C4:  MOVWF  37
05C5:  INCF   37,F
05C6:  DECF   37,F
05C7:  BTFSC  03.2
05C8:  GOTO   5CD
05C9:  MOVLW  FF
05CA:  MOVWF  38
05CB:  CALL   112
05CC:  GOTO   5C6
05CD:  MOVF   27,W
05CE:  MOVWF  38
05CF:  CALL   112
....................                output_low(CLOCK); 
05D0:  MOVLB  01
05D1:  BCF    0C.0
05D2:  MOVLB  02
05D3:  BCF    0C.0
....................                delay_ms(delay); 
05D4:  MOVLB  00
05D5:  MOVF   28,W
05D6:  MOVWF  37
05D7:  INCF   37,F
05D8:  DECF   37,F
05D9:  BTFSC  03.2
05DA:  GOTO   5DF
05DB:  MOVLW  FF
05DC:  MOVWF  38
05DD:  CALL   112
05DE:  GOTO   5D8
05DF:  MOVF   27,W
05E0:  MOVWF  38
05E1:  CALL   112
....................             } 
05E2:  INCF   36,F
05E3:  GOTO   5B1
....................             down_state=0; 
05E4:  BCF    24.3
....................             enable_interrupts(INT_RDA); 
05E5:  MOVLB  01
05E6:  BSF    11.5
05E7:  MOVLB  00
....................             } 
....................          }    
....................       } 
05E8:  GOTO   563
.................... } 
05E9:  GOTO   558
....................     
....................    //md_init();                                                           // Initialize motor driver 
....................  
....................    //motion_cycle();                                                      // Start motion cycle 
.................... } 
05EA:  SLEEP

Configuration Fuses:
   Word  1: 0E44   NOWDT PUT PROTECT MCLR CPD BROWNOUT NOIESO NOFCMEN INTRC_IO NOCLKOUT
   Word  2: 1213   NOWRT NOVCAP PLL_SW STVREN BORV25 NODEBUG NOLVP
