C L "MAIN" 0 17 1 "FUNCTION"
D G "__PCM__" 0 441 ""5.008""
D G "__DEVICE__" 0 441 "1826"
D G "__DATE__" 0 441 ""07-Kas-14""
D G "__TIME__" 0 441 ""15:59:24"" "Standard Header file for the PIC16F1826 device ////////////////"
c L "set_tris_a" 1 5 15 "FUNCTION"
v L "value" 1 30 "int8" `54 
f B "set_tris_a" 1 30 "void(int8 value)" `53 
v L "value" 1 31 "int8" `56 
f B "set_tris_b" 1 31 "void(int8 value)" `55 
f B "get_tris_a" 1 32 "int8()" `57 
f B "get_tris_b" 1 33 "int8()" `58 
v L "value" 1 34 "int8" `60 
f B "output_a" 1 34 "void(int8 value)" `59 
v L "value" 1 35 "int8" `62 
f B "output_b" 1 35 "void(int8 value)" `61 
f B "input_a" 1 36 "int8()" `63 
f B "input_b" 1 37 "int8()" `64 
f B "input_change_a" 1 38 "int8()" `65 
f B "input_change_b" 1 39 "int8()" `66 
v L "pin" 1 40 "int16" `68 
f B "input" 1 40 "int8(int16 pin)" `67 
v L "pin" 1 41 "int16" `70 
f B "input_state" 1 41 "int8(int16 pin)" `69 
v L "pin" 1 42 "int16" `72 
f B "output_low" 1 42 "void(int16 pin)" `71 
v L "pin" 1 43 "int16" `74 
f B "output_high" 1 43 "void(int16 pin)" `73 
v L "pin" 1 44 "int16" `76 
f B "output_toggle" 1 44 "void(int16 pin)" `75 
v L "pin" 1 45 "int16" `78 
v L "level" 1 45 "int8" `79 
f B "output_bit" 1 45 "void(int16 pin,int8 level)" `77 
v L "pin" 1 46 "int16" `81 
f B "output_float" 1 46 "void(int16 pin)" `80 
v L "pin" 1 47 "int16" `83 
f B "output_drive" 1 47 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 51 "96"
d G "PIN_A1" 1 52 "97"
d G "PIN_A2" 1 53 "98"
d G "PIN_A3" 1 54 "99"
d G "PIN_A4" 1 55 "100"
d G "PIN_A5" 1 56 "101"
d G "PIN_A6" 1 57 "102"
d G "PIN_A7" 1 58 "103"
d G "PIN_B0" 1 60 "104"
d G "PIN_B1" 1 61 "105"
d G "PIN_B2" 1 62 "106"
d G "PIN_B3" 1 63 "107"
d G "PIN_B4" 1 64 "108"
d G "PIN_B5" 1 65 "109"
d G "PIN_B6" 1 66 "110"
d G "PIN_B7" 1 67 "111"
d G "FALSE" 1 70 "0"
d G "TRUE" 1 71 "1"
d G "BYTE" 1 73 "int8"
d G "BOOLEAN" 1 74 "int1"
d G "getc" 1 76 "getch"
d G "fgetc" 1 77 "getch"
d G "getchar" 1 78 "getch"
d G "putc" 1 79 "putchar"
d G "fputc" 1 80 "putchar"
d G "fgets" 1 81 "gets"
d G "fputs" 1 82 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 87 "int8()" `84 
f B "reset_cpu" 1 88 "void()" `85 
f B "sleep" 1 89 "void()" `86 
v L "type" 1 90 "int8" `88 
f G "sleep" 1 90 "void(int8 type)" `87  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 92 "0x3C"
d G "BROWNOUT_RESTART" 1 93 "0x3E"
d G "MCLR_FROM_SLEEP" 1 94 "0x27"
d G "WDT_TIMEOUT" 1 95 "0x1F"
d G "WDT_FROM_SLEEP" 1 96 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 97 "0x2F"
d G "MCLR_FROM_RUN" 1 98 "0x37"
d G "RESET_INSTRUCTION" 1 99 "0x3B"
d G "STACK_OVERFLOW" 1 100 "0xBF"
d G "STACK_UNDERFLOW" 1 101 "0x7F"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 108 "int8" `90 
f B "setup_timer_0" 1 108 "void(int8 mode)" `89 
v L "value" 1 109 "int8" `92 
f B "set_timer0" 1 109 "void(int8 value)" `91 
f B "get_timer0" 1 110 "int8()" `93 
v L "mode" 1 111 "int8" `95 
v L "prescaler" 1 111 "int8" `96 
f B "setup_counters" 1 111 "void(int8 mode,int8 prescaler)" `94 
v L "value" 1 112 "int8" `98 
f B "set_rtcc" 1 112 "void(int8 value)" `97 
f B "get_rtcc" 1 113 "int8()" `99  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 115 "0"
d G "T0_EXT_L_TO_H" 1 116 "32"
d G "T0_EXT_H_TO_L" 1 117 "48"
d G "T0_DIV_1" 1 119 "8"
d G "T0_DIV_2" 1 120 "0"
d G "T0_DIV_4" 1 121 "1"
d G "T0_DIV_8" 1 122 "2"
d G "T0_DIV_16" 1 123 "3"
d G "T0_DIV_32" 1 124 "4"
d G "T0_DIV_64" 1 125 "5"
d G "T0_DIV_128" 1 126 "6"
d G "T0_DIV_256" 1 127 "7"
d G "T0_8_BIT" 1 130 "0"
d G "RTCC_INTERNAL" 1 132 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 133 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 134 "48"
d G "RTCC_DIV_1" 1 135 "8"
d G "RTCC_DIV_2" 1 136 "0"
d G "RTCC_DIV_4" 1 137 "1"
d G "RTCC_DIV_8" 1 138 "2"
d G "RTCC_DIV_16" 1 139 "3"
d G "RTCC_DIV_32" 1 140 "4"
d G "RTCC_DIV_64" 1 141 "5"
d G "RTCC_DIV_128" 1 142 "6"
d G "RTCC_DIV_256" 1 143 "7"
d G "RTCC_8_BIT" 1 144 "0"
c L "get_rtcc" 1 5 7 "FUNCTION"
v L "mode" 1 154 "int16" `101 
f B "setup_wdt" 1 154 "void(int16 mode)" `100 
f B "restart_wdt" 1 155 "void()" `102  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 157 "0x1000"
d G "WDT_OFF" 1 158 "0x2000"
d G "WDT_1MS" 1 160 "0x100"
d G "WDT_2MS" 1 161 "0x101"
d G "WDT_4MS" 1 162 "0x102"
d G "WDT_8MS" 1 163 "0x103"
d G "WDT_16MS" 1 164 "0x104"
d G "WDT_32MS" 1 165 "0x105"
d G "WDT_64MS" 1 166 "0x106"
d G "WDT_128MS" 1 167 "0x107"
d G "WDT_256MS" 1 168 "0x108"
d G "WDT_512MS" 1 169 "0x109"
d G "WDT_1S" 1 170 "0x10A"
d G "WDT_2S" 1 171 "0x10B"
d G "WDT_4S" 1 172 "0x10C"
d G "WDT_8S" 1 173 "0x10D"
d G "WDT_16S" 1 174 "0x10E"
d G "WDT_32S" 1 175 "0x10F"
d G "WDT_64S" 1 176 "0x110"
d G "WDT_128S" 1 177 "0x111"
d G "WDT_256S" 1 178 "0x112"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 183 "int16" `104 
f B "setup_timer_1" 1 183 "void(int16 mode)" `103 
f B "get_timer1" 1 184 "int16()" `105 
v L "value" 1 185 "int16" `107 
f B "set_timer1" 1 185 "void(int16 value)" `106  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 188 "0"
d G "T1_CAPSENSE" 1 189 "0xC5"
d G "T1_EXTERNAL" 1 190 "0x85"
d G "T1_EXTERNAL_SYNC" 1 191 "0x81"
d G "T1_FOSC" 1 192 "0x45"
d G "T1_INTERNAL" 1 193 "0x05"
d G "T1_ENABLE_T1OSC" 1 195 "0x08"
d G "T1_DIV_BY_1" 1 197 "0x00"
d G "T1_DIV_BY_2" 1 198 "0x10"
d G "T1_DIV_BY_4" 1 199 "0x20"
d G "T1_DIV_BY_8" 1 200 "0x30"
d G "T1_GATE" 1 202 "0x8000"
d G "T1_GATE_INVERTED" 1 203 "0xC000"
d G "T1_GATE_TOGGLE" 1 204 "0xA000"
d G "T1_GATE_SINGLE" 1 205 "0x9000"
d G "T1_GATE_TIMER0" 1 206 "0x8100"
d G "T1_GATE_COMP1" 1 207 "0x8200"
d G "T1_GATE_COMP2" 1 208 "0x8300"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 213 "int8" `109 
v L "period" 1 213 "int8" `110 
v L "postscale" 1 213 "int8" `111 
f B "setup_timer_2" 1 213 "void(int8 mode,int8 period,int8 postscale)" `108 
f B "get_timer2" 1 214 "int8()" `112 
v L "value" 1 215 "int8" `114 
f B "set_timer2" 1 215 "void(int8 value)" `113  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 217 "0"
d G "T2_DIV_BY_1" 1 218 "4"
d G "T2_DIV_BY_4" 1 219 "5"
d G "T2_DIV_BY_16" 1 220 "6"
d G "T2_DIV_BY_64" 1 221 "7"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 227 "int32" `116 
f B "setup_ccp1" 1 227 "void(int32 mode)" `115 
v L "mode" 1 228 "int32" `118 
v L "pwm" 1 228 "int8" `119 
f G "setup_ccp1" 1 228 "void(int32 mode,int8 pwm)" `117 
v L "value" 1 229 "int16" `121 
f B "set_pwm1_duty" 1 229 "void(int16 value)" `120  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 231 "0"
d G "CCP_CAPTURE_FE" 1 232 "4"
d G "CCP_CAPTURE_RE" 1 233 "5"
d G "CCP_CAPTURE_DIV_4" 1 234 "6"
d G "CCP_CAPTURE_DIV_16" 1 235 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 236 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 237 "9"
d G "CCP_COMPARE_INT" 1 238 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 239 "0xB"
d G "CCP_PWM" 1 240 "0xC"
d G "CCP_PWM_PLUS_1" 1 241 "0x1c"
d G "CCP_PWM_PLUS_2" 1 242 "0x2c"
d G "CCP_PWM_PLUS_3" 1 243 "0x3c"
d G "CCP_PWM_H_H" 1 248 "0x0c"
d G "CCP_PWM_H_L" 1 249 "0x0d"
d G "CCP_PWM_L_H" 1 250 "0x0e"
d G "CCP_PWM_L_L" 1 251 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 253 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 254 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 255 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 257 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 258 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 259 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 260 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 261 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 262 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 263 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 265 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 266 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 267 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 269 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 270 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 271 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 273 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 275 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 276 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 277 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 278 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 279 "0x10000000"
d G "CCP_TIMER2" 1 282 "0x0000"
d G "CCP_TIMER4" 1 283 "0x1000"
d G "CCP_TIMER6" 1 284 "0x2000"
d G "CCP1_B3" 1 286 "0x00"
d G "CCP1_B0" 1 287 "0x100"
d G "CCP2_B6" 1 288 "0x00"
d G "CCP2_A7" 1 289 "0x100"
d G "CCP_P1A_B3" 1 290 "0x000"
d G "CCP_P1A_B0" 1 291 "0x100"
d G "CCP_P1C_B6" 1 292 "0x000"
d G "CCP_P1C_A7" 1 293 "0x200"
d G "CCP_P1D_B7" 1 294 "0x000"
d G "CCP_P1D_A6" 1 295 "0x400"
d G "CCP_P2B_B7" 1 296 "0x000"
d G "CCP_P2B_A6" 1 297 "0x200"
c L "set_pwm1_duty" 1 5 3 "FUNCTION"
v L "mode" 1 302 "int32" `126 
f B "setup_spi" 1 302 "void(int32 mode)" `125 
v L "value" 1 303 "int8" `128 
f B "spi_write" 1 303 "void(int8 value)" `127 
f B "spi_read" 1 304 "int8()" `129 
v L "value" 1 305 "int8" `131 
f G "spi_read" 1 305 "int8(int8 value)" `130 
f B "spi_data_in" 1 306 "int8()" `132  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 308 "0x00"
d G "SPI_MASTER" 1 309 "0x20"
d G "SPI_SLAVE" 1 310 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 311 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 312 "0x00"
d G "SPI_CLK_DIV_4" 1 313 "0x00"
d G "SPI_CLK_DIV_16" 1 314 "0x01"
d G "SPI_CLK_DIV_64" 1 315 "0x02"
d G "SPI_CLK_T2" 1 316 "0x03"
d G "SPI_SS_DISABLED" 1 317 "0x01"
d G "SPI_SS_B5" 1 319 "0x000"
d G "SPI_SS_A5" 1 320 "0x10000"
d G "SPI_DO_B2" 1 321 "0x000"
d G "SPI_DO_A6" 1 322 "0x20000"
d G "SPI_XMIT_L_TO_H" 1 324 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 325 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 327 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 328 "0x8000"
d G "SPI_L_TO_H" 1 331 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 332 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 336 "int32" `134 
f B "setup_uart" 1 336 "void(int32 baud)" `133 
v L "baud" 1 337 "int32" `136 
v L "stream" 1 337 "int8" `137 
f G "setup_uart" 1 337 "void(int32 baud,int8 stream)" `135 
v L "baud" 1 338 "int32" `139 
v L "stream" 1 338 "int8" `140 
v L "clock" 1 338 "int32" `141 
f G "setup_uart" 1 338 "void(int32 baud,int8 stream,int32 clock)" `138 
v L "baud" 1 339 "int32" `143 
f B "set_uart_speed" 1 339 "void(int32 baud)" `142 
v L "baud" 1 340 "int32" `145 
v L "stream" 1 340 "int8" `146 
f G "set_uart_speed" 1 340 "void(int32 baud,int8 stream)" `144 
v L "baud" 1 341 "int32" `148 
v L "stream" 1 341 "int8" `149 
v L "clock" 1 341 "int32" `150 
f G "set_uart_speed" 1 341 "void(int32 baud,int8 stream,int32 clock)" `147  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 345 "2"
d G "UART_DATA" 1 346 "4"
d G "UART_AUTODETECT" 1 347 "8"
d G "UART_AUTODETECT_NOWAIT" 1 348 "9"
d G "UART_WAKEUP_ON_RDA" 1 349 "10"
d G "UART_SEND_BREAK" 1 350 "13"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 354 "int32" `152 
f B "setup_comparator" 1 354 "void(int32 mode)" `151  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 357 "0x00"
d G "CP1_A0_A3" 1 360 "0x8000"
d G "CP1_A1_A3" 1 361 "0x8001"
d G "CP1_A2_A3" 1 362 "0x8002"
d G "CP1_A3_A3" 1 363 "0x8003"
d G "CP1_A0_DAC" 1 364 "0x8010"
d G "CP1_A1_DAC" 1 365 "0x8011"
d G "CP1_A2_DAC" 1 366 "0x8012"
d G "CP1_A3_DAC" 1 367 "0x8013"
d G "CP1_A0_FVR" 1 368 "0x8020"
d G "CP1_A1_FVR" 1 369 "0x8021"
d G "CP1_A2_FVR" 1 370 "0x8022"
d G "CP1_A3_FVR" 1 371 "0x8023"
d G "CP1_A0_A2" 1 372 "0x8030"
d G "CP1_A1_A2" 1 373 "0x8031"
d G "CP1_A2_A2" 1 374 "0x8032"
d G "CP1_A3_A2" 1 375 "0x8033"
d G "CP1_INT_H2L" 1 377 "0x0040"
d G "CP1_INT_L2H" 1 378 "0x0080"
d G "CP1_OUT_ON_A3" 1 379 "0x2000"
d G "CP1_INVERT" 1 380 "0x1000"
d G "CP1_FAST" 1 381 "0x0400"
d G "CP1_HYST" 1 382 "0x0200"
d G "CP1_SYNC" 1 383 "0x0100"
d G "CP2_A0_A2" 1 386 "0x80000000"
d G "CP2_A1_A2" 1 387 "0x80010000"
d G "CP2_A2_A2" 1 388 "0x80020000"
d G "CP2_A3_A2" 1 389 "0x80030000"
d G "CP2_A0_DAC" 1 390 "0x80100000"
d G "CP2_A1_DAC" 1 391 "0x80110000"
d G "CP2_A2_DAC" 1 392 "0x80120000"
d G "CP2_A3_DAC" 1 393 "0x80130000"
d G "CP2_A0_FVR" 1 394 "0x80200000"
d G "CP2_A1_FVR" 1 395 "0x80210000"
d G "CP2_A2_FVR" 1 396 "0x80220000"
d G "CP2_A3_FVR" 1 397 "0x80230000"
d G "CP2_A0_VSS" 1 398 "0x80300000"
d G "CP2_A1_VSS" 1 399 "0x80310000"
d G "CP2_A2_VSS" 1 400 "0x80320000"
d G "CP2_A3_VSS" 1 401 "0x80330000"
d G "CP2_INT_H2L" 1 403 "0x00400000"
d G "CP2_INT_L2H" 1 404 "0x00800000"
d G "CP2_OUT_ON_A4" 1 405 "0x20000000"
d G "CP2_INVERT" 1 406 "0x10000000"
d G "CP2_FAST" 1 407 "0x04000000"
d G "CP2_HYST" 1 408 "0x02000000"
d G "CP2_SYNC" 1 409 "0x01000000"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 416 "int8" `156 
f B "setup_vref" 1 416 "void(int8 mode)" `155  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 418 "0"
d G "VREF_ON" 1 419 "0x80"
d G "VREF_ADC_OFF" 1 421 "0"
d G "VREF_ADC_1v024" 1 422 "0x01"
d G "VREF_ADC_2v048" 1 423 "0x02"
d G "VREF_ADC_4v096" 1 424 "0x03"
d G "VREF_COMP_DAC_OFF" 1 426 "0"
d G "VREF_COMP_DAC_1v024" 1 427 "0x04"
d G "VREF_COMP_DAC_2v048" 1 428 "0x08"
d G "VREF_COMP_DAC_4v096" 1 429 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 431 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 432 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 433 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 434 "0x10"
c L "setup_vref" 1 5 3 "FUNCTION"
v L "mode" 1 439 "int8" `158 
f B "setup_dac" 1 439 "void(int8 mode)" `157 
v L "value" 1 440 "int8" `160 
f B "dac_write" 1 440 "void(int8 value)" `159  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 442 "0"
d G "DAC_VSS_VDD" 1 443 "0x80"
d G "DAC_VREF_VDD" 1 444 "0x81"
d G "DAC_VSS_VREF" 1 445 "0x84"
d G "DAC_VREF_VREF" 1 446 "0x85"
d G "DAC_VSS_FVR" 1 447 "0x88"
d G "DAC_FVR_VREF" 1 448 "0x89"
d G "DAC_OUTPUT" 1 450 "0x20"
d G "DAC_LVP_POS" 1 451 "0x40"
d G "DAC_LVP_NEG" 1 452 "0"
c L "dac_write" 1 5 2 "FUNCTION"
v L "mode" 1 457 "int8" `162 
f B "setup_oscillator" 1 457 "void(int8 mode)" `161  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 460 "0"
d G "OSC_31250" 1 461 " (2*8)"
d G "OSC_62KHZ" 1 462 " (4*8)"
d G "OSC_125KHZ" 1 463 " (5*8)"
d G "OSC_250KHZ" 1 464 " (6*8)"
d G "OSC_500KHZ" 1 465 " (7*8)"
d G "OSC_1MHZ" 1 466 " (11*8)"
d G "OSC_2MHZ" 1 467 " (12*8)"
d G "OSC_4MHZ" 1 468 " (13*8)"
d G "OSC_8MHZ" 1 469 " (14*8)"
d G "OSC_16MHZ" 1 470 " (15*8)"
d G "OSC_TIMER1" 1 472 "1"
d G "OSC_INTRC" 1 473 "2"
d G "OSC_NORMAL" 1 474 "0"
d G "OSC_PLL_ON" 1 476 "0x80"
d G "OSC_PLL_OFF" 1 477 "0"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 484 "int16" `164 
f B "setup_adc" 1 484 "void(int16 mode)" `163 
f B "read_adc" 1 485 "int8()" `165 
v L "mode" 1 486 "int8" `167 
f G "read_adc" 1 486 "int8(int8 mode)" `166 
f G "read_adc" 1 487 "int16()" `168 
v L "mode" 1 488 "int8" `170 
f G "read_adc" 1 488 "int16(int8 mode)" `169 
f B "adc_done" 1 489 "int8()" `171  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 491 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 492 "0x100"
d G "ADC_CLOCK_DIV_4" 1 493 "0x40"
d G "ADC_CLOCK_DIV_8" 1 494 "0x10"
d G "ADC_CLOCK_DIV_32" 1 495 "0x20"
d G "ADC_CLOCK_DIV_16" 1 496 "0x50"
d G "ADC_CLOCK_DIV_64" 1 497 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 498 "0x30" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 501 "int32" `173 
f B "setup_adc_ports" 1 501 "void(int32 pins)" `172 
v L "pins" 1 502 "int32" `175 
v L "reference" 1 502 "int32" `176 
f G "setup_adc_ports" 1 502 "void(int32 pins,int32 reference)" `174 
v L "channel" 1 503 "int8" `178 
f B "set_adc_channel" 1 503 "void(int8 channel)" `177  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 507 "0x000100" "| A0"
d G "sAN1" 1 508 "0x000200" "| A1"
d G "sAN2" 1 509 "0x000400" "| A2"
d G "sAN3" 1 510 "0x000800" "| A3"
d G "sAN4" 1 511 "0x001000" "| A4"
d G "sAN5" 1 512 "0x000040" "| B6"
d G "sAN6" 1 513 "0x000080" "| B7"
d G "sAN7" 1 514 "0x000020" "| B5"
d G "sAN8" 1 515 "0x000010" "| B4"
d G "sAN9" 1 516 "0x000008" "| B3"
d G "sAN10" 1 517 "0x000004" "| B2"
d G "sAN11" 1 518 "0x000002" "| B1"
d G "NO_ANALOGS" 1 519 "0" "None"
d G "ALL_ANALOG" 1 520 "0x001FFE" "A0 A1 A2 A3 A4 B6 B7 B5 B4 B3 B2 B1"
d G "VSS_VDD" 1 523 "0x000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 524 "0x020000" "| Range 0-VrefH"
d G "VSS_FVR" 1 525 "0x030000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 526 "0x040000" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 527 "0x060000" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 528 "0x070000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 532 "0x1D"
d G "DAC_CHANNEL" 1 533 "0x1E"
d G "FVR_CHANNEL" 1 534 "0x1F"
d G "ADC_START_AND_READ" 1 537 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 538 "1"
d G "ADC_READ_ONLY" 1 539 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 545 "sint8" `180 
f B "abs" 1 545 "sint8(sint8 x)" `179 
v L "x" 1 546 "sint16" `182 
f G "abs" 1 546 "sint16(sint16 x)" `181 
v L "x" 1 547 "sint32" `184 
f G "abs" 1 547 "sint32(sint32 x)" `183 
v L "x" 1 548 "float" `186 
f G "abs" 1 548 "float(float x)" `185 
v L "??65535" 1 549 "int8" `188 
v L "??65535" 1 549 "int8" `189 
f B "_mul" 1 549 "int16(int8 ,int8 )" `187 
v L "??65535" 1 550 "sint8" `188 
v L "??65535" 1 550 "sint8" `192 
f G "_mul" 1 550 "sint16(sint8 ,sint8 )" `190 
v L "??65535" 1 551 "int16" `188 
v L "??65535" 1 551 "int16" `195 
f G "_mul" 1 551 "int32(int16 ,int16 )" `193 
v L "??65535" 1 552 "sint16" `188 
v L "??65535" 1 552 "sint16" `198 
f G "_mul" 1 552 "sint32(sint16 ,sint16 )" `196  "Memory Manipulation Prototypes:"
v L "bank" 1 555 "int8" `200 
v L "offset" 1 555 "int8" `201 
f B "read_bank" 1 555 "int8(int8 bank,int8 offset)" `199 
v L "bank" 1 556 "int8" `203 
v L "offset" 1 556 "int8" `204 
v L "value" 1 556 "int8" `205 
f B "write_bank" 1 556 "void(int8 bank,int8 offset,int8 value)" `202 
v L "dest" 1 557 "*int8" `207 
v L "src" 1 557 "*int8" `208 
f B "strcpy" 1 557 "void(*int8 dest,*int8 src)" `206 
v L "dest" 1 558 "*int8" `210 
v L "src" 1 558 "*int8" `211 
f B "strcopy" 1 558 "void(*int8 dest,*int8 src)" `209 
v L "destination" 1 559 "*int8" `213 
v L "value" 1 559 "int8" `214 
v L "num" 1 559 "int16" `215 
f B "memset" 1 559 "void(*int8 destination,int8 value,int16 num)" `212 
v L "destination" 1 560 "*int8" `217 
v L "source" 1 560 "*int8" `218 
v L "num" 1 560 "int16" `219 
f B "memcpy" 1 560 "void(*int8 destination,*int8 source,int16 num)" `216  "String Prototypes:"
v L "cvalue" 1 563 "int8" `221 
f B "toupper" 1 563 "int8(int8 cvalue)" `220 
v L "cvalue" 1 564 "int8" `223 
f B "tolower" 1 564 "int8(int8 cvalue)" `222 
v L "string" 1 565 "*int8" `225 
v L "cstring" 1 565 "*int8" `226 
f B "sprintf" 1 565 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `224  "Data Manipulators Prototypes:"
v L "address" 1 568 "*int8" `229 
v L "bytes" 1 568 "int8" `230 
v L "value" 1 568 "int8" `231 
f B "shift_left" 1 568 "int8(*int8 address,int8 bytes,int8 value)" `228 
v L "address" 1 569 "*int8" `233 
v L "bytes" 1 569 "int8" `234 
v L "value" 1 569 "int8" `235 
f B "shift_right" 1 569 "int8(*int8 address,int8 bytes,int8 value)" `232 
v L "address" 1 570 "*int8" `237 
v L "bytes" 1 570 "int8" `238 
f B "rotate_left" 1 570 "void(*int8 address,int8 bytes)" `236 
v L "address" 1 571 "*int8" `240 
v L "bytes" 1 571 "int8" `241 
f B "rotate_right" 1 571 "void(*int8 address,int8 bytes)" `239 
v L "value" 1 572 "int8" `243 
f B "swap" 1 572 "void(int8 value)" `242 
v L "var" 1 573 "int16" `245 
v L "offset" 1 573 "int8" `246 
f B "make8" 1 573 "int8(int16 var,int8 offset)" `244 
v L "var" 1 574 "int32" `245 
v L "offset" 1 574 "int8" `249 
f G "make8" 1 574 "int8(int32 var,int8 offset)" `247 
v L "varhigh" 1 575 "int8" `251 
v L "varlow" 1 575 "int8" `252 
f B "make16" 1 575 "int16(int8 varhigh,int8 varlow)" `250 
v L "var1" 1 576 "int16" `254 
f B "make32" 1 576 "int32(int16 var1)" `253 
v L "var1" 1 577 "int16" `256 
v L "var2" 1 577 "int16" `257 
f G "make32" 1 577 "int32(int16 var1,int16 var2)" `255 
v L "var1" 1 578 "int16" `256 
v L "var2" 1 578 "int8" `260 
f G "make32" 1 578 "int32(int16 var1,int8 var2)" `258 
v L "var1" 1 579 "int16" `262 
v L "var2" 1 579 "int8" `263 
v L "var3" 1 579 "int8" `264 
f G "make32" 1 579 "int32(int16 var1,int8 var2,int8 var3)" `261 
v L "var1" 1 580 "int8" `266 
f G "make32" 1 580 "int32(int8 var1)" `265 
v L "var1" 1 581 "int8" `256 
v L "var2" 1 581 "int8" `269 
f G "make32" 1 581 "int32(int8 var1,int8 var2)" `267 
v L "var1" 1 582 "int8" `262 
v L "var2" 1 582 "int8" `263 
v L "var3" 1 582 "int8" `273 
f G "make32" 1 582 "int32(int8 var1,int8 var2,int8 var3)" `270 
v L "var1" 1 583 "int8" `275 
v L "var2" 1 583 "int8" `276 
v L "var3" 1 583 "int8" `277 
v L "var4" 1 583 "int8" `278 
f G "make32" 1 583 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `274 
v L "var1" 1 584 "int8" `256 
v L "var2" 1 584 "int16" `281 
f G "make32" 1 584 "int32(int8 var1,int16 var2)" `279 
v L "var1" 1 585 "int8" `262 
v L "var2" 1 585 "int16" `263 
v L "var3" 1 585 "int8" `285 
f G "make32" 1 585 "int32(int8 var1,int16 var2,int8 var3)" `282 
v L "var1" 1 586 "int8" `262 
v L "var2" 1 586 "int8" `263 
v L "var3" 1 586 "int16" `289 
f G "make32" 1 586 "int32(int8 var1,int8 var2,int16 var3)" `286 
v L "var" 1 587 "int8" `291 
v L "bit" 1 587 "int8" `292 
f B "bit_set" 1 587 "void(int8 var,int8 bit)" `290 
v L "var" 1 588 "int16" `291 
v L "bit" 1 588 "int8" `295 
f G "bit_set" 1 588 "void(int16 var,int8 bit)" `293 
v L "var" 1 589 "int32" `291 
v L "bit" 1 589 "int8" `298 
f G "bit_set" 1 589 "void(int32 var,int8 bit)" `296 
v L "var" 1 590 "int8" `300 
v L "bit" 1 590 "int8" `301 
f B "bit_clear" 1 590 "void(int8 var,int8 bit)" `299 
v L "var" 1 591 "int16" `300 
v L "bit" 1 591 "int8" `304 
f G "bit_clear" 1 591 "void(int16 var,int8 bit)" `302 
v L "var" 1 592 "int32" `300 
v L "bit" 1 592 "int8" `307 
f G "bit_clear" 1 592 "void(int32 var,int8 bit)" `305 
v L "var" 1 593 "int8" `309 
v L "bit" 1 593 "int8" `310 
f B "bit_test" 1 593 "int8(int8 var,int8 bit)" `308 
v L "var" 1 594 "int16" `309 
v L "bit" 1 594 "int8" `313 
f G "bit_test" 1 594 "int8(int16 var,int8 bit)" `311 
v L "var" 1 595 "int32" `309 
v L "bit" 1 595 "int8" `316 
f G "bit_test" 1 595 "int8(int32 var,int8 bit)" `314  "#use delay() Prototypes:"
v L "count" 1 598 "int8" `318 
f B "delay_cycles" 1 598 "void(int8 count)" `317 
v L "time" 1 599 "int16" `320 
f B "delay_ms" 1 599 "void(int16 time)" `319 
v L "time" 1 600 "int16" `322 
f B "delay_us" 1 600 "void(int16 time)" `321  "#use rs232() Prototypes:"
v L "cdata" 1 603 "int8" `324 
f B "putchar" 1 603 "void(int8 cdata)" `323 
v L "cdata" 1 604 "int8" `326 
v L "stream" 1 604 "int8" `327 
f G "putchar" 1 604 "void(int8 cdata,int8 stream)" `325 
v L "string" 1 605 "*int8" `329 
f B "puts" 1 605 "void(*int8 string)" `328 
v L "string" 1 606 "*int8" `331 
v L "stream" 1 606 "int8" `332 
f G "puts" 1 606 "void(*int8 string,int8 stream)" `330 
f B "getch" 1 607 "int8()" `333 
v L "stream" 1 608 "int8" `335 
f G "getch" 1 608 "int8(int8 stream)" `334 
v L "string" 1 609 "*int8" `337 
f B "gets" 1 609 "void(*int8 string)" `336 
v L "string" 1 610 "*int8" `339 
v L "stream" 1 610 "int8" `340 
f G "gets" 1 610 "void(*int8 string,int8 stream)" `338 
f B "kbhit" 1 611 "int8()" `341 
v L "stream" 1 612 "int8" `343 
f G "kbhit" 1 612 "int8(int8 stream)" `342 
v L "string" 1 613 "*int8" `345 
f B "printf" 1 613 "void(*int8 string,*int8 _VA_LIST)" `344 
v L "stream" 1 614 "int8" `348 
v L "string" 1 614 "*int8" `349 
f B "fprintf" 1 614 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `347 
f B "putc_send" 1 615 "void()" `351 
v L "stream" 1 616 "int8" `353 
f B "fputc_send" 1 616 "void(int8 stream)" `352 
f B "rcv_buffer_full" 1 617 "int8()" `354 
v L "stream" 1 618 "int8" `356 
f G "rcv_buffer_full" 1 618 "int8(int8 stream)" `355 
f B "rcv_buffer_bytes" 1 619 "int16()" `357 
v L "stream" 1 620 "int8" `359 
f G "rcv_buffer_bytes" 1 620 "int16(int8 stream)" `358 
f B "tx_buffer_full" 1 621 "int8()" `360 
v L "stream" 1 622 "int8" `362 
f G "tx_buffer_full" 1 622 "int8(int8 stream)" `361 
f B "tx_buffer_bytes" 1 623 "int16()" `363 
v L "stream" 1 624 "int8" `365 
f G "tx_buffer_bytes" 1 624 "int16(int8 stream)" `364  "#use i2c() Prototypes:"
f B "i2c_read" 1 627 "int8()" `366 
v L "stream" 1 628 "int8" `368 
f G "i2c_read" 1 628 "int8(int8 stream)" `367 
v L "stream" 1 629 "int8" `370 
v L "ack" 1 629 "int8" `371 
f G "i2c_read" 1 629 "int8(int8 stream,int8 ack)" `369 
v L "data" 1 630 "int8" `373 
f B "i2c_write" 1 630 "int8(int8 data)" `372 
v L "stream" 1 631 "int8" `375 
v L "data" 1 631 "int8" `376 
f G "i2c_write" 1 631 "int8(int8 stream,int8 data)" `374 
f B "i2c_start" 1 632 "void()" `377 
v L "stream" 1 633 "int8" `379 
f G "i2c_start" 1 633 "void(int8 stream)" `378 
v L "stream" 1 634 "int8" `381 
v L "restart" 1 634 "int8" `382 
f G "i2c_start" 1 634 "void(int8 stream,int8 restart)" `380 
f B "i2c_stop" 1 635 "void()" `383 
v L "stream" 1 636 "int8" `385 
f G "i2c_stop" 1 636 "void(int8 stream)" `384 
f B "i2c_isr_state" 1 637 "int8()" `386 
v L "addr" 1 638 "int8" `388 
f B "i2c_slaveaddr" 1 638 "void(int8 addr)" `387 
v L "stream" 1 639 "int8" `390 
v L "addr" 1 639 "int8" `391 
f G "i2c_slaveaddr" 1 639 "void(int8 stream,int8 addr)" `389 
f B "i2c_poll" 1 640 "int8()" `392 
v L "stream" 1 641 "int8" `394 
f G "i2c_poll" 1 641 "int8(int8 stream)" `393 
v L "baud" 1 642 "int32" `396 
f B "i2c_init" 1 642 "void(int32 baud)" `395 
v L "stream" 1 643 "int8" `398 
v L "baud" 1 643 "int32" `399 
f G "i2c_init" 1 643 "void(int8 stream,int32 baud)" `397  "#use spi() Prototypes:"
f B "spi_xfer" 1 646 "int8()" `400 
f G "spi_xfer" 1 647 "int16()" `401 
f G "spi_xfer" 1 648 "int32()" `402 
v L "data" 1 649 "int8" `404 
f G "spi_xfer" 1 649 "int8(int8 data)" `403 
v L "data" 1 650 "int16" `406 
f G "spi_xfer" 1 650 "int16(int16 data)" `405 
v L "data" 1 651 "int32" `408 
f G "spi_xfer" 1 651 "int32(int32 data)" `407 
v L "stream" 1 652 "int8" `410 
v L "data" 1 652 "int8" `411 
f G "spi_xfer" 1 652 "int8(int8 stream,int8 data)" `409 
v L "stream" 1 653 "int8" `410 
v L "data" 1 653 "int16" `414 
f G "spi_xfer" 1 653 "int16(int8 stream,int16 data)" `412 
v L "stream" 1 654 "int8" `410 
v L "data" 1 654 "int32" `417 
f G "spi_xfer" 1 654 "int32(int8 stream,int32 data)" `415 
v L "stream" 1 655 "int8" `419 
v L "data" 1 655 "int8" `420 
v L "bits" 1 655 "int8" `421 
f G "spi_xfer" 1 655 "int8(int8 stream,int8 data,int8 bits)" `418 
v L "stream" 1 656 "int8" `419 
v L "data" 1 656 "int16" `420 
v L "bits" 1 656 "int8" `425 
f G "spi_xfer" 1 656 "int16(int8 stream,int16 data,int8 bits)" `422 
v L "stream" 1 657 "int8" `419 
v L "data" 1 657 "int32" `420 
v L "bits" 1 657 "int8" `429 
f G "spi_xfer" 1 657 "int32(int8 stream,int32 data,int8 bits)" `426 
v L "baud" 1 658 "int32" `431 
f B "spi_init" 1 658 "void(int32 baud)" `430 
v L "stream" 1 659 "int8" `433 
v L "baud" 1 659 "int32" `434 
f G "spi_init" 1 659 "void(int8 stream,int32 baud)" `432 
v L "baud" 1 660 "int32" `436 
f B "spi_speed" 1 660 "void(int32 baud)" `435 
v L "stream" 1 661 "int8" `438 
v L "baud" 1 661 "int32" `439 
f G "spi_speed" 1 661 "void(int8 stream,int32 baud)" `437 
v L "stream" 1 662 "int8" `441 
v L "baud" 1 662 "int32" `442 
v L "clock" 1 662 "int32" `443 
f G "spi_speed" 1 662 "void(int8 stream,int32 baud,int32 clock)" `440 
v L "data" 1 663 "int8" `445 
f B "spi_prewrite" 1 663 "void(int8 data)" `444 
v L "data" 1 664 "int16" `447 
f G "spi_prewrite" 1 664 "void(int16 data)" `446 
v L "data" 1 665 "int32" `449 
f G "spi_prewrite" 1 665 "void(int32 data)" `448 
v L "??65535" 1 666 "int8" `451 
v L "data" 1 666 "int8" `452 
f G "spi_prewrite" 1 666 "void(int8 ,int8 data)" `450 
v L "??65535" 1 667 "int8" `451 
v L "data" 1 667 "int16" `455 
f G "spi_prewrite" 1 667 "void(int8 ,int16 data)" `453 
v L "??65535" 1 668 "int8" `451 
v L "data" 1 668 "int32" `458 
f G "spi_prewrite" 1 668 "void(int8 ,int32 data)" `456 
f B "spi_xfer_in" 1 669 "int8()" `459 
f G "spi_xfer_in" 1 670 "int16()" `460 
f G "spi_xfer_in" 1 671 "int32()" `461 
v L "bits" 1 672 "int8" `463 
f G "spi_xfer_in" 1 672 "int8(int8 bits)" `462 
v L "bits" 1 673 "int8" `465 
f G "spi_xfer_in" 1 673 "int16(int8 bits)" `464 
v L "bits" 1 674 "int8" `467 
f G "spi_xfer_in" 1 674 "int32(int8 bits)" `466 
v L "stream" 1 675 "int8" `469 
v L "bits" 1 675 "int8" `470 
f G "spi_xfer_in" 1 675 "int8(int8 stream,int8 bits)" `468 
v L "stream" 1 676 "int8" `469 
v L "bits" 1 676 "int8" `473 
f G "spi_xfer_in" 1 676 "int16(int8 stream,int8 bits)" `471 
v L "stream" 1 677 "int8" `469 
v L "bits" 1 677 "int8" `476 
f G "spi_xfer_in" 1 677 "int32(int8 stream,int8 bits)" `474  "#use rtos() Prototypes:"
f B "rtos_run" 1 680 "void()" `477 
f B "rtos_yield" 1 681 "void()" `478 
v L "task" 1 682 "int8" `480 
f B "rtos_enable" 1 682 "void(int8 task)" `479 
v L "task" 1 683 "int8" `482 
f B "rtos_disable" 1 683 "void(int8 task)" `481 
f B "rtos_terminate" 1 684 "void()" `483 
v L "flag" 1 685 "int8" `485 
f B "rtos_await" 1 685 "void(int8 flag)" `484 
v L "sem" 1 686 "int8" `487 
f B "rtos_wait" 1 686 "void(int8 sem)" `486 
v L "sem" 1 687 "int8" `489 
f B "rtos_signal" 1 687 "void(int8 sem)" `488 
v L "task" 1 688 "int8" `491 
v L "msg" 1 688 "int8" `492 
f B "rtos_msg_send" 1 688 "void(int8 task,int8 msg)" `490 
f B "rtos_msg_read" 1 689 "int8()" `493 
f B "rtos_msg_poll" 1 690 "int8()" `494 
v L "task" 1 691 "int8" `496 
f B "rtos_overrun" 1 691 "int8(int8 task)" `495 
v L "task" 1 692 "int8" `498 
v L "stat" 1 692 "*int8" `499 
f B "rtos_stats" 1 692 "void(int8 task,*int8 stat)" `497  "#use timer() Prototypes:"
f B "get_ticks" 1 695 "int8()" `500 
f G "get_ticks" 1 696 "int16()" `501 
f G "get_ticks" 1 697 "int32()" `502 
v L "stream" 1 698 "int8" `504 
f G "get_ticks" 1 698 "int8(int8 stream)" `503 
v L "stream" 1 699 "int8" `506 
f G "get_ticks" 1 699 "int16(int8 stream)" `505 
v L "stream" 1 700 "int8" `508 
f G "get_ticks" 1 700 "int32(int8 stream)" `507 
v L "value" 1 701 "int8" `510 
f B "set_ticks" 1 701 "void(int8 value)" `509 
v L "value" 1 702 "int16" `512 
f G "set_ticks" 1 702 "void(int16 value)" `511 
v L "value" 1 703 "int32" `514 
f G "set_ticks" 1 703 "void(int32 value)" `513 
v L "stream" 1 704 "int8" `516 
v L "value" 1 704 "int8" `517 
f G "set_ticks" 1 704 "void(int8 stream,int8 value)" `515 
v L "stream" 1 705 "int8" `516 
v L "value" 1 705 "int16" `520 
f G "set_ticks" 1 705 "void(int8 stream,int16 value)" `518 
v L "stream" 1 706 "int8" `516 
v L "value" 1 706 "int32" `523 
f G "set_ticks" 1 706 "void(int8 stream,int32 value)" `521  "#use pwm() Prototypes:"
f B "pwm_on" 1 709 "void()" `524 
v L "stream" 1 710 "int8" `526 
f G "pwm_on" 1 710 "void(int8 stream)" `525 
f B "pwm_off" 1 711 "void()" `527 
v L "stream" 1 712 "int8" `529 
f G "pwm_off" 1 712 "void(int8 stream)" `528 
v L "duty" 1 713 "int16" `531 
f B "pwm_set_duty" 1 713 "void(int16 duty)" `530 
v L "stream" 1 714 "int8" `533 
v L "duty" 1 714 "int16" `534 
f G "pwm_set_duty" 1 714 "void(int8 stream,int16 duty)" `532 
v L "percent" 1 715 "int16" `536 
f B "pwm_set_duty_percent" 1 715 "void(int16 percent)" `535 
v L "stream" 1 716 "int8" `538 
v L "percent" 1 716 "int16" `539 
f G "pwm_set_duty_percent" 1 716 "void(int8 stream,int16 percent)" `537 
v L "frequency" 1 717 "int32" `541 
f B "pwm_set_frequency" 1 717 "void(int32 frequency)" `540 
v L "stream" 1 718 "int8" `543 
v L "frequency" 1 718 "int32" `544 
f G "pwm_set_frequency" 1 718 "void(int8 stream,int32 frequency)" `542  "#use capture() Prototypes:"
f B "get_capture_time" 1 721 "int16()" `545 
v L "stream" 1 722 "int8" `547 
f G "get_capture_time" 1 722 "int16(int8 stream)" `546 
f B "get_capture_event" 1 723 "int8()" `548 
v L "stream" 1 724 "int8" `550 
f G "get_capture_event" 1 724 "int8(int8 stream)" `549  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 737 "int16" `552 
f B "goto_address" 1 737 "void(int16 address)" `551 
v L "label" 1 738 "int16" `554 
f B "label_address" 1 738 "int16(int16 label)" `553  "Program Memory Prototypes:"
v L "address" 1 741 "int16" `556 
v L "dataptr" 1 741 "*int8" `557 
v L "count" 1 741 "int16" `558 
f B "read_program_memory" 1 741 "void(int16 address,*int8 dataptr,int16 count)" `555 
v L "address" 1 742 "int16" `560 
f B "read_program_eeprom" 1 742 "int16(int16 address)" `559 
v L "address" 1 743 "int16" `562 
f B "erase_program_eeprom" 1 743 "void(int16 address)" `561 
v L "address" 1 744 "int16" `564 
v L "dataptr" 1 744 "*int8" `565 
v L "count" 1 744 "int16" `566 
f B "write_program_memory" 1 744 "void(int16 address,*int8 dataptr,int16 count)" `563 
v L "address" 1 745 "int16" `568 
v L "data" 1 745 "int16" `569 
f B "write_program_eeprom" 1 745 "void(int16 address,int16 data)" `567  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 750 "int16" `570 
v L "address" 1 755 "__EEADDRESS__" `572 
f B "read_eeprom" 1 755 "int8(__EEADDRESS__ address)" `571 
v L "address" 1 756 "__EEADDRESS__" `574 
v L "value" 1 756 "int8" `575 
f B "write_eeprom" 1 756 "void(__EEADDRESS__ address,int8 value)" `573  "#use touchpad() Prototypes:"
v L "state" 1 759 "int8" `577 
f B "touchpad_state" 1 759 "void(int8 state)" `576 
f B "touchpad_getc" 1 760 "int8()" `578 
f B "touchpad_hit" 1 761 "int8()" `579  "INT"
c L "touchpad_hit" 1 5 4 "FUNCTION"
v L "interrupt" 1 767 "int32" `581 
f B "enable_interrupts" 1 767 "void(int32 interrupt)" `580 
v L "interrupt" 1 768 "int32" `583 
f B "disable_interrupts" 1 768 "void(int32 interrupt)" `582 
v L "interrupt" 1 769 "int32" `585 
f B "clear_interrupt" 1 769 "void(int32 interrupt)" `584 
v L "interrupt" 1 770 "int32" `587 
f B "interrupt_active" 1 770 "int8(int32 interrupt)" `586 
v L "source" 1 771 "int8" `589 
v L "edge" 1 771 "int8" `590 
f B "ext_int_edge" 1 771 "void(int8 source,int8 edge)" `588 
v L "address" 1 772 "int16" `592 
f B "jump_to_irs" 1 772 "void(int16 address)" `591  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 774 "0x40"
d G "H_TO_L" 1 775 "0"
d G "GLOBAL" 1 777 "0x0BC0"
d G "PERIPH" 1 778 "0x0B40"
d G "INT_RB" 1 779 "0x31FF0B08"
d G "INT_EXT_L2H" 1 780 "0x50000B10"
d G "INT_EXT_H2L" 1 781 "0x60000B10"
d G "INT_EXT" 1 782 "0x300B10"
d G "INT_TIMER0" 1 783 "0x300B20"
d G "INT_TIMER1" 1 784 "0x309101"
d G "INT_TIMER2" 1 785 "0x309102"
d G "INT_CCP1" 1 786 "0x309104"
d G "INT_SSP" 1 787 "0x309108"
d G "INT_TBE" 1 788 "0x309110"
d G "INT_RDA" 1 789 "0x309120"
d G "INT_AD" 1 790 "0x309140"
d G "INT_TIMER1_GATE" 1 791 "0x309180"
d G "INT_BUSCOL" 1 792 "0x309208"
d G "INT_EEPROM" 1 793 "0x309210"
d G "INT_COMP" 1 794 "0x309220"
d G "INT_COMP2" 1 795 "0x309240"
d G "INT_OSC_FAIL" 1 796 "0x309280"
d G "INT_SSP2" 1 797 "0x309401"
d G "INT_BCL2" 1 798 "0x309402"
d G "INT_RB0" 1 799 "0x31010B08"
d G "INT_RB0_L2H" 1 800 "0x11010B08"
d G "INT_RB0_H2L" 1 801 "0x21010B08"
d G "INT_RB1" 1 802 "0x31020B08"
d G "INT_RB1_L2H" 1 803 "0x11020B08"
d G "INT_RB1_H2L" 1 804 "0x21020B08"
d G "INT_RB2" 1 805 "0x31040B08"
d G "INT_RB2_L2H" 1 806 "0x11040B08"
d G "INT_RB2_H2L" 1 807 "0x21040B08"
d G "INT_RB3" 1 808 "0x31080B08"
d G "INT_RB3_L2H" 1 809 "0x11080B08"
d G "INT_RB3_H2L" 1 810 "0x21080B08"
d G "INT_RB4" 1 811 "0x31100B08"
d G "INT_RB4_L2H" 1 812 "0x11100B08"
d G "INT_RB4_H2L" 1 813 "0x21100B08"
d G "INT_RB5" 1 814 "0x31200B08"
d G "INT_RB5_L2H" 1 815 "0x11200B08"
d G "INT_RB5_H2L" 1 816 "0x21200B08"
d G "INT_RB6" 1 817 "0x31400B08"
d G "INT_RB6_L2H" 1 818 "0x11400B08"
d G "INT_RB6_H2L" 1 819 "0x21400B08"
d G "INT_RB7" 1 820 "0x31800B08"
d G "INT_RB7_L2H" 1 821 "0x11800B08"
d G "INT_RB7_H2L" 1 822 "0x21800B08"
D G "DRV_STEP" 0 18 "PIN_A0" "Step output pin"
D G "DRV_RESET" 0 19 "PIN_A1" "Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.)"
D G "LM_UP" 0 20 "PIN_A2" "Up limit switch input pin"
D G "LM_DOWN" 0 21 "PIN_A3" "Down limit switch input pin"
D G "DRV_DIR" 0 22 "PIN_A4" "Direction output pin"
D G "SPI_SDO" 0 24 "PIN_A6" "SPI data output pin"
D G "SPI_CS" 0 25 "PIN_A7" "SPI chip select output pin"
D G "BT_DOWN" 0 27 "PIN_B0" "Down button input pin"
D G "SPI_SDI" 0 28 "PIN_B1" "SPI data input pin"
D G "BT_UP" 0 30 "PIN_B3" "Up button input pin"
D G "SPI_SCK" 0 31 "PIN_B4" "SPI clock output pin"
D G "DRV_STALL" 0 33 "PIN_B6" "Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut)"
D G "DRV_FAULT" 0 34 "PIN_B7" "Fault input pin from driver (Logic low when in fault condition. Pull up mevcut)"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 2 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 2 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 2 "FUNCTION"
C L "jump_to_irs" 0 17 2 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
C L "jump_to_irs" 0 17 2 "FUNCTION"
C L "jump_to_irs" 0 17 1 "FUNCTION"
E G "OFF" 0 82 "0" `621 
E G "ON" 0 82 "1" `622  "Motor states"
E G "UP" 0 83 "0" `624 
E G "DOWN" 0 83 "1" `625  "Direction of motion"
E G "ACC" 0 84 "0" `627 
E G "WALK" 0 84 "1" `628 
E G "RUN" 0 84 "2" `629 
E G "DEC" 0 84 "3" `630 
E G "STEADY" 0 84 "4" `631  "State of the motion"
V G "step_count" 0 86 "int16" `632 
V G "run_lim" 0 87 "int16" `633 
C L "jump_to_irs" 0 17 1 "FUNCTION"
V G "acc_lim" 0 88 "int16" `635 
C L "jump_to_irs" 0 17 1 "FUNCTION"
V G "periods" 0 89 "[285]" `637 
V G "off_time" 0 103 "int8" `640 
C L "jump_to_irs" 0 17 1 "FUNCTION"
V G "motion_state" 0 104 "int8" `642 
C L "jump_to_irs" 0 17 1 "FUNCTION"
F G "set_SPI" 0 107 "void()" `643  "Disable SPI to set registers"
C L "set_SPI" 0 17 1 "FUNCTION"
C L "set_SPI" 0 17 1 "FUNCTION"
C L "set_SPI" 0 17 1 "FUNCTION"
C L "set_SPI" 0 17 1 "FUNCTION"
C L "set_SPI" 0 17 1 "FUNCTION"
F G "set_variables" 0 127 "void()" `644 
C L "set_variables" 0 17 1 "FUNCTION"
C L "set_variables" 0 17 1 "FUNCTION"
F G "set_pins" 0 133 "void()" `645  "Set RB2 as RX pin"
C L "set_pins" 0 17 2 "FUNCTION"
C L "set_pins" 0 17 1 "FUNCTION"
C L "set_pins" 0 17 2 "FUNCTION"
C L "md_set_state" 0 17 1 "FUNCTION"
V L "value" 0 146 "int8" `647 
F G "md_set_state" 0 147 "void(int8 value)" `646 
C L "md_set_state" 0 17 1 "FUNCTION"
V L "Ctrl_1" 0 152 "int8" `648 
C L "md_set_state" 0 17 1 "FUNCTION"
V L "Ctrl_0" 0 154 "int8" `649 
C L "md_set_state" 0 17 1 "FUNCTION"
C L "md_set_state" 0 17 1 "FUNCTION"
V L "Ctrl_1" 0 168 "int8" `650 
C L "md_set_state" 0 17 1 "FUNCTION"
V L "Ctrl_0" 0 170 "int8" `651 
C L "md_set_state" 0 17 1 "FUNCTION"
C L "md_set_direction" 0 17 1 "FUNCTION"
V L "value" 0 182 "int8" `653 
F G "md_set_direction" 0 183 "void(int8 value)" `652 
C L "md_set_direction" 0 17 1 "FUNCTION"
C L "md_set_direction" 0 17 1 "FUNCTION"
C L "md_init" 0 17 1 "FUNCTION"
F G "md_init" 0 189 "void()" `654 
C L "md_init" 0 17 1 "FUNCTION"
C L "md_init" 0 17 1 "FUNCTION"
C L "md_init" 0 17 1 "FUNCTION"
C L "md_init" 0 17 1 "FUNCTION"
V L "Ctrl_1" 0 196 "int8" `655 
C L "md_init" 0 17 1 "FUNCTION"
V L "Ctrl_0" 0 198 "int8" `656 
C L "md_init" 0 17 1 "FUNCTION"
V L "Torque_1" 0 210 "int8" `657 
C L "md_init" 0 17 1 "FUNCTION"
V L "Torque_0" 0 212 "int8" `658 
C L "md_init" 0 17 1 "FUNCTION"
V L "Off_1" 0 224 "int8" `659 
C L "md_init" 0 17 1 "FUNCTION"
V L "Off_0" 0 226 "int8" `660 
C L "md_init" 0 17 1 "FUNCTION"
V L "Blank_1" 0 238 "int8" `661 
C L "md_init" 0 17 1 "FUNCTION"
V L "Blank_0" 0 240 "int8" `662 
C L "md_init" 0 17 1 "FUNCTION"
V L "Decay_1" 0 252 "int8" `663 
C L "md_init" 0 17 1 "FUNCTION"
V L "Decay_0" 0 254 "int8" `664 
V L "Stall_1" 0 265 "int8" `665 
V L "Stall_0" 0 266 "int8" `666 
C L "md_init" 0 17 1 "FUNCTION"
V L "Drive_1" 0 278 "int8" `667 
C L "md_init" 0 17 1 "FUNCTION"
V L "Drive_0" 0 280 "int8" `668 
V L "Status_1" 0 291 "int8" `669 
V L "Status_0" 0 292 "int8" `670 
C L "motion_cycle" 0 17 1 "FUNCTION"
F G "motion_cycle" 0 307 "void()" `671  "Start cycle"
V L "period" 0 309 "int16" `672 
V L "running" 0 310 "int1" `673 
C L "motion_cycle" 0 17 1 "FUNCTION"
C L "MAIN" 0 17 1 "FUNCTION"
F G "MAIN" 0 420 "void()" `675  "76543210"
C L "MAIN" 0 17 1 "FUNCTION"
C L "MAIN" 0 17 1 "FUNCTION"
C L "MAIN" 0 17 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
