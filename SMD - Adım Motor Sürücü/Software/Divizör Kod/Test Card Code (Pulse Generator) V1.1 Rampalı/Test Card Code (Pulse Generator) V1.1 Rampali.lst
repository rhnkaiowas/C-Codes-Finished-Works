CCS PCM C Compiler, Version 4.108, 15145               18-Aðu-14 15:53

               Filename: E:\File Server\Modesis\Proje Dosyalarý\SMD - Adým Motor Sürücü\Software\Divizör Kod\Test Card Code (Pulse Generator) V1.1 Rampalý\Test Card Code (Pulse Generator) V1.1 Rampali.lst

               ROM used: 145 words (7%)
                         Largest free fragment is 1903
               RAM used: 11 (3%) at main() level
                         23 (7%) worst case
               Stack:    2 locations

*
0000:  MOVLP  00
0001:  GOTO   05A
0002:  NOP
.................... #INCLUDE <16f1826.h>  
.................... //////// Standard Header file for the PIC16F1826 device //////////////// 
.................... #device PIC16F1826 
.................... #list 
....................  
....................  
.................... #FUSES INTRC_IO      // Internal RC clock (OSC1 and OSC2 pins are normal I/O) 
.................... #FUSES NOWDT         // Watch Dog Timer disabled 
.................... #FUSES PUT           // Power Up Timer enabled 
.................... #FUSES NOMCLR        // Master Clear pin is used for I/O 
.................... #FUSES PROTECT       // Code protected from reads 
.................... #FUSES CPD           // Data EEPROM code protected 
.................... #FUSES BROWNOUT      // Brownout Reset enabled 
.................... #FUSES BORV25        // Brownout Reset at 2.5V 
.................... #FUSES NOCLKOUT      // Disable clock output on OSC2 
.................... #FUSES NOIESO        // Internal External Switch Over Mode disabled 
.................... #FUSES NOFCMEN       // Fail-safe clock monitor disabled 
.................... #FUSES WRT           // Program memory write protected                                               
.................... #FUSES NOLVP         // Low Voltage Programming disabled 
.................... #FUSES NODEBUG       // No debug mode for ICD 
....................  
.................... #USE   DELAY(internal = 32MHz) 
0003:  MOVLW  20
0004:  MOVWF  05
0005:  MOVLW  07
0006:  MOVWF  04
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  0A
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  5F
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
0018:  MOVLW  02
0019:  SUBWF  27,F
001A:  BTFSS  03.0
001B:  GOTO   029
001C:  MOVLW  20
001D:  MOVWF  05
001E:  MOVLW  07
001F:  MOVWF  04
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   029
0023:  GOTO   027
0024:  GOTO   025
0025:  GOTO   026
0026:  NOP
0027:  DECFSZ 00,F
0028:  GOTO   024
0029:  RETURN
.................... //#USE   RS232(stream=RS232, baud=38400, XMIT=PIN_B5, RCV=PIN_B2, parity=N, bits=8, stop=1) 
....................  
.................... #DEFINE DRV_STEP     PIN_A0                  // Step output pin to driver (Rising edge causes the indexer to move one step) 
.................... #DEFINE DRV_RESET    PIN_A1                  // Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.) 
.................... #DEFINE USER_FAULT   PIN_A2                  // Fault output pin to user 
.................... #DEFINE USER_DIR     PIN_A3                  // Direction input pin from user 
.................... #DEFINE DRV_DIR      PIN_A4                  // Direction output pin to driver (Logic level, sets the direction of stepping) 
....................  
.................... #DEFINE SPI_SDO      PIN_A6                  // SPI data output pin 
.................... #DEFINE SPI_CS       PIN_A7                  // SPI chip select pin 
....................  
.................... #DEFINE USER_STEP    PIN_B0                  // Step input pin from user 
.................... #DEFINE SPI_SDI      PIN_B1                  // SPI data input pin 
....................  
.................... #DEFINE USER_ENABLE  PIN_B3                  // Enable input pin from user 
.................... #DEFINE SPI_SCK      PIN_B4                  // SPI clock output pin 
....................  
.................... #DEFINE DRV_STALL    PIN_B6                  // Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut) 
.................... #DEFINE DRV_FAULT    PIN_B7                  // Fault input pin from driver (Logic low when in fault condition. Pull up mevcut) 
....................  
.................... // SPI Registers 
.................... #WORD SPI_SSP1CON1   = 0x215                 // Synchronous serial port control register 
.................... #WORD SPI_SSP1STAT   = 0x214                 // Synchronous serial port status register 
.................... #WORD SPI_SSP1BUF    = 0x211                 // Synchronous serial port buffer register 
.................... #WORD SPI_PIR1       = 0x011                 // Peripheral interrupt request register 
.................... // Pin function control registers 
.................... #WORD PIN_APFCON0    = 0x11D                 // Alternate pin function control register 0 
.................... #WORD PIN_APFCON1    = 0x11E                 // Alternate pin function control register 1 
....................  
.................... // Bits of SSP1CON1 register 
.................... #BIT SPI_WRITE_FLAG     = SPI_SSP1CON1.7     // Synchronous serial port write collision detect bit 
.................... #BIT SPI_ENABLE         = SPI_SSP1CON1.5     // Synchronous serial port enable bit 
.................... #BIT SPI_CLOCK_POLARITY = SPI_SSP1CON1.4     // Synchronous serial port clock polarity select bit 
.................... #BIT SPI_MODE_3         = SPI_SSP1CON1.3     // Synchronous serial port mode select bits 
.................... #BIT SPI_MODE_2         = SPI_SSP1CON1.2    
.................... #BIT SPI_MODE_1         = SPI_SSP1CON1.1    
.................... #BIT SPI_MODE_0         = SPI_SSP1CON1.0   
....................  
.................... // Bits of SPI_SSP1STAT register 
.................... #BIT SPI_INPUT_SAMPLE   = SPI_SSP1STAT.7     // Synchronous serial port data input sample bit 
.................... #BIT SPI_CLOCK_EDGE     = SPI_SSP1STAT.6     // Synchronous serial port clock edge select bit 
.................... #BIT SPI_BUFFER_STATUS  = SPI_SSP1STAT.0     // Synchronous serial port buffer full status bit 
....................  
.................... // Bits of SPI_PIR1 register 
.................... #BIT SPI_FLAG           = SPI_PIR1.3         // Synchronous serial port interrupt flag bit 
....................  
.................... // Bits of PIN_APFCON0 register 
.................... #BIT PIN_RX_SELECT      = PIN_APFCON0.7      // RX pin selection bit 
.................... #BIT PIN_SDO_SELECT     = PIN_APFCON0.6      // SDO pin selection bit  
.................... #BIT PIN_SS_SELECT      = PIN_APFCON0.5      // SS pin selection bit  
....................  
.................... // Bits of PIN_APFCON1 register 
.................... #BIT PIN_TX_SELECT      = PIN_APFCON1.0      // TX pin selection bit 
....................  
.................... int   const acc_lim          = 116;                                                 // Number of steps before we hit max speed. acc=10000 dec=10000  
.................... unsigned int const periods[acc_lim]={2449,1015,779,656,578,523,481,447,420,397,378,361,346,333,322,311,302,293,285,277,271,264,258,253,247,243,238,234,229,226,222,218,215,212,209,206,203,200,197,195,192,190,188,186,184,182,180, 
.................... 178,176,174,172,171,169,167,166,164,163,162,160,159,157,156,155,154,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115, 
.................... 114,113,112,111,110,109,108,107,106,105,104,103,102,101}; 
....................  
.................... int16          i                    =  0; 
.................... int16          delay                =  50; 
.................... int16          distance_step        =  51200; 
....................     
....................  
.................... // Sets variables to default values  
.................... void set_variables() 
.................... { 
....................    output_low(SPI_CS);     // Chip select is active high so keep it low to prevent out-of-sync transaction 
....................    output_low(USER_FAULT); // Clear fault status  
....................    output_low(DRV_RESET);  // Reset is active high so keep reset pin low to activate driver  
....................    output_low(DRV_DIR);    // Set default direction 
....................    output_low(DRV_STEP);   // Keep step output low until a step command is received from the user 
.................... } 
....................  
.................... void pulser(){ 
....................     
.................... //!         for(i=0; i<acc_lim; i++) 
.................... //!         { 
.................... //!             
.................... //!            delay_us(periods[i]/2);  //Rampa kalkýþ 
.................... //!            delay_us(delay); 
.................... //!            delay_us(periods[i]/2); 
.................... //!            delay_us(delay); 
.................... //!         } 
....................  
....................          for(i=0; i<51200; i++) 
002A:  CLRF   21
002B:  CLRF   20
002C:  MOVF   21,W
002D:  SUBLW  C7
002E:  BTFSS  03.0
002F:  GOTO   058
....................          { 
....................             output_high(USER_STEP); 
0030:  MOVLB  01
0031:  BCF    0D.0
0032:  MOVLB  02
0033:  BSF    0D.0
....................             delay_us(delay);             //Stepler 
0034:  MOVLB  00
0035:  MOVF   23,W
0036:  MOVWF  26
0037:  INCF   26,F
0038:  DECF   26,F
0039:  BTFSC  03.2
003A:  GOTO   03F
003B:  MOVLW  FF
003C:  MOVWF  27
003D:  CALL   018
003E:  GOTO   038
003F:  MOVF   22,W
0040:  MOVWF  27
0041:  CALL   018
....................             output_low(USER_STEP); 
0042:  MOVLB  01
0043:  BCF    0D.0
0044:  MOVLB  02
0045:  BCF    0D.0
....................             delay_us(delay); 
0046:  MOVLB  00
0047:  MOVF   23,W
0048:  MOVWF  26
0049:  INCF   26,F
004A:  DECF   26,F
004B:  BTFSC  03.2
004C:  GOTO   051
004D:  MOVLW  FF
004E:  MOVWF  27
004F:  CALL   018
0050:  GOTO   04A
0051:  MOVF   22,W
0052:  MOVWF  27
0053:  CALL   018
....................          } 
0054:  INCF   20,F
0055:  BTFSC  03.2
0056:  INCF   21,F
0057:  GOTO   02C
.................... //!          
.................... //!         for(i=acc_lim; i>0; i--) 
.................... //!         { 
.................... //!             
.................... //!            output_high(USER_STEP);    //Rampa Duruþ 
.................... //!            delay_us(periods[i-1]/2);; 
.................... //!            output_low(USER_STEP); 
.................... //!            delay_us(periods[i-1]/2); 
.................... //!         } 
....................     
.................... } 
0058:  MOVLP  00
0059:  GOTO   087 (RETURN)
....................  
.................... void main() 
.................... { 
005A:  CLRF   05
005B:  CLRF   04
005C:  MOVLW  1F
005D:  ANDWF  03,F
005E:  MOVLW  F4
005F:  MOVLB  01
0060:  MOVWF  19
0061:  MOVLB  00
0062:  CLRF   21
0063:  CLRF   20
0064:  CLRF   23
0065:  MOVLW  32
0066:  MOVWF  22
0067:  MOVLW  C8
0068:  MOVWF  25
0069:  CLRF   24
006A:  MOVLB  03
006B:  CLRF   0C
006C:  CLRF   0D
006D:  MOVLB  02
006E:  CLRF   12
006F:  CLRF   11
0070:  CLRF   14
0071:  CLRF   13
....................    // Set I/O states of the ports 
....................    //           76543210                  
....................    set_tris_a(0b00100100);        
0072:  MOVLW  24
0073:  MOVLB  01
0074:  MOVWF  0C
....................    set_tris_b(0b11000110); 
0075:  MOVLW  C6
0076:  MOVWF  0D
....................     
....................    while(true){       
....................     
....................       output_high(USER_ENABLE); 
0077:  BCF    0D.3
0078:  MOVLB  02
0079:  BSF    0D.3
....................       delay_ms(100); 
007A:  MOVLW  64
007B:  MOVLB  00
007C:  MOVWF  27
007D:  CALL   003
....................       output_high(USER_DIR); 
007E:  MOVLB  01
007F:  BCF    0C.3
0080:  MOVLB  02
0081:  BSF    0C.3
....................       delay_ms(10); 
0082:  MOVLW  0A
0083:  MOVLB  00
0084:  MOVWF  27
0085:  CALL   003
....................        
....................       pulser(); 
0086:  GOTO   02A
....................        
.................... //!      output_low(USER_ENABLE); 
....................       delay_ms(2000); 
0087:  MOVLW  08
0088:  MOVWF  26
0089:  MOVLW  FA
008A:  MOVWF  27
008B:  CALL   003
008C:  DECFSZ 26,F
008D:  GOTO   089
.................... //!       
.................... //!      output_high(USER_ENABLE); 
.................... //!      delay_ms(100); 
.................... //!      output_low(USER_DIR); 
.................... //!      delay_ms(10); 
.................... //!    
.................... //!      pulser(); 
.................... //!    
.................... //!      output_low(USER_ENABLE); 
.................... //!      delay_ms(1000); 
....................     
....................    } 
008E:  MOVLB  01
008F:  GOTO   077
....................  
.................... } 
0090:  SLEEP

Configuration Fuses:
   Word  1: 0E04   NOWDT PUT PROTECT NOMCLR CPD BROWNOUT NOIESO NOFCMEN INTRC_IO NOCLKOUT
   Word  2: 1210   WRT NOVCAP PLL_SW STVREN BORV25 NODEBUG NOLVP
