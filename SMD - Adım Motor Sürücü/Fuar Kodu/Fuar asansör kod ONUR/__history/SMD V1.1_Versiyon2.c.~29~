#INCLUDE <16f1826.h> 

#FUSES INTRC_IO                                                      // High Speed Oscilator (>4 Mhz) crystal
#FUSES NOWDT                                                         // Watch Dog Timer disabled
#FUSES PUT                                                           // Power Up Timer enabled
#FUSES MCLR                                                          // Master Clear pin enabled
#FUSES BROWNOUT                                                      // Brownout Reset enabled
#FUSES BORV25                                                        // Brownout Reset at 2.5V
#FUSES NOLVP                                                         // Low Voltage Programming disabled
#FUSES CPD                                                           // Data EEPROM code protected
#FUSES PROTECT                                                       // Code protected from reads
#FUSES NOIESO                                                        // Internal External Switch Over Mode disabled
#FUSES NOFCMEN                                                       // Fail-safe clock monitor disabled

#USE   DELAY(clock=32000000)                                         // delay() func. adjusted for 20Mhz Primary Osc.

// Pin assignments
#DEFINE DRV_STEP     PIN_A0                  // Step output pin
#DEFINE DRV_RESET    PIN_A1                  // Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.)
#DEFINE LM_UP        PIN_A2                  // Up limit switch input pin
#DEFINE LM_DOWN      PIN_A3                  // Down limit switch input pin
#DEFINE DRV_DIR      PIN_A4                  // Direction output pin

#DEFINE SPI_SDO      PIN_A6                  // SPI data output pin
#DEFINE SPI_CS       PIN_A7                  // SPI chip select output pin

#DEFINE BT_DOWN      PIN_B0                  // Down button input pin
#DEFINE SPI_SDI      PIN_B1                  // SPI data input pin

#DEFINE BT_UP        PIN_B3                  // Up button input pin
#DEFINE SPI_SCK      PIN_B4                  // SPI clock output pin

#DEFINE DRV_STALL    PIN_B6                  // Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut)
#DEFINE DRV_FAULT    PIN_B7                  // Fault input pin from driver (Logic low when in fault condition. Pull up mevcut)

//OPTION Register 
#WORD OPTION         = 0x095
//Bits of Option Register
#BIT OPTION_WPUEN    = OPTION.7


// SPI Registers
#WORD SPI_SSP1CON1   = 0x215                 // Synchronous serial port control register
#WORD SPI_SSP1STAT   = 0x214                 // Synchronous serial port status register
#WORD SPI_SSP1BUF    = 0x211                 // Synchronous serial port buffer register
#WORD SPI_PIR1       = 0x011                 // Peripheral interrupt request register
// Pin function control registers
#WORD PIN_APFCON0    = 0x11D                 // Alternate pin function control register 0
#WORD PIN_APFCON1    = 0x11E                 // Alternate pin function control register 1

// Bits of SSP1CON1 register
#BIT SPI_WRITE_FLAG     = SPI_SSP1CON1.7     // Synchronous serial port write collision detect bit
#BIT SPI_ENABLE         = SPI_SSP1CON1.5     // Synchronous serial port enable bit
#BIT SPI_CLOCK_POLARITY = SPI_SSP1CON1.4     // Synchronous serial port clock polarity select bit
#BIT SPI_MODE_3         = SPI_SSP1CON1.3     // Synchronous serial port mode select bits
#BIT SPI_MODE_2         = SPI_SSP1CON1.2   
#BIT SPI_MODE_1         = SPI_SSP1CON1.1   
#BIT SPI_MODE_0         = SPI_SSP1CON1.0  

// Bits of SPI_SSP1STAT register
#BIT SPI_INPUT_SAMPLE   = SPI_SSP1STAT.7     // Synchronous serial port data input sample bit
#BIT SPI_CLOCK_EDGE     = SPI_SSP1STAT.6     // Synchronous serial port clock edge select bit
#BIT SPI_BUFFER_STATUS  = SPI_SSP1STAT.0     // Synchronous serial port buffer full status bit

// Bits of SPI_PIR1 register
#BIT SPI_FLAG           = SPI_PIR1.3         // Synchronous serial port interrupt flag bit

// Bits of PIN_APFCON0 register
#BIT PIN_RX_SELECT      = PIN_APFCON0.7      // RX pin selection bit
#BIT PIN_SDO_SELECT     = PIN_APFCON0.6      // SDO pin selection bit 
#BIT PIN_SS_SELECT      = PIN_APFCON0.5      // SS pin selection bit 

// Bits of PIN_APFCON1 register
#BIT PIN_TX_SELECT      = PIN_APFCON1.0      // TX pin selection bit


enum  State     {OFF = 0, ON   = 1};                                 // Motor states
enum  Direction {UP  = 0, DOWN = 1};                                 // Direction of motion
enum  Motion    {ACC = 0, WALK = 1, RUN  = 2, DEC = 3, STEADY = 4};  // State of the motion

int16 step_count = 0;
int16 const run_lim          = 10;                                  // Duration of the slow motion (per count) before acclerating to high speed  
unsigned int16   const acc_lim          = 550;                                  // Number of steps before we hit max speed. acc=10000 dec=10000 
unsigned int16 const periods[acc_lim] = {2610,2610,2610,2610,2610,2610,2609,2609,2608,2608,2607,2607,2606,2606,2605,2604,2603,2602,2601,2600,2599,2598,2597,2596,2595,2594,2592,2591,
2590,2588,2587,2585,2584,2582,2580,2579,2577,2575,2573,2571,2569,2567,2565,2563,2561,2559,2557,2555,2552,2550,2548,2545,2543,2540,2538,2535,2533,2530,2527,2524,2522,2519,2516,2513,2510,2507,2504,2501,2498,2495,2492,2488,2485,2482,2479,2475,2472,2468,2465,2461,2458,2454,2451,2447,2443,2440,2436,2432,2428,2424,2421,2417,2413,2409,2405,2401,2396,2392,2388,2384,2380,2375,2371,2367,2362,2358,2354,2349,2345,2340,2336,2331,2326,2322,2317,2312,2308,2303,2298,2293,2288,2283,2279,2274,2269,2264,2259,2254,2249,2243,2238,2233,2228,2223,2217,2212,2207,2202,2196,2191,2185,2180,2175,2169,2164,2158,2153,2147,2141,2136,2130,2125,2119,2113,2107,2102,2096,2090,2084,2078,2073,2067,2061,2055,2049,2043,2037,2031,2025,2019,2013,2007,2001,1994,1988,1982,1976,1970,1964,1957,1951,1945,1939,1932,1926,1920,1913,1907,1900,1894,1888,1881,1875,1868,1862,1855,1849,1842,1836,1829,1823,1816,1809,1803,1796,1790,1783,1776,1770,1763,1756,1749,1743,1736,1729,1722,1716,1709,1702,1695,1688,1682,1675,1668,1661,1654,1647,1641,1634,1627,1620,1613,1606,1599,1592,1585,1578,1571,1564,1557,1550,1543,1536,1529,1522,1515,1508,1501,1494,1487,1480,1473,1466,1459,1452,1445,1438,1431,1424,1417,1410,1403,1396,1388,1381,1374,1367,1360,1353,1346,1339,1332,1325,1318,1310,1303,1296,1289,1282,1275,1268,1261,1254,1247,1240,1233,1225,1218,1211,1204,1197,1190,1183,1176,1169,1162,1155,1148,1141,1134,1127,1120,1113,1106,1099,1092,1085,1078,1071,1064,1057,1050,1043,1036,1029,1022,1015,1008,1001,994,987,980,974,967,960,953,946,939,933,926,919,912,905,899,892,885,878,872,865,858,851,845,838,831,825,818,812,805,798,792,785,779,772,766,759,753,746,740,733,727,721,714,708,701,695,689,682,676,670,664,657,651,645,639,633,627,620,614,608,602,596,590,584,578,572,566,560,554,548,543,537,531,525,519,514,508,502,496,491,485,480,474,468,463,457,452,446,441,436,430,425,419,414,409,404,398,393,388,383,378,372,367,362,357,352,347,342,338,333,328,323,318,313,309,304,299,295,290,285,281,276,272,267,263,259,254,250,246,241,237,233,229,225,220,216,212,208,204,200,197,193,189,185,181,178,174,170,167,163,160,156,153,149,146,142,139,136,133,129,126,123,120,117,114,111,108,105,102,99,97,94,91,88,86,83,81,78,76,73,71,69,66,64,62,60,58,56,54,52,50,48,46,44,42,41,39,37,36,34,33,31,30,29,27,26,25,24,23,22,21,20,19,18,17,16,15,15,14,14,13,13,12,12,11,11,11,11,11,11,10

};

int const off_time = 5;                                             // Off time of the pwm signal (should be smaller than period)
int8      motion_state = STEADY;                                     // Current state of the motion

void set_SPI()
{
   // Disable SPI to set registers
   SPI_ENABLE = 0;
   // Set idle state of the clock to low 
   SPI_CLOCK_POLARITY = 0;
   // Set SPI mode to SPI 
   SPI_MODE_3 = 0; 
   SPI_MODE_2 = 0;
   SPI_MODE_1 = 1;
   SPI_MODE_0 = 0;
   // Input data sampled at the middle of data output time
   SPI_INPUT_SAMPLE = 0;
   // Transmit occurs on transition from active to idle clock state
   SPI_CLOCK_EDGE = 1;

   // Enable SPI
   SPI_ENABLE = 1;
}

void set_variables()
{
   output_low(SPI_CS);     // Chip select is active high so keep it low to prevent out-of-sync transaction
   output_low(DRV_RESET);  // Reset is active high so keep reset pin low to activate driver 
}

void set_pins()
{
   // Set RB2 as RX pin
   //PIN_RX_SELECT = 1;
   // Set RA6 as SDO pin
   PIN_SDO_SELECT = 1;
   // Set RA5 as SS pin
   PIN_SS_SELECT = 1;
   // Set RB5 as TX pin
   //PIN_TX_SELECT = 1;
}


// Sets the motor state
void md_set_state(State value)
{
   if (value == on)
   {
   output_high(SPI_CS);
                    //FEDCBA98
   int Ctrl_1     = 0b00001100;
                    //76543210
   int Ctrl_0     = 0b00011001;// Set enable pin to given motor state
   SPI_SSP1BUF = Ctrl_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Ctrl_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   }
   else if (value == off)
   {
   output_high(SPI_CS);
                    //FEDCBA98
   int Ctrl_1     = 0b00001100;
                    //76543210
   int Ctrl_0     = 0b00011000;// Set enable pin to given motor state
   SPI_SSP1BUF = Ctrl_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Ctrl_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   }
}
// Sets the motion direction
void md_set_direction(Direction value)
{
      restart_wdt();//watchdog sýfýrlanacak
      output_bit(DRV_DIR, !value);                                     // Set direction pin to given value
}
// Initializes motor driver
void md_init()
{
   md_set_state(OFF);                                                 // Motor off
   output_high(DRV_DIR);                                              // Direction control pin can be in any state
   output_high(DRV_STEP);                                             // Keep step input pin high (A low-to-high transition advances the motor one increment 
   
   output_high(SPI_CS);
                    //FEDCBA98
   int Ctrl_1     = 0b00001100;
                    //76543210
   int Ctrl_0     = 0b00011000;
   SPI_SSP1BUF = Ctrl_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Ctrl_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);

   output_high(SPI_CS);
                    //FEDCBA98
   int Torque_1   = 0b00010000;
                    //76543210
   int Torque_0   = 0b10110111;
   SPI_SSP1BUF = Torque_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Torque_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
                    //FEDCBA98
   int Off_1      = 0b00100000;
                    //76543210
   int Off_0      = 0b01111001;
   SPI_SSP1BUF = Off_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Off_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
                    //FEDCBA98
   int Blank_1    = 0b00110001;
                    //76543210
   int Blank_0    = 0b10010110;
   SPI_SSP1BUF = Blank_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Blank_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
                    //FEDCBA98
   int Decay_1    = 0b01000101;
                    //76543210
   int Decay_0    = 0b00011100;
   SPI_SSP1BUF = Decay_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Decay_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
   int Stall_1    = 0b01011001;
   int Stall_0    = 0b00010100;
   SPI_SSP1BUF = Stall_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Stall_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
                    //FEDCBA98
   int Drive_1    = 0b01101010;
                    //76543210
   int Drive_0    = 0b10100000;
   SPI_SSP1BUF = Drive_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Drive_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);
   
   output_high(SPI_CS);
   int Status_1   = 0b01110000;
   int Status_0   = 0b00000000;
   SPI_SSP1BUF = Status_1;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   SPI_SSP1BUF = Status_0;
   while (!SPI_FLAG);
   SPI_FLAG = 0;
   output_low(SPI_CS);
   delay_ms(10);

   delay_ms(100);
}

// Starts motion cycle
void motion_cycle()
{
   // Start cycle
   int16 step_count = 0;
   int16 period     = 0;
   int1  running    = 0;
   int   upwards    = 1; 
   while(true)
   {
      if(upwards)
      {
         if(input(LM_UP)== 1)
         {
            upwards = 0;
            md_set_state(OFF);
            delay_ms(32000);
            md_set_state(ON);
            delay_ms(1000);
         }
         
         if(input(LM_UP) == 0 && running == 0)
         {
            md_set_direction(UP);
            motion_state = WALK;
         }
         else if(input(LM_UP) && running == 1)
         {
            if(motion_state == ACC || motion_state == RUN)
               motion_state = DEC;
            else if(motion_state == WALK)
               motion_state = STEADY;
         }
      }
      else
      {   
         if(input(LM_DOWN)== 1)
         {
            upwards= 1;
            md_set_state(OFF);
            delay_ms(32000);
            md_set_state(ON);
            delay_ms(1000);
         }
         
         if(input(LM_DOWN) == 0 && running == 0)
         {
            md_set_direction(DOWN);
            motion_state = WALK;
         }
         else if(input(LM_DOWN) && running == 1)
         {
            if(motion_state == ACC || motion_state == RUN)
               motion_state = DEC;
            else if(motion_state == WALK)
               motion_state = STEADY;
         }
      }
      
      

      switch(motion_state) 
      { 
         case WALK:
            step_count++;
         
            if(step_count == 1)
            {
               running = 1;
               md_set_state(ON);
               period = periods[0];
            }
            else if(step_count == run_lim)
            {
               step_count   = 0;
               motion_state = ACC;
            }
            break;
         case ACC:
            if(step_count == acc_lim - 1)
            {
               motion_state = RUN;
            }
               
            period = periods[step_count];
            step_count++;
            break;
            
         case RUN:
            period = periods[step_count - 1];
            break;
   
         case DEC:
            step_count--;
            // Check if we at last step
            if(step_count == 0)
            {
               motion_state = STEADY;
            }
               
            period = periods[step_count];
            break;
            
         case STEADY:
            if(running)
            {
               running    = 0;
               period     = 0;
               step_count = 0;
               md_set_state(OFF);
            }
            break;
      }
   
      if(running)
      {  
         delay_us(off_time);
         output_low(DRV_STEP);
         delay_us(period - off_time);
         output_high(DRV_STEP);
      }
   }
}

// Main method
void main()
{
   //             76543210
     set_tris_a(0b00101100);       // Set I/O states of the ports
     set_tris_b(0b11001111);
   
   delay_ms(500);
   
   //fprintf(RS232,"\n\n\rMODESIS LASER POSITIONING STAGE\n\n\r");
   
   set_pins();
   set_SPI();
   set_variables();
   md_init();           // Initialize motor driver
   motion_cycle();      // Start motion cycle
}
