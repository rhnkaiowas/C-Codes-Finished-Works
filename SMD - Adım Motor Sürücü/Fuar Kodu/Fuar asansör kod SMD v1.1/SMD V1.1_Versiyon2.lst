CCS PCM C Compiler, Version 5.008, 5967               10-Eki-14 15:48

               Filename:   E:\File Server\Modesis\Proje Dosyalarý\SMD - Adým Motor Sürücü\Fuar Kodu\Fuar asansör kod SMD v1.1\SMD V1.1_Versiyon2.lst

               ROM used:   1924 words (94%)
                           Largest free fragment is 124
               RAM used:   9 (3%) at main() level
                           40 (12%) worst case
               Stack used: 3 locations
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   762
0002:  NOP
.................... #INCLUDE <16f1826.h>  
.................... //////// Standard Header file for the PIC16F1826 device //////////////// 
.................... #device PIC16F1826 
0003:  MOVWF  7B
0004:  MOVLW  00
0005:  ADDWF  7A,W
0006:  MOVWF  0A
0007:  MOVF   7B,W
0008:  ADDLW  0C
0009:  BTFSC  03.0
000A:  INCF   0A,F
000B:  MOVWF  02
000C:  RETLW  32
000D:  RETLW  0A
000E:  RETLW  3C
000F:  RETLW  0A
0010:  RETLW  3C
0011:  RETLW  0A
0012:  RETLW  3C
0013:  RETLW  0A
0014:  RETLW  3C
0015:  RETLW  0A
0016:  RETLW  3C
0017:  RETLW  0A
0018:  RETLW  3B
0019:  RETLW  0A
001A:  RETLW  3B
001B:  RETLW  0A
001C:  RETLW  3A
001D:  RETLW  0A
001E:  RETLW  3A
001F:  RETLW  0A
0020:  RETLW  39
0021:  RETLW  0A
0022:  RETLW  39
0023:  RETLW  0A
0024:  RETLW  38
0025:  RETLW  0A
0026:  RETLW  38
0027:  RETLW  0A
0028:  RETLW  37
0029:  RETLW  0A
002A:  RETLW  36
002B:  RETLW  0A
002C:  RETLW  35
002D:  RETLW  0A
002E:  RETLW  34
002F:  RETLW  0A
0030:  RETLW  33
0031:  RETLW  0A
0032:  RETLW  32
0033:  RETLW  0A
0034:  RETLW  31
0035:  RETLW  0A
0036:  RETLW  30
0037:  RETLW  0A
0038:  RETLW  2F
0039:  RETLW  0A
003A:  RETLW  2E
003B:  RETLW  0A
003C:  RETLW  2D
003D:  RETLW  0A
003E:  RETLW  2C
003F:  RETLW  0A
0040:  RETLW  2A
0041:  RETLW  0A
0042:  RETLW  29
0043:  RETLW  0A
0044:  RETLW  28
0045:  RETLW  0A
0046:  RETLW  26
0047:  RETLW  0A
0048:  RETLW  25
0049:  RETLW  0A
004A:  RETLW  23
004B:  RETLW  0A
004C:  RETLW  22
004D:  RETLW  0A
004E:  RETLW  20
004F:  RETLW  0A
0050:  RETLW  1E
0051:  RETLW  0A
0052:  RETLW  1D
0053:  RETLW  0A
0054:  RETLW  1B
0055:  RETLW  0A
0056:  RETLW  19
0057:  RETLW  0A
0058:  RETLW  17
0059:  RETLW  0A
005A:  RETLW  15
005B:  RETLW  0A
005C:  RETLW  13
005D:  RETLW  0A
005E:  RETLW  11
005F:  RETLW  0A
0060:  RETLW  0F
0061:  RETLW  0A
0062:  RETLW  0D
0063:  RETLW  0A
0064:  RETLW  0B
0065:  RETLW  0A
0066:  RETLW  09
0067:  RETLW  0A
0068:  RETLW  07
0069:  RETLW  0A
006A:  RETLW  05
006B:  RETLW  0A
006C:  RETLW  02
006D:  RETLW  0A
006E:  RETLW  00
006F:  RETLW  0A
0070:  RETLW  FE
0071:  RETLW  09
0072:  RETLW  FB
0073:  RETLW  09
0074:  RETLW  F9
0075:  RETLW  09
0076:  RETLW  F6
0077:  RETLW  09
0078:  RETLW  F4
0079:  RETLW  09
007A:  RETLW  F1
007B:  RETLW  09
007C:  RETLW  EF
007D:  RETLW  09
007E:  RETLW  EC
007F:  RETLW  09
0080:  RETLW  E9
0081:  RETLW  09
0082:  RETLW  E6
0083:  RETLW  09
0084:  RETLW  E4
0085:  RETLW  09
0086:  RETLW  E1
0087:  RETLW  09
0088:  RETLW  DE
0089:  RETLW  09
008A:  RETLW  DB
008B:  RETLW  09
008C:  RETLW  D8
008D:  RETLW  09
008E:  RETLW  D5
008F:  RETLW  09
0090:  RETLW  D2
0091:  RETLW  09
0092:  RETLW  CF
0093:  RETLW  09
0094:  RETLW  CC
0095:  RETLW  09
0096:  RETLW  C9
0097:  RETLW  09
0098:  RETLW  C6
0099:  RETLW  09
009A:  RETLW  C2
009B:  RETLW  09
009C:  RETLW  BF
009D:  RETLW  09
009E:  RETLW  BC
009F:  RETLW  09
00A0:  RETLW  B9
00A1:  RETLW  09
00A2:  RETLW  B5
00A3:  RETLW  09
00A4:  RETLW  B2
00A5:  RETLW  09
00A6:  RETLW  AE
00A7:  RETLW  09
00A8:  RETLW  AB
00A9:  RETLW  09
00AA:  RETLW  A7
00AB:  RETLW  09
00AC:  RETLW  A4
00AD:  RETLW  09
00AE:  RETLW  A0
00AF:  RETLW  09
00B0:  RETLW  9D
00B1:  RETLW  09
00B2:  RETLW  99
00B3:  RETLW  09
00B4:  RETLW  95
00B5:  RETLW  09
00B6:  RETLW  92
00B7:  RETLW  09
00B8:  RETLW  8E
00B9:  RETLW  09
00BA:  RETLW  8A
00BB:  RETLW  09
00BC:  RETLW  86
00BD:  RETLW  09
00BE:  RETLW  82
00BF:  RETLW  09
00C0:  RETLW  7F
00C1:  RETLW  09
00C2:  RETLW  7B
00C3:  RETLW  09
00C4:  RETLW  77
00C5:  RETLW  09
00C6:  RETLW  73
00C7:  RETLW  09
00C8:  RETLW  6F
00C9:  RETLW  09
00CA:  RETLW  6B
00CB:  RETLW  09
00CC:  RETLW  66
00CD:  RETLW  09
00CE:  RETLW  62
00CF:  RETLW  09
00D0:  RETLW  5E
00D1:  RETLW  09
00D2:  RETLW  5A
00D3:  RETLW  09
00D4:  RETLW  56
00D5:  RETLW  09
00D6:  RETLW  51
00D7:  RETLW  09
00D8:  RETLW  4D
00D9:  RETLW  09
00DA:  RETLW  49
00DB:  RETLW  09
00DC:  RETLW  44
00DD:  RETLW  09
00DE:  RETLW  40
00DF:  RETLW  09
00E0:  RETLW  3C
00E1:  RETLW  09
00E2:  RETLW  37
00E3:  RETLW  09
00E4:  RETLW  33
00E5:  RETLW  09
00E6:  RETLW  2E
00E7:  RETLW  09
00E8:  RETLW  2A
00E9:  RETLW  09
00EA:  RETLW  25
00EB:  RETLW  09
00EC:  RETLW  20
00ED:  RETLW  09
00EE:  RETLW  1C
00EF:  RETLW  09
00F0:  RETLW  17
00F1:  RETLW  09
00F2:  RETLW  12
00F3:  RETLW  09
00F4:  RETLW  0E
00F5:  RETLW  09
00F6:  RETLW  09
00F7:  RETLW  09
00F8:  RETLW  04
00F9:  RETLW  09
00FA:  RETLW  FF
00FB:  RETLW  08
00FC:  RETLW  FA
00FD:  RETLW  08
00FE:  RETLW  F5
00FF:  RETLW  08
0100:  RETLW  F1
0101:  RETLW  08
0102:  RETLW  EC
0103:  RETLW  08
0104:  RETLW  E7
0105:  RETLW  08
0106:  RETLW  E2
0107:  RETLW  08
0108:  RETLW  DD
0109:  RETLW  08
010A:  RETLW  D8
010B:  RETLW  08
010C:  RETLW  D3
010D:  RETLW  08
010E:  RETLW  CD
010F:  RETLW  08
0110:  RETLW  C8
0111:  RETLW  08
0112:  RETLW  C3
0113:  RETLW  08
0114:  RETLW  BE
0115:  RETLW  08
0116:  RETLW  B9
0117:  RETLW  08
0118:  RETLW  B3
0119:  RETLW  08
011A:  RETLW  AE
011B:  RETLW  08
011C:  RETLW  A9
011D:  RETLW  08
011E:  RETLW  A4
011F:  RETLW  08
0120:  RETLW  9E
0121:  RETLW  08
0122:  RETLW  99
0123:  RETLW  08
0124:  RETLW  93
0125:  RETLW  08
0126:  RETLW  8E
0127:  RETLW  08
0128:  RETLW  89
0129:  RETLW  08
012A:  RETLW  83
012B:  RETLW  08
012C:  RETLW  7E
012D:  RETLW  08
012E:  RETLW  78
012F:  RETLW  08
0130:  RETLW  73
0131:  RETLW  08
0132:  RETLW  6D
0133:  RETLW  08
0134:  RETLW  67
0135:  RETLW  08
0136:  RETLW  62
0137:  RETLW  08
0138:  RETLW  5C
0139:  RETLW  08
013A:  RETLW  57
013B:  RETLW  08
013C:  RETLW  51
013D:  RETLW  08
013E:  RETLW  4B
013F:  RETLW  08
0140:  RETLW  45
0141:  RETLW  08
0142:  RETLW  40
0143:  RETLW  08
0144:  RETLW  3A
0145:  RETLW  08
0146:  RETLW  34
0147:  RETLW  08
0148:  RETLW  2E
0149:  RETLW  08
014A:  RETLW  28
014B:  RETLW  08
014C:  RETLW  23
014D:  RETLW  08
014E:  RETLW  1D
014F:  RETLW  08
0150:  RETLW  17
0151:  RETLW  08
0152:  RETLW  11
0153:  RETLW  08
0154:  RETLW  0B
0155:  RETLW  08
0156:  RETLW  05
0157:  RETLW  08
0158:  RETLW  FF
0159:  RETLW  07
015A:  RETLW  F9
015B:  RETLW  07
015C:  RETLW  F3
015D:  RETLW  07
015E:  RETLW  ED
015F:  RETLW  07
0160:  RETLW  E7
0161:  RETLW  07
0162:  RETLW  E1
0163:  RETLW  07
0164:  RETLW  DB
0165:  RETLW  07
0166:  RETLW  D4
0167:  RETLW  07
0168:  RETLW  CE
0169:  RETLW  07
016A:  RETLW  C8
016B:  RETLW  07
016C:  RETLW  C2
016D:  RETLW  07
016E:  RETLW  BC
016F:  RETLW  07
0170:  RETLW  B6
0171:  RETLW  07
0172:  RETLW  AF
0173:  RETLW  07
0174:  RETLW  A9
0175:  RETLW  07
0176:  RETLW  A3
0177:  RETLW  07
0178:  RETLW  9D
0179:  RETLW  07
017A:  RETLW  96
017B:  RETLW  07
017C:  RETLW  90
017D:  RETLW  07
017E:  RETLW  8A
017F:  RETLW  07
0180:  RETLW  83
0181:  RETLW  07
0182:  RETLW  7D
0183:  RETLW  07
0184:  RETLW  76
0185:  RETLW  07
0186:  RETLW  70
0187:  RETLW  07
0188:  RETLW  6A
0189:  RETLW  07
018A:  RETLW  63
018B:  RETLW  07
018C:  RETLW  5D
018D:  RETLW  07
018E:  RETLW  56
018F:  RETLW  07
0190:  RETLW  50
0191:  RETLW  07
0192:  RETLW  49
0193:  RETLW  07
0194:  RETLW  43
0195:  RETLW  07
0196:  RETLW  3C
0197:  RETLW  07
0198:  RETLW  36
0199:  RETLW  07
019A:  RETLW  2F
019B:  RETLW  07
019C:  RETLW  29
019D:  RETLW  07
019E:  RETLW  22
019F:  RETLW  07
01A0:  RETLW  1B
01A1:  RETLW  07
01A2:  RETLW  15
01A3:  RETLW  07
01A4:  RETLW  0E
01A5:  RETLW  07
01A6:  RETLW  08
01A7:  RETLW  07
01A8:  RETLW  01
01A9:  RETLW  07
01AA:  RETLW  FA
01AB:  RETLW  06
01AC:  RETLW  F4
01AD:  RETLW  06
01AE:  RETLW  ED
01AF:  RETLW  06
01B0:  RETLW  E6
01B1:  RETLW  06
01B2:  RETLW  DF
01B3:  RETLW  06
01B4:  RETLW  D9
01B5:  RETLW  06
01B6:  RETLW  D2
01B7:  RETLW  06
01B8:  RETLW  CB
01B9:  RETLW  06
01BA:  RETLW  C4
01BB:  RETLW  06
01BC:  RETLW  BE
01BD:  RETLW  06
01BE:  RETLW  B7
01BF:  RETLW  06
01C0:  RETLW  B0
01C1:  RETLW  06
01C2:  RETLW  A9
01C3:  RETLW  06
01C4:  RETLW  A2
01C5:  RETLW  06
01C6:  RETLW  9C
01C7:  RETLW  06
01C8:  RETLW  95
01C9:  RETLW  06
01CA:  RETLW  8E
01CB:  RETLW  06
01CC:  RETLW  87
01CD:  RETLW  06
01CE:  RETLW  80
01CF:  RETLW  06
01D0:  RETLW  79
01D1:  RETLW  06
01D2:  RETLW  73
01D3:  RETLW  06
01D4:  RETLW  6C
01D5:  RETLW  06
01D6:  RETLW  65
01D7:  RETLW  06
01D8:  RETLW  5E
01D9:  RETLW  06
01DA:  RETLW  57
01DB:  RETLW  06
01DC:  RETLW  50
01DD:  RETLW  06
01DE:  RETLW  49
01DF:  RETLW  06
01E0:  RETLW  42
01E1:  RETLW  06
01E2:  RETLW  3B
01E3:  RETLW  06
01E4:  RETLW  34
01E5:  RETLW  06
01E6:  RETLW  2D
01E7:  RETLW  06
01E8:  RETLW  26
01E9:  RETLW  06
01EA:  RETLW  1F
01EB:  RETLW  06
01EC:  RETLW  18
01ED:  RETLW  06
01EE:  RETLW  11
01EF:  RETLW  06
01F0:  RETLW  0A
01F1:  RETLW  06
01F2:  RETLW  03
01F3:  RETLW  06
01F4:  RETLW  FC
01F5:  RETLW  05
01F6:  RETLW  F5
01F7:  RETLW  05
01F8:  RETLW  EE
01F9:  RETLW  05
01FA:  RETLW  E7
01FB:  RETLW  05
01FC:  RETLW  E0
01FD:  RETLW  05
01FE:  RETLW  D9
01FF:  RETLW  05
0200:  RETLW  D2
0201:  RETLW  05
0202:  RETLW  CB
0203:  RETLW  05
0204:  RETLW  C4
0205:  RETLW  05
0206:  RETLW  BD
0207:  RETLW  05
0208:  RETLW  B6
0209:  RETLW  05
020A:  RETLW  AF
020B:  RETLW  05
020C:  RETLW  A8
020D:  RETLW  05
020E:  RETLW  A1
020F:  RETLW  05
0210:  RETLW  9A
0211:  RETLW  05
0212:  RETLW  93
0213:  RETLW  05
0214:  RETLW  8C
0215:  RETLW  05
0216:  RETLW  85
0217:  RETLW  05
0218:  RETLW  7E
0219:  RETLW  05
021A:  RETLW  76
021B:  RETLW  05
021C:  RETLW  6F
021D:  RETLW  05
021E:  RETLW  68
021F:  RETLW  05
0220:  RETLW  61
0221:  RETLW  05
0222:  RETLW  5A
0223:  RETLW  05
0224:  RETLW  53
0225:  RETLW  05
0226:  RETLW  4C
0227:  RETLW  05
0228:  RETLW  45
0229:  RETLW  05
022A:  RETLW  3E
022B:  RETLW  05
022C:  RETLW  37
022D:  RETLW  05
022E:  RETLW  30
022F:  RETLW  05
0230:  RETLW  28
0231:  RETLW  05
0232:  RETLW  21
0233:  RETLW  05
0234:  RETLW  1A
0235:  RETLW  05
0236:  RETLW  13
0237:  RETLW  05
0238:  RETLW  0C
0239:  RETLW  05
023A:  RETLW  05
023B:  RETLW  05
023C:  RETLW  FE
023D:  RETLW  04
023E:  RETLW  F7
023F:  RETLW  04
0240:  RETLW  F0
0241:  RETLW  04
0242:  RETLW  E9
0243:  RETLW  04
0244:  RETLW  E2
0245:  RETLW  04
0246:  RETLW  DB
0247:  RETLW  04
0248:  RETLW  D3
0249:  RETLW  04
024A:  RETLW  CC
024B:  RETLW  04
024C:  RETLW  C5
024D:  RETLW  04
024E:  RETLW  BE
024F:  RETLW  04
0250:  RETLW  B7
0251:  RETLW  04
0252:  RETLW  B0
0253:  RETLW  04
0254:  RETLW  A9
0255:  RETLW  04
0256:  RETLW  A2
0257:  RETLW  04
0258:  RETLW  9B
0259:  RETLW  04
025A:  RETLW  94
025B:  RETLW  04
025C:  RETLW  8D
025D:  RETLW  04
025E:  RETLW  86
025F:  RETLW  04
0260:  RETLW  7F
0261:  RETLW  04
0262:  RETLW  78
0263:  RETLW  04
0264:  RETLW  71
0265:  RETLW  04
0266:  RETLW  6A
0267:  RETLW  04
0268:  RETLW  63
0269:  RETLW  04
026A:  RETLW  5C
026B:  RETLW  04
026C:  RETLW  55
026D:  RETLW  04
026E:  RETLW  4E
026F:  RETLW  04
0270:  RETLW  47
0271:  RETLW  04
0272:  RETLW  40
0273:  RETLW  04
0274:  RETLW  39
0275:  RETLW  04
0276:  RETLW  32
0277:  RETLW  04
0278:  RETLW  2B
0279:  RETLW  04
027A:  RETLW  24
027B:  RETLW  04
027C:  RETLW  1D
027D:  RETLW  04
027E:  RETLW  16
027F:  RETLW  04
0280:  RETLW  0F
0281:  RETLW  04
0282:  RETLW  08
0283:  RETLW  04
0284:  RETLW  01
0285:  RETLW  04
0286:  RETLW  FA
0287:  RETLW  03
0288:  RETLW  F3
0289:  RETLW  03
028A:  RETLW  EC
028B:  RETLW  03
028C:  RETLW  E5
028D:  RETLW  03
028E:  RETLW  DE
028F:  RETLW  03
0290:  RETLW  D8
0291:  RETLW  03
0292:  RETLW  D1
0293:  RETLW  03
0294:  RETLW  CA
0295:  RETLW  03
0296:  RETLW  C3
0297:  RETLW  03
0298:  RETLW  BC
0299:  RETLW  03
029A:  RETLW  B5
029B:  RETLW  03
029C:  RETLW  AF
029D:  RETLW  03
029E:  RETLW  A8
029F:  RETLW  03
02A0:  RETLW  A1
02A1:  RETLW  03
02A2:  RETLW  9A
02A3:  RETLW  03
02A4:  RETLW  93
02A5:  RETLW  03
02A6:  RETLW  8D
02A7:  RETLW  03
02A8:  RETLW  86
02A9:  RETLW  03
02AA:  RETLW  7F
02AB:  RETLW  03
02AC:  RETLW  78
02AD:  RETLW  03
02AE:  RETLW  72
02AF:  RETLW  03
02B0:  RETLW  6B
02B1:  RETLW  03
02B2:  RETLW  64
02B3:  RETLW  03
02B4:  RETLW  5D
02B5:  RETLW  03
02B6:  RETLW  57
02B7:  RETLW  03
02B8:  RETLW  50
02B9:  RETLW  03
02BA:  RETLW  49
02BB:  RETLW  03
02BC:  RETLW  43
02BD:  RETLW  03
02BE:  RETLW  3C
02BF:  RETLW  03
02C0:  RETLW  36
02C1:  RETLW  03
02C2:  RETLW  2F
02C3:  RETLW  03
02C4:  RETLW  28
02C5:  RETLW  03
02C6:  RETLW  22
02C7:  RETLW  03
02C8:  RETLW  1B
02C9:  RETLW  03
02CA:  RETLW  15
02CB:  RETLW  03
02CC:  RETLW  0E
02CD:  RETLW  03
02CE:  RETLW  08
02CF:  RETLW  03
02D0:  RETLW  01
02D1:  RETLW  03
02D2:  RETLW  FB
02D3:  RETLW  02
02D4:  RETLW  F4
02D5:  RETLW  02
02D6:  RETLW  EE
02D7:  RETLW  02
02D8:  RETLW  E7
02D9:  RETLW  02
02DA:  RETLW  E1
02DB:  RETLW  02
02DC:  RETLW  DB
02DD:  RETLW  02
02DE:  RETLW  D4
02DF:  RETLW  02
02E0:  RETLW  CE
02E1:  RETLW  02
02E2:  RETLW  C7
02E3:  RETLW  02
02E4:  RETLW  C1
02E5:  RETLW  02
02E6:  RETLW  BB
02E7:  RETLW  02
02E8:  RETLW  B4
02E9:  RETLW  02
02EA:  RETLW  AE
02EB:  RETLW  02
02EC:  RETLW  A8
02ED:  RETLW  02
02EE:  RETLW  A2
02EF:  RETLW  02
02F0:  RETLW  9B
02F1:  RETLW  02
02F2:  RETLW  95
02F3:  RETLW  02
02F4:  RETLW  8F
02F5:  RETLW  02
02F6:  RETLW  89
02F7:  RETLW  02
02F8:  RETLW  83
02F9:  RETLW  02
02FA:  RETLW  7D
02FB:  RETLW  02
02FC:  RETLW  76
02FD:  RETLW  02
02FE:  RETLW  70
02FF:  RETLW  02
0300:  RETLW  6A
0301:  RETLW  02
0302:  RETLW  64
0303:  RETLW  02
0304:  RETLW  5E
0305:  RETLW  02
0306:  RETLW  58
0307:  RETLW  02
0308:  RETLW  52
0309:  RETLW  02
030A:  RETLW  4C
030B:  RETLW  02
030C:  RETLW  46
030D:  RETLW  02
030E:  RETLW  40
030F:  RETLW  02
0310:  RETLW  3A
0311:  RETLW  02
0312:  RETLW  34
0313:  RETLW  02
0314:  RETLW  2E
0315:  RETLW  02
0316:  RETLW  29
0317:  RETLW  02
0318:  RETLW  23
0319:  RETLW  02
031A:  RETLW  1D
031B:  RETLW  02
031C:  RETLW  17
031D:  RETLW  02
031E:  RETLW  11
031F:  RETLW  02
0320:  RETLW  0C
0321:  RETLW  02
0322:  RETLW  06
0323:  RETLW  02
0324:  RETLW  00
0325:  RETLW  02
0326:  RETLW  FA
0327:  RETLW  01
0328:  RETLW  F5
0329:  RETLW  01
032A:  RETLW  EF
032B:  RETLW  01
032C:  RETLW  EA
032D:  RETLW  01
032E:  RETLW  E4
032F:  RETLW  01
0330:  RETLW  DE
0331:  RETLW  01
0332:  RETLW  D9
0333:  RETLW  01
0334:  RETLW  D3
0335:  RETLW  01
0336:  RETLW  CE
0337:  RETLW  01
0338:  RETLW  C8
0339:  RETLW  01
033A:  RETLW  C3
033B:  RETLW  01
033C:  RETLW  BE
033D:  RETLW  01
033E:  RETLW  B8
033F:  RETLW  01
0340:  RETLW  B3
0341:  RETLW  01
0342:  RETLW  AD
0343:  RETLW  01
0344:  RETLW  A8
0345:  RETLW  01
0346:  RETLW  A3
0347:  RETLW  01
0348:  RETLW  9E
0349:  RETLW  01
034A:  RETLW  98
034B:  RETLW  01
034C:  RETLW  93
034D:  RETLW  01
034E:  RETLW  8E
034F:  RETLW  01
0350:  RETLW  89
0351:  RETLW  01
0352:  RETLW  84
0353:  RETLW  01
0354:  RETLW  7E
0355:  RETLW  01
0356:  RETLW  79
0357:  RETLW  01
0358:  RETLW  74
0359:  RETLW  01
035A:  RETLW  6F
035B:  RETLW  01
035C:  RETLW  6A
035D:  RETLW  01
035E:  RETLW  65
035F:  RETLW  01
0360:  RETLW  60
0361:  RETLW  01
0362:  RETLW  5C
0363:  RETLW  01
0364:  RETLW  57
0365:  RETLW  01
0366:  RETLW  52
0367:  RETLW  01
0368:  RETLW  4D
0369:  RETLW  01
036A:  RETLW  48
036B:  RETLW  01
036C:  RETLW  43
036D:  RETLW  01
036E:  RETLW  3F
036F:  RETLW  01
0370:  RETLW  3A
0371:  RETLW  01
0372:  RETLW  35
0373:  RETLW  01
0374:  RETLW  31
0375:  RETLW  01
0376:  RETLW  2C
0377:  RETLW  01
0378:  RETLW  27
0379:  RETLW  01
037A:  RETLW  23
037B:  RETLW  01
037C:  RETLW  1E
037D:  RETLW  01
037E:  RETLW  1A
037F:  RETLW  01
0380:  RETLW  15
0381:  RETLW  01
0382:  RETLW  11
0383:  RETLW  01
0384:  RETLW  0D
0385:  RETLW  01
0386:  RETLW  08
0387:  RETLW  01
0388:  RETLW  04
0389:  RETLW  01
038A:  RETLW  00
038B:  RETLW  01
038C:  RETLW  FB
038D:  RETLW  00
038E:  RETLW  F7
038F:  RETLW  00
0390:  RETLW  F3
0391:  RETLW  00
0392:  RETLW  EF
0393:  RETLW  00
0394:  RETLW  EB
0395:  RETLW  00
0396:  RETLW  E6
0397:  RETLW  00
0398:  RETLW  E2
0399:  RETLW  00
039A:  RETLW  DE
039B:  RETLW  00
039C:  RETLW  DA
039D:  RETLW  00
039E:  RETLW  D6
039F:  RETLW  00
03A0:  RETLW  D2
03A1:  RETLW  00
03A2:  RETLW  CF
03A3:  RETLW  00
03A4:  RETLW  CB
03A5:  RETLW  00
03A6:  RETLW  C7
03A7:  RETLW  00
03A8:  RETLW  C3
03A9:  RETLW  00
03AA:  RETLW  BF
03AB:  RETLW  00
03AC:  RETLW  BC
03AD:  RETLW  00
03AE:  RETLW  B8
03AF:  RETLW  00
03B0:  RETLW  B4
03B1:  RETLW  00
03B2:  RETLW  B1
03B3:  RETLW  00
03B4:  RETLW  AD
03B5:  RETLW  00
03B6:  RETLW  AA
03B7:  RETLW  00
03B8:  RETLW  A6
03B9:  RETLW  00
03BA:  RETLW  A3
03BB:  RETLW  00
03BC:  RETLW  9F
03BD:  RETLW  00
03BE:  RETLW  9C
03BF:  RETLW  00
03C0:  RETLW  98
03C1:  RETLW  00
03C2:  RETLW  95
03C3:  RETLW  00
03C4:  RETLW  92
03C5:  RETLW  00
03C6:  RETLW  8F
03C7:  RETLW  00
03C8:  RETLW  8B
03C9:  RETLW  00
03CA:  RETLW  88
03CB:  RETLW  00
03CC:  RETLW  85
03CD:  RETLW  00
03CE:  RETLW  82
03CF:  RETLW  00
03D0:  RETLW  7F
03D1:  RETLW  00
03D2:  RETLW  7C
03D3:  RETLW  00
03D4:  RETLW  79
03D5:  RETLW  00
03D6:  RETLW  76
03D7:  RETLW  00
03D8:  RETLW  73
03D9:  RETLW  00
03DA:  RETLW  70
03DB:  RETLW  00
03DC:  RETLW  6D
03DD:  RETLW  00
03DE:  RETLW  6B
03DF:  RETLW  00
03E0:  RETLW  68
03E1:  RETLW  00
03E2:  RETLW  65
03E3:  RETLW  00
03E4:  RETLW  62
03E5:  RETLW  00
03E6:  RETLW  60
03E7:  RETLW  00
03E8:  RETLW  5D
03E9:  RETLW  00
03EA:  RETLW  5B
03EB:  RETLW  00
03EC:  RETLW  58
03ED:  RETLW  00
03EE:  RETLW  56
03EF:  RETLW  00
03F0:  RETLW  53
03F1:  RETLW  00
03F2:  RETLW  51
03F3:  RETLW  00
03F4:  RETLW  4F
03F5:  RETLW  00
03F6:  RETLW  4C
03F7:  RETLW  00
03F8:  RETLW  4A
03F9:  RETLW  00
03FA:  RETLW  48
03FB:  RETLW  00
03FC:  RETLW  46
03FD:  RETLW  00
03FE:  RETLW  44
03FF:  RETLW  00
0400:  RETLW  42
0401:  RETLW  00
0402:  RETLW  40
0403:  RETLW  00
0404:  RETLW  3E
0405:  RETLW  00
0406:  RETLW  3C
0407:  RETLW  00
0408:  RETLW  3A
0409:  RETLW  00
040A:  RETLW  38
040B:  RETLW  00
040C:  RETLW  36
040D:  RETLW  00
040E:  RETLW  34
040F:  RETLW  00
0410:  RETLW  33
0411:  RETLW  00
0412:  RETLW  31
0413:  RETLW  00
0414:  RETLW  2F
0415:  RETLW  00
0416:  RETLW  2E
0417:  RETLW  00
0418:  RETLW  2C
0419:  RETLW  00
041A:  RETLW  2B
041B:  RETLW  00
041C:  RETLW  29
041D:  RETLW  00
041E:  RETLW  28
041F:  RETLW  00
0420:  RETLW  27
0421:  RETLW  00
0422:  RETLW  25
0423:  RETLW  00
0424:  RETLW  24
0425:  RETLW  00
0426:  RETLW  23
0427:  RETLW  00
0428:  RETLW  22
0429:  RETLW  00
042A:  RETLW  21
042B:  RETLW  00
042C:  RETLW  20
042D:  RETLW  00
042E:  RETLW  1F
042F:  RETLW  00
0430:  RETLW  1E
0431:  RETLW  00
0432:  RETLW  1D
0433:  RETLW  00
0434:  RETLW  1C
0435:  RETLW  00
0436:  RETLW  1B
0437:  RETLW  00
0438:  RETLW  1A
0439:  RETLW  00
043A:  RETLW  19
043B:  RETLW  00
043C:  RETLW  19
043D:  RETLW  00
043E:  RETLW  18
043F:  RETLW  00
0440:  RETLW  18
0441:  RETLW  00
0442:  RETLW  17
0443:  RETLW  00
0444:  RETLW  17
0445:  RETLW  00
0446:  RETLW  16
0447:  RETLW  00
0448:  RETLW  16
0449:  RETLW  00
044A:  RETLW  15
044B:  RETLW  00
044C:  RETLW  15
044D:  RETLW  00
044E:  RETLW  15
044F:  RETLW  00
0450:  RETLW  15
0451:  RETLW  00
0452:  RETLW  15
0453:  RETLW  00
0454:  RETLW  15
0455:  RETLW  00
0456:  RETLW  14
0457:  RETLW  00
*
0759:  BSF    0A.0
075A:  BSF    0A.1
075B:  BSF    0A.2
075C:  ADDWF  02,F
075D:  GOTO   6D5
075E:  GOTO   6B9
075F:  GOTO   6F3
0760:  GOTO   70A
0761:  GOTO   725
....................  
.................... #list 
....................  
....................  
.................... #FUSES INTRC_IO                                                      // High Speed Oscilator (>4 Mhz) crystal 
.................... #FUSES NOWDT                                                         // Watch Dog Timer disabled 
.................... #FUSES PUT                                                           // Power Up Timer enabled 
.................... #FUSES MCLR                                                          // Master Clear pin enabled 
.................... #FUSES BROWNOUT                                                      // Brownout Reset enabled 
.................... #FUSES BORV25                                                        // Brownout Reset at 2.5V 
.................... #FUSES NOLVP                                                         // Low Voltage Programming disabled 
.................... #FUSES CPD                                                           // Data EEPROM code protected 
.................... #FUSES PROTECT                                                       // Code protected from reads 
.................... #FUSES NOIESO                                                        // Internal External Switch Over Mode disabled 
.................... #FUSES NOFCMEN                                                       // Fail-safe clock monitor disabled 
....................  
.................... #USE   DELAY(clock=32000000)                                         // delay() func. adjusted for 20Mhz Primary Osc. 
*
0458:  MOVLW  20
0459:  MOVWF  05
045A:  MOVLW  18
045B:  MOVWF  04
045C:  MOVF   00,W
045D:  BTFSC  03.2
045E:  GOTO   46C
045F:  MOVLW  0A
0460:  MOVWF  78
0461:  CLRF   77
0462:  DECFSZ 77,F
0463:  GOTO   462
0464:  DECFSZ 78,F
0465:  GOTO   461
0466:  MOVLW  5F
0467:  MOVWF  77
0468:  DECFSZ 77,F
0469:  GOTO   468
046A:  DECFSZ 00,F
046B:  GOTO   45F
046C:  RETURN
*
0620:  MOVLW  02
0621:  SUBWF  2C,F
0622:  BTFSS  03.0
0623:  GOTO   631
0624:  MOVLW  20
0625:  MOVWF  05
0626:  MOVLW  0C
0627:  MOVWF  04
0628:  MOVF   00,W
0629:  BTFSC  03.2
062A:  GOTO   631
062B:  GOTO   62F
062C:  GOTO   62D
062D:  GOTO   62E
062E:  NOP
062F:  DECFSZ 00,F
0630:  GOTO   62C
0631:  RETURN
....................  
.................... // Pin assignments 
.................... #DEFINE DRV_STEP     PIN_A0                  // Step output pin 
.................... #DEFINE DRV_RESET    PIN_A1                  // Reset output pin to driver (Active-high reset input initializes all internal logic and disables the Hbridge outputs. Internal pulldown.) 
.................... #DEFINE LM_UP        PIN_A2                  // Up limit switch input pin 
.................... #DEFINE LM_DOWN      PIN_A3                  // Down limit switch input pin 
.................... #DEFINE DRV_DIR      PIN_A4                  // Direction output pin 
....................  
.................... #DEFINE SPI_SDO      PIN_A6                  // SPI data output pin 
.................... #DEFINE SPI_CS       PIN_A7                  // SPI chip select output pin 
....................  
.................... #DEFINE BT_DOWN      PIN_B0                  // Down button input pin 
.................... #DEFINE SPI_SDI      PIN_B1                  // SPI data input pin 
....................  
.................... #DEFINE BT_UP        PIN_B3                  // Up button input pin 
.................... #DEFINE SPI_SCK      PIN_B4                  // SPI clock output pin 
....................  
.................... #DEFINE DRV_STALL    PIN_B6                  // Stall input pin from driver (Internal stall detect mode: logic low when motor stall detected. Pull up mevcut) 
.................... #DEFINE DRV_FAULT    PIN_B7                  // Fault input pin from driver (Logic low when in fault condition. Pull up mevcut) 
....................  
.................... //OPTION Register  
.................... #WORD OPTION         = 0x095 
.................... //Bits of Option Register 
.................... #BIT OPTION_WPUEN    = OPTION.7 
....................  
....................  
.................... // SPI Registers 
.................... #WORD SPI_SSP1CON1   = 0x215                 // Synchronous serial port control register 
.................... #WORD SPI_SSP1STAT   = 0x214                 // Synchronous serial port status register 
.................... #WORD SPI_SSP1BUF    = 0x211                 // Synchronous serial port buffer register 
.................... #WORD SPI_PIR1       = 0x011                 // Peripheral interrupt request register 
.................... // Pin function control registers 
.................... #WORD PIN_APFCON0    = 0x11D                 // Alternate pin function control register 0 
.................... #WORD PIN_APFCON1    = 0x11E                 // Alternate pin function control register 1 
....................  
.................... // Bits of SSP1CON1 register 
.................... #BIT SPI_WRITE_FLAG     = SPI_SSP1CON1.7     // Synchronous serial port write collision detect bit 
.................... #BIT SPI_ENABLE         = SPI_SSP1CON1.5     // Synchronous serial port enable bit 
.................... #BIT SPI_CLOCK_POLARITY = SPI_SSP1CON1.4     // Synchronous serial port clock polarity select bit 
.................... #BIT SPI_MODE_3         = SPI_SSP1CON1.3     // Synchronous serial port mode select bits 
.................... #BIT SPI_MODE_2         = SPI_SSP1CON1.2    
.................... #BIT SPI_MODE_1         = SPI_SSP1CON1.1    
.................... #BIT SPI_MODE_0         = SPI_SSP1CON1.0   
....................  
.................... // Bits of SPI_SSP1STAT register 
.................... #BIT SPI_INPUT_SAMPLE   = SPI_SSP1STAT.7     // Synchronous serial port data input sample bit 
.................... #BIT SPI_CLOCK_EDGE     = SPI_SSP1STAT.6     // Synchronous serial port clock edge select bit 
.................... #BIT SPI_BUFFER_STATUS  = SPI_SSP1STAT.0     // Synchronous serial port buffer full status bit 
....................  
.................... // Bits of SPI_PIR1 register 
.................... #BIT SPI_FLAG           = SPI_PIR1.3         // Synchronous serial port interrupt flag bit 
....................  
.................... // Bits of PIN_APFCON0 register 
.................... #BIT PIN_RX_SELECT      = PIN_APFCON0.7      // RX pin selection bit 
.................... #BIT PIN_SDO_SELECT     = PIN_APFCON0.6      // SDO pin selection bit  
.................... #BIT PIN_SS_SELECT      = PIN_APFCON0.5      // SS pin selection bit  
....................  
.................... // Bits of PIN_APFCON1 register 
.................... #BIT PIN_TX_SELECT      = PIN_APFCON1.0      // TX pin selection bit 
....................  
....................  
.................... enum  State     {OFF = 0, ON   = 1};                                 // Motor states 
.................... enum  Direction {UP  = 0, DOWN = 1};                                 // Direction of motion 
.................... enum  Motion    {ACC = 0, WALK = 1, RUN  = 2, DEC = 3, STEADY = 4};  // State of the motion 
....................  
.................... int16 step_count = 0; 
.................... int16 const run_lim          = 10;                                  // Duration of the slow motion (per count) before acclerating to high speed   
.................... unsigned int16   const acc_lim          = 550;                                  // Number of steps before we hit max speed. acc=10000 dec=10000  
.................... unsigned int16 const periods[acc_lim] = {2610,2620,2620,2620,2620,2620,2619,2619,2618,2618,2617,2617,2616,2616,2615, 
.................... 2614,2613,2612,2611,2610,2609,2608,2607,2606,2605,2604,2602,2601,2600,2598,2597,2595,2594,2592,2590,2589,2587,2585, 
.................... 2583,2581,2579,2577,2575,2573,2571,2569,2567,2565,2562,2560,2558,2555,2553,2550,2548,2545,2543,2540,2537,2534,2532, 
.................... 2529,2526,2523,2520,2517,2514,2511,2508,2505,2502,2498,2495,2492,2489,2485,2482,2478,2475,2471,2468,2464,2461,2457, 
.................... 2453,2450,2446,2442,2438,2434,2431,2427,2423,2419,2415,2411,2406,2402,2398,2394,2390,2385,2381,2377,2372,2368,2364, 
.................... 2359,2355,2350,2346,2341,2336,2332,2327,2322,2318,2313,2308,2303,2298,2293,2289,2284,2279,2274,2269,2264,2259,2253, 
.................... 2248,2243,2238,2233,2227,2222,2217,2212,2206,2201,2195,2190,2185,2179,2174,2168,2163,2157,2151,2146,2140,2135,2129, 
.................... 2123,2117,2112,2106,2100,2094,2088,2083,2077,2071,2065,2059,2053,2047,2041,2035,2029,2023,2017,2011,2004,1998,1992, 
.................... 1986,1980,1974,1967,1961,1955,1949,1942,1936,1930,1923,1917,1910,1904,1898,1891,1885,1878,1872,1865,1859,1852,1846, 
.................... 1839,1833,1826,1819,1813,1806,1800,1793,1786,1780,1773,1766,1759,1753,1746,1739,1732,1726,1719,1712,1705,1698,1692, 
.................... 1685,1678,1671,1664,1657,1651,1644,1637,1630,1623,1616,1609,1602,1595,1588,1581,1574,1567,1560,1553,1546,1539,1532, 
.................... 1525,1518,1511,1504,1497,1490,1483,1476,1469,1462,1455,1448,1441,1434,1427,1420,1413,1406,1398,1391,1384,1377,1370, 
.................... 1363,1356,1349,1342,1335,1328,1320,1313,1306,1299,1292,1285,1278,1271,1264,1257,1250,1243,1235,1228,1221,1214,1207, 
.................... 1200,1193,1186,1179,1172,1165,1158,1151,1144,1137,1130,1123,1116,1109,1102,1095,1088,1081,1074,1067,1060,1053,1046, 
.................... 1039,1032,1025,1018,1011,1004,997,990,984,977,970,963,956,949,943,936,929,922,915,909,902,895,888,882,875,868,861, 
.................... 855,848,841,835,828,822,815,808,802,795,789,782,776,769,763,756,750,743,737,731,724,718,711,705,699,692,686,680,674, 
.................... 667,661,655,649,643,637,630,624,618,612,606,600,594,588,582,576,570,564,558,553,547,541,535,529,524,518,512,506,501, 
.................... 495,490,484,478,473,467,462,456,451,446,440,435,429,424,419,414,408,403,398,393,388,382,377,372,367,362,357,352,348, 
.................... 343,338,333,328,323,319,314,309,305,300,295,291,286,282,277,273,269,264,260,256,251,247,243,239,235,230,226,222,218, 
.................... 214,210,207,203,199,195,191,188,184,180,177,173,170,166,163,159,156,152,149,146,143,139,136,133,130,127,124,121,118, 
.................... 115,112,109,107,104,101,98,96,93,91,88,86,83,81,79,76,74,72,70,68,66,64,62,60,58,56,54,52,51,49,47,46,44,43,41,40,39, 
.................... 37,36,35,34,33,32,31,30,29,28,27,26,25,25,24,24,23,23,22,22,21,21,21,21,21,21,20 
....................  
.................... }; 
....................  
.................... int const off_time = 10;                                             // Off time of the pwm signal (should be smaller than period) 
.................... int8      motion_state = STEADY;                                     // Current state of the motion 
....................  
.................... void set_SPI() 
.................... { 
....................    // Disable SPI to set registers 
....................    SPI_ENABLE = 0; 
*
0473:  MOVLB  04
0474:  BCF    15.5
....................    // Set idle state of the clock to low  
....................    SPI_CLOCK_POLARITY = 0; 
0475:  BCF    15.4
....................    // Set SPI mode to SPI  
....................    SPI_MODE_3 = 0;  
0476:  BCF    15.3
....................    SPI_MODE_2 = 0; 
0477:  BCF    15.2
....................    SPI_MODE_1 = 1; 
0478:  BSF    15.1
....................    SPI_MODE_0 = 0; 
0479:  BCF    15.0
....................    // Input data sampled at the middle of data output time 
....................    SPI_INPUT_SAMPLE = 0; 
047A:  BCF    14.7
....................    // Transmit occurs on transition from active to idle clock state 
....................    SPI_CLOCK_EDGE = 1; 
047B:  BSF    14.6
....................  
....................    // Enable SPI 
....................    SPI_ENABLE = 1; 
047C:  BSF    15.5
047D:  MOVLP  00
047E:  MOVLB  00
047F:  GOTO   780 (RETURN)
.................... } 
....................  
.................... void set_variables() 
.................... { 
....................    output_low(SPI_CS);     // Chip select is active high so keep it low to prevent out-of-sync transaction 
0480:  MOVLB  01
0481:  BCF    0C.7
0482:  MOVLB  02
0483:  BCF    0C.7
....................    output_low(DRV_RESET);  // Reset is active high so keep reset pin low to activate driver  
0484:  MOVLB  01
0485:  BCF    0C.1
0486:  MOVLB  02
0487:  BCF    0C.1
0488:  MOVLP  00
0489:  MOVLB  00
048A:  GOTO   781 (RETURN)
.................... } 
....................  
.................... void set_pins() 
.................... { 
....................    // Set RB2 as RX pin 
....................    //PIN_RX_SELECT = 1; 
....................    // Set RA6 as SDO pin 
....................    PIN_SDO_SELECT = 1; 
*
046D:  MOVLB  02
046E:  BSF    1D.6
....................    // Set RA5 as SS pin 
....................    PIN_SS_SELECT = 1; 
046F:  BSF    1D.5
0470:  MOVLP  00
0471:  MOVLB  00
0472:  GOTO   77F (RETURN)
....................    // Set RB5 as TX pin 
....................    //PIN_TX_SELECT = 1; 
.................... } 
....................  
....................  
.................... // Sets the motor state 
.................... void md_set_state(State value) 
.................... { 
....................    if (value == on) 
*
048B:  DECFSZ 33,W
048C:  GOTO   4B3
....................    { 
....................    output_high(SPI_CS); 
048D:  MOVLB  01
048E:  BCF    0C.7
048F:  MOVLB  02
0490:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Ctrl_1     = 0b00001100; 
....................                     //76543210 
....................    int Ctrl_0     = 0b00011001;// Set enable pin to given motor state 
0491:  MOVLW  0C
0492:  MOVLB  00
0493:  MOVWF  34
0494:  MOVLW  19
0495:  MOVWF  35
....................    SPI_SSP1BUF = Ctrl_1; 
0496:  MOVLB  04
0497:  CLRF   12
0498:  MOVLB  00
0499:  MOVF   34,W
049A:  MOVLB  04
049B:  MOVWF  11
....................    while (!SPI_FLAG); 
049C:  MOVLB  00
049D:  BTFSS  11.3
049E:  GOTO   49D
....................    SPI_FLAG = 0; 
049F:  BCF    11.3
....................    SPI_SSP1BUF = Ctrl_0; 
04A0:  MOVLB  04
04A1:  CLRF   12
04A2:  MOVLB  00
04A3:  MOVF   35,W
04A4:  MOVLB  04
04A5:  MOVWF  11
....................    while (!SPI_FLAG); 
04A6:  MOVLB  00
04A7:  BTFSS  11.3
04A8:  GOTO   4A7
....................    SPI_FLAG = 0; 
04A9:  BCF    11.3
....................    output_low(SPI_CS); 
04AA:  MOVLB  01
04AB:  BCF    0C.7
04AC:  MOVLB  02
04AD:  BCF    0C.7
....................    delay_ms(10); 
04AE:  MOVLW  0A
04AF:  MOVLB  00
04B0:  MOVWF  38
04B1:  CALL   458
....................    } 
04B2:  GOTO   4DB
....................    else if (value == off) 
04B3:  MOVF   33,F
04B4:  BTFSS  03.2
04B5:  GOTO   4DB
....................    { 
....................    output_high(SPI_CS); 
04B6:  MOVLB  01
04B7:  BCF    0C.7
04B8:  MOVLB  02
04B9:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Ctrl_1     = 0b00001100; 
....................                     //76543210 
....................    int Ctrl_0     = 0b00011000;// Set enable pin to given motor state 
04BA:  MOVLW  0C
04BB:  MOVLB  00
04BC:  MOVWF  36
04BD:  MOVLW  18
04BE:  MOVWF  37
....................    SPI_SSP1BUF = Ctrl_1; 
04BF:  MOVLB  04
04C0:  CLRF   12
04C1:  MOVLB  00
04C2:  MOVF   36,W
04C3:  MOVLB  04
04C4:  MOVWF  11
....................    while (!SPI_FLAG); 
04C5:  MOVLB  00
04C6:  BTFSS  11.3
04C7:  GOTO   4C6
....................    SPI_FLAG = 0; 
04C8:  BCF    11.3
....................    SPI_SSP1BUF = Ctrl_0; 
04C9:  MOVLB  04
04CA:  CLRF   12
04CB:  MOVLB  00
04CC:  MOVF   37,W
04CD:  MOVLB  04
04CE:  MOVWF  11
....................    while (!SPI_FLAG); 
04CF:  MOVLB  00
04D0:  BTFSS  11.3
04D1:  GOTO   4D0
....................    SPI_FLAG = 0; 
04D2:  BCF    11.3
....................    output_low(SPI_CS); 
04D3:  MOVLB  01
04D4:  BCF    0C.7
04D5:  MOVLB  02
04D6:  BCF    0C.7
....................    delay_ms(10); 
04D7:  MOVLW  0A
04D8:  MOVLB  00
04D9:  MOVWF  38
04DA:  CALL   458
....................    } 
04DB:  RETURN
.................... } 
.................... // Sets the motion direction 
.................... void md_set_direction(Direction value) 
.................... { 
....................       restart_wdt();//watchdog sýfýrlanacak 
*
0612:  CLRWDT
....................       output_bit(DRV_DIR, !value);                                     // Set direction pin to given value 
0613:  MOVF   29,F
0614:  BTFSC  03.2
0615:  GOTO   61A
0616:  MOVLB  02
0617:  BCF    0C.4
0618:  GOTO   61C
0619:  MOVLB  00
061A:  MOVLB  02
061B:  BSF    0C.4
061C:  MOVLB  01
061D:  BCF    0C.4
061E:  MOVLB  00
061F:  RETURN
.................... } 
.................... // Initializes motor driver 
.................... void md_init() 
.................... { 
....................    md_set_state(OFF);                                                 // Motor off 
*
04DC:  CLRF   33
04DD:  CALL   48B
....................    output_high(DRV_DIR);                                              // Direction control pin can be in any state 
04DE:  MOVLB  01
04DF:  BCF    0C.4
04E0:  MOVLB  02
04E1:  BSF    0C.4
....................    output_high(DRV_STEP);                                             // Keep step input pin high (A low-to-high transition advances the motor one increment  
04E2:  MOVLB  01
04E3:  BCF    0C.0
04E4:  MOVLB  02
04E5:  BSF    0C.0
....................     
....................    output_high(SPI_CS); 
04E6:  MOVLB  01
04E7:  BCF    0C.7
04E8:  MOVLB  02
04E9:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Ctrl_1     = 0b00001100; 
....................                     //76543210 
....................    int Ctrl_0     = 0b00011000; 
04EA:  MOVLW  0C
04EB:  MOVLB  00
04EC:  MOVWF  23
04ED:  MOVLW  18
04EE:  MOVWF  24
....................    SPI_SSP1BUF = Ctrl_1; 
04EF:  MOVLB  04
04F0:  CLRF   12
04F1:  MOVLB  00
04F2:  MOVF   23,W
04F3:  MOVLB  04
04F4:  MOVWF  11
....................    while (!SPI_FLAG); 
04F5:  MOVLB  00
04F6:  BTFSS  11.3
04F7:  GOTO   4F6
....................    SPI_FLAG = 0; 
04F8:  BCF    11.3
....................    SPI_SSP1BUF = Ctrl_0; 
04F9:  MOVLB  04
04FA:  CLRF   12
04FB:  MOVLB  00
04FC:  MOVF   24,W
04FD:  MOVLB  04
04FE:  MOVWF  11
....................    while (!SPI_FLAG); 
04FF:  MOVLB  00
0500:  BTFSS  11.3
0501:  GOTO   500
....................    SPI_FLAG = 0; 
0502:  BCF    11.3
....................    output_low(SPI_CS); 
0503:  MOVLB  01
0504:  BCF    0C.7
0505:  MOVLB  02
0506:  BCF    0C.7
....................    delay_ms(10); 
0507:  MOVLW  0A
0508:  MOVLB  00
0509:  MOVWF  38
050A:  CALL   458
....................  
....................    output_high(SPI_CS); 
050B:  MOVLB  01
050C:  BCF    0C.7
050D:  MOVLB  02
050E:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Torque_1   = 0b00010000; 
....................                     //76543210 
....................    int Torque_0   = 0b10110111; 
050F:  MOVLW  10
0510:  MOVLB  00
0511:  MOVWF  25
0512:  MOVLW  B7
0513:  MOVWF  26
....................    SPI_SSP1BUF = Torque_1; 
0514:  MOVLB  04
0515:  CLRF   12
0516:  MOVLB  00
0517:  MOVF   25,W
0518:  MOVLB  04
0519:  MOVWF  11
....................    while (!SPI_FLAG); 
051A:  MOVLB  00
051B:  BTFSS  11.3
051C:  GOTO   51B
....................    SPI_FLAG = 0; 
051D:  BCF    11.3
....................    SPI_SSP1BUF = Torque_0; 
051E:  MOVLB  04
051F:  CLRF   12
0520:  MOVLB  00
0521:  MOVF   26,W
0522:  MOVLB  04
0523:  MOVWF  11
....................    while (!SPI_FLAG); 
0524:  MOVLB  00
0525:  BTFSS  11.3
0526:  GOTO   525
....................    SPI_FLAG = 0; 
0527:  BCF    11.3
....................    output_low(SPI_CS); 
0528:  MOVLB  01
0529:  BCF    0C.7
052A:  MOVLB  02
052B:  BCF    0C.7
....................    delay_ms(10); 
052C:  MOVLW  0A
052D:  MOVLB  00
052E:  MOVWF  38
052F:  CALL   458
....................     
....................    output_high(SPI_CS); 
0530:  MOVLB  01
0531:  BCF    0C.7
0532:  MOVLB  02
0533:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Off_1      = 0b00100000; 
....................                     //76543210 
....................    int Off_0      = 0b01111001; 
0534:  MOVLW  20
0535:  MOVLB  00
0536:  MOVWF  27
0537:  MOVLW  79
0538:  MOVWF  28
....................    SPI_SSP1BUF = Off_1; 
0539:  MOVLB  04
053A:  CLRF   12
053B:  MOVLB  00
053C:  MOVF   27,W
053D:  MOVLB  04
053E:  MOVWF  11
....................    while (!SPI_FLAG); 
053F:  MOVLB  00
0540:  BTFSS  11.3
0541:  GOTO   540
....................    SPI_FLAG = 0; 
0542:  BCF    11.3
....................    SPI_SSP1BUF = Off_0; 
0543:  MOVLB  04
0544:  CLRF   12
0545:  MOVLB  00
0546:  MOVF   28,W
0547:  MOVLB  04
0548:  MOVWF  11
....................    while (!SPI_FLAG); 
0549:  MOVLB  00
054A:  BTFSS  11.3
054B:  GOTO   54A
....................    SPI_FLAG = 0; 
054C:  BCF    11.3
....................    output_low(SPI_CS); 
054D:  MOVLB  01
054E:  BCF    0C.7
054F:  MOVLB  02
0550:  BCF    0C.7
....................    delay_ms(10); 
0551:  MOVLW  0A
0552:  MOVLB  00
0553:  MOVWF  38
0554:  CALL   458
....................     
....................    output_high(SPI_CS); 
0555:  MOVLB  01
0556:  BCF    0C.7
0557:  MOVLB  02
0558:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Blank_1    = 0b00110001; 
....................                     //76543210 
....................    int Blank_0    = 0b10010110; 
0559:  MOVLW  31
055A:  MOVLB  00
055B:  MOVWF  29
055C:  MOVLW  96
055D:  MOVWF  2A
....................    SPI_SSP1BUF = Blank_1; 
055E:  MOVLB  04
055F:  CLRF   12
0560:  MOVLB  00
0561:  MOVF   29,W
0562:  MOVLB  04
0563:  MOVWF  11
....................    while (!SPI_FLAG); 
0564:  MOVLB  00
0565:  BTFSS  11.3
0566:  GOTO   565
....................    SPI_FLAG = 0; 
0567:  BCF    11.3
....................    SPI_SSP1BUF = Blank_0; 
0568:  MOVLB  04
0569:  CLRF   12
056A:  MOVLB  00
056B:  MOVF   2A,W
056C:  MOVLB  04
056D:  MOVWF  11
....................    while (!SPI_FLAG); 
056E:  MOVLB  00
056F:  BTFSS  11.3
0570:  GOTO   56F
....................    SPI_FLAG = 0; 
0571:  BCF    11.3
....................    output_low(SPI_CS); 
0572:  MOVLB  01
0573:  BCF    0C.7
0574:  MOVLB  02
0575:  BCF    0C.7
....................    delay_ms(10); 
0576:  MOVLW  0A
0577:  MOVLB  00
0578:  MOVWF  38
0579:  CALL   458
....................     
....................    output_high(SPI_CS); 
057A:  MOVLB  01
057B:  BCF    0C.7
057C:  MOVLB  02
057D:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Decay_1    = 0b01000101; 
....................                     //76543210 
....................    int Decay_0    = 0b00011100; 
057E:  MOVLW  45
057F:  MOVLB  00
0580:  MOVWF  2B
0581:  MOVLW  1C
0582:  MOVWF  2C
....................    SPI_SSP1BUF = Decay_1; 
0583:  MOVLB  04
0584:  CLRF   12
0585:  MOVLB  00
0586:  MOVF   2B,W
0587:  MOVLB  04
0588:  MOVWF  11
....................    while (!SPI_FLAG); 
0589:  MOVLB  00
058A:  BTFSS  11.3
058B:  GOTO   58A
....................    SPI_FLAG = 0; 
058C:  BCF    11.3
....................    SPI_SSP1BUF = Decay_0; 
058D:  MOVLB  04
058E:  CLRF   12
058F:  MOVLB  00
0590:  MOVF   2C,W
0591:  MOVLB  04
0592:  MOVWF  11
....................    while (!SPI_FLAG); 
0593:  MOVLB  00
0594:  BTFSS  11.3
0595:  GOTO   594
....................    SPI_FLAG = 0; 
0596:  BCF    11.3
....................    output_low(SPI_CS); 
0597:  MOVLB  01
0598:  BCF    0C.7
0599:  MOVLB  02
059A:  BCF    0C.7
....................    delay_ms(10); 
059B:  MOVLW  0A
059C:  MOVLB  00
059D:  MOVWF  38
059E:  CALL   458
....................     
....................    output_high(SPI_CS); 
059F:  MOVLB  01
05A0:  BCF    0C.7
05A1:  MOVLB  02
05A2:  BSF    0C.7
....................    int Stall_1    = 0b01011001; 
....................    int Stall_0    = 0b00010100; 
05A3:  MOVLW  59
05A4:  MOVLB  00
05A5:  MOVWF  2D
05A6:  MOVLW  14
05A7:  MOVWF  2E
....................    SPI_SSP1BUF = Stall_1; 
05A8:  MOVLB  04
05A9:  CLRF   12
05AA:  MOVLB  00
05AB:  MOVF   2D,W
05AC:  MOVLB  04
05AD:  MOVWF  11
....................    while (!SPI_FLAG); 
05AE:  MOVLB  00
05AF:  BTFSS  11.3
05B0:  GOTO   5AF
....................    SPI_FLAG = 0; 
05B1:  BCF    11.3
....................    SPI_SSP1BUF = Stall_0; 
05B2:  MOVLB  04
05B3:  CLRF   12
05B4:  MOVLB  00
05B5:  MOVF   2E,W
05B6:  MOVLB  04
05B7:  MOVWF  11
....................    while (!SPI_FLAG); 
05B8:  MOVLB  00
05B9:  BTFSS  11.3
05BA:  GOTO   5B9
....................    SPI_FLAG = 0; 
05BB:  BCF    11.3
....................    output_low(SPI_CS); 
05BC:  MOVLB  01
05BD:  BCF    0C.7
05BE:  MOVLB  02
05BF:  BCF    0C.7
....................    delay_ms(10); 
05C0:  MOVLW  0A
05C1:  MOVLB  00
05C2:  MOVWF  38
05C3:  CALL   458
....................     
....................    output_high(SPI_CS); 
05C4:  MOVLB  01
05C5:  BCF    0C.7
05C6:  MOVLB  02
05C7:  BSF    0C.7
....................                     //FEDCBA98 
....................    int Drive_1    = 0b01101010; 
....................                     //76543210 
....................    int Drive_0    = 0b10100000; 
05C8:  MOVLW  6A
05C9:  MOVLB  00
05CA:  MOVWF  2F
05CB:  MOVLW  A0
05CC:  MOVWF  30
....................    SPI_SSP1BUF = Drive_1; 
05CD:  MOVLB  04
05CE:  CLRF   12
05CF:  MOVLB  00
05D0:  MOVF   2F,W
05D1:  MOVLB  04
05D2:  MOVWF  11
....................    while (!SPI_FLAG); 
05D3:  MOVLB  00
05D4:  BTFSS  11.3
05D5:  GOTO   5D4
....................    SPI_FLAG = 0; 
05D6:  BCF    11.3
....................    SPI_SSP1BUF = Drive_0; 
05D7:  MOVLB  04
05D8:  CLRF   12
05D9:  MOVLB  00
05DA:  MOVF   30,W
05DB:  MOVLB  04
05DC:  MOVWF  11
....................    while (!SPI_FLAG); 
05DD:  MOVLB  00
05DE:  BTFSS  11.3
05DF:  GOTO   5DE
....................    SPI_FLAG = 0; 
05E0:  BCF    11.3
....................    output_low(SPI_CS); 
05E1:  MOVLB  01
05E2:  BCF    0C.7
05E3:  MOVLB  02
05E4:  BCF    0C.7
....................    delay_ms(10); 
05E5:  MOVLW  0A
05E6:  MOVLB  00
05E7:  MOVWF  38
05E8:  CALL   458
....................     
....................    output_high(SPI_CS); 
05E9:  MOVLB  01
05EA:  BCF    0C.7
05EB:  MOVLB  02
05EC:  BSF    0C.7
....................    int Status_1   = 0b01110000; 
....................    int Status_0   = 0b00000000; 
05ED:  MOVLW  70
05EE:  MOVLB  00
05EF:  MOVWF  31
05F0:  CLRF   32
....................    SPI_SSP1BUF = Status_1; 
05F1:  MOVLB  04
05F2:  CLRF   12
05F3:  MOVLB  00
05F4:  MOVF   31,W
05F5:  MOVLB  04
05F6:  MOVWF  11
....................    while (!SPI_FLAG); 
05F7:  MOVLB  00
05F8:  BTFSS  11.3
05F9:  GOTO   5F8
....................    SPI_FLAG = 0; 
05FA:  BCF    11.3
....................    SPI_SSP1BUF = Status_0; 
05FB:  MOVLB  04
05FC:  CLRF   12
05FD:  MOVLB  00
05FE:  MOVF   32,W
05FF:  MOVLB  04
0600:  MOVWF  11
....................    while (!SPI_FLAG); 
0601:  MOVLB  00
0602:  BTFSS  11.3
0603:  GOTO   602
....................    SPI_FLAG = 0; 
0604:  BCF    11.3
....................    output_low(SPI_CS); 
0605:  MOVLB  01
0606:  BCF    0C.7
0607:  MOVLB  02
0608:  BCF    0C.7
....................    delay_ms(10); 
0609:  MOVLW  0A
060A:  MOVLB  00
060B:  MOVWF  38
060C:  CALL   458
....................  
....................    delay_ms(100); 
060D:  MOVLW  64
060E:  MOVWF  38
060F:  CALL   458
0610:  MOVLP  00
0611:  GOTO   782 (RETURN)
.................... } 
....................  
.................... // Starts motion cycle 
.................... void motion_cycle() 
*
0632:  CLRF   24
0633:  CLRF   23
0634:  CLRF   26
0635:  CLRF   25
0636:  BCF    27.0
0637:  MOVLW  01
0638:  MOVWF  28
.................... { 
....................    // Start cycle 
....................    int16 step_count = 0; 
....................    int16 period     = 0; 
....................    int1  running    = 0; 
....................    int   upwards    = 1;  
....................    while(true) 
....................    { 
....................       if(upwards) 
0639:  MOVF   28,F
063A:  BTFSC  03.2
063B:  GOTO   677
....................       { 
....................          if(input(LM_UP) == 1) 
063C:  MOVLB  01
063D:  BSF    0C.2
063E:  MOVLB  00
063F:  BTFSS  0C.2
0640:  GOTO   655
....................          { 
....................              
....................             upwards = 0; 
0641:  CLRF   28
....................             md_set_state(OFF); 
0642:  CLRF   33
0643:  CALL   48B
....................             delay_ms(1000); 
0644:  MOVLW  04
0645:  MOVWF  29
0646:  MOVLW  FA
0647:  MOVWF  38
0648:  CALL   458
0649:  DECFSZ 29,F
064A:  GOTO   646
....................             md_set_state(ON); 
064B:  MOVLW  01
064C:  MOVWF  33
064D:  CALL   48B
....................             delay_ms(1000); 
064E:  MOVLW  04
064F:  MOVWF  29
0650:  MOVLW  FA
0651:  MOVWF  38
0652:  CALL   458
0653:  DECFSZ 29,F
0654:  GOTO   650
....................          } 
....................           
....................          if(input(LM_UP) == 0 && running == 0) 
0655:  MOVLB  01
0656:  BSF    0C.2
0657:  MOVLB  00
0658:  BTFSC  0C.2
0659:  GOTO   661
065A:  BTFSC  27.0
065B:  GOTO   661
....................          { 
....................             md_set_direction(UP); 
065C:  CLRF   29
065D:  CALL   612
....................             motion_state = WALK; 
065E:  MOVLW  01
065F:  MOVWF  22
....................          } 
0660:  GOTO   676
....................          else if(input(LM_UP) && running == 1) 
0661:  MOVLB  01
0662:  BSF    0C.2
0663:  MOVLB  00
0664:  BTFSS  0C.2
0665:  GOTO   676
0666:  BTFSS  27.0
0667:  GOTO   676
....................          { 
....................             if(motion_state == ACC || motion_state == RUN) 
0668:  MOVF   22,F
0669:  BTFSC  03.2
066A:  GOTO   66F
066B:  MOVF   22,W
066C:  SUBLW  02
066D:  BTFSS  03.2
066E:  GOTO   672
....................                motion_state = DEC; 
066F:  MOVLW  03
0670:  MOVWF  22
0671:  GOTO   676
....................             else if(motion_state == WALK) 
0672:  DECFSZ 22,W
0673:  GOTO   676
....................                motion_state = STEADY; 
0674:  MOVLW  04
0675:  MOVWF  22
....................          } 
....................       } 
0676:  GOTO   6B3
....................       else 
....................       {    
....................          if(input(LM_DOWN)== 1) 
0677:  MOVLB  01
0678:  BSF    0C.3
0679:  MOVLB  00
067A:  BTFSS  0C.3
067B:  GOTO   691
....................          { 
....................              
....................             upwards= 1; 
067C:  MOVLW  01
067D:  MOVWF  28
....................             md_set_state(OFF); 
067E:  CLRF   33
067F:  CALL   48B
....................             delay_ms(1000); 
0680:  MOVLW  04
0681:  MOVWF  29
0682:  MOVLW  FA
0683:  MOVWF  38
0684:  CALL   458
0685:  DECFSZ 29,F
0686:  GOTO   682
....................             md_set_state(ON); 
0687:  MOVLW  01
0688:  MOVWF  33
0689:  CALL   48B
....................             delay_ms(1000); 
068A:  MOVLW  04
068B:  MOVWF  29
068C:  MOVLW  FA
068D:  MOVWF  38
068E:  CALL   458
068F:  DECFSZ 29,F
0690:  GOTO   68C
....................          } 
....................           
....................          if(input(LM_DOWN) == 0 && running == 0) 
0691:  MOVLB  01
0692:  BSF    0C.3
0693:  MOVLB  00
0694:  BTFSC  0C.3
0695:  GOTO   69E
0696:  BTFSC  27.0
0697:  GOTO   69E
....................          { 
....................             md_set_direction(DOWN); 
0698:  MOVLW  01
0699:  MOVWF  29
069A:  CALL   612
....................             motion_state = WALK; 
069B:  MOVLW  01
069C:  MOVWF  22
....................          } 
069D:  GOTO   6B3
....................          else if(input(LM_DOWN) && running == 1) 
069E:  MOVLB  01
069F:  BSF    0C.3
06A0:  MOVLB  00
06A1:  BTFSS  0C.3
06A2:  GOTO   6B3
06A3:  BTFSS  27.0
06A4:  GOTO   6B3
....................          { 
....................             if(motion_state == ACC || motion_state == RUN) 
06A5:  MOVF   22,F
06A6:  BTFSC  03.2
06A7:  GOTO   6AC
06A8:  MOVF   22,W
06A9:  SUBLW  02
06AA:  BTFSS  03.2
06AB:  GOTO   6AF
....................                motion_state = DEC; 
06AC:  MOVLW  03
06AD:  MOVWF  22
06AE:  GOTO   6B3
....................             else if(motion_state == WALK) 
06AF:  DECFSZ 22,W
06B0:  GOTO   6B3
....................                motion_state = STEADY; 
06B1:  MOVLW  04
06B2:  MOVWF  22
....................          } 
....................       } 
....................        
....................        
....................  
....................       switch(motion_state)  
06B3:  MOVF   22,W
06B4:  ADDLW  FB
06B5:  BTFSC  03.0
06B6:  GOTO   72E
06B7:  ADDLW  05
06B8:  GOTO   759
....................       {  
....................          case WALK: 
....................             step_count++; 
06B9:  INCF   23,F
06BA:  BTFSC  03.2
06BB:  INCF   24,F
....................           
....................             if(step_count == 1) 
06BC:  DECFSZ 23,W
06BD:  GOTO   6CA
06BE:  MOVF   24,F
06BF:  BTFSS  03.2
06C0:  GOTO   6CA
....................             { 
....................                running = 1; 
06C1:  BSF    27.0
....................                md_set_state(ON); 
06C2:  MOVLW  01
06C3:  MOVWF  33
06C4:  CALL   48B
....................                period = periods[0]; 
06C5:  MOVLW  0A
06C6:  MOVWF  26
06C7:  MOVLW  32
06C8:  MOVWF  25
....................             } 
06C9:  GOTO   6D4
....................             else if(step_count == run_lim) 
06CA:  MOVF   23,W
06CB:  SUBLW  0A
06CC:  BTFSS  03.2
06CD:  GOTO   6D4
06CE:  MOVF   24,F
06CF:  BTFSS  03.2
06D0:  GOTO   6D4
....................             { 
....................                step_count   = 0; 
06D1:  CLRF   24
06D2:  CLRF   23
....................                motion_state = ACC; 
06D3:  CLRF   22
....................             } 
....................             break; 
06D4:  GOTO   72E
....................          case ACC: 
....................             if(step_count == acc_lim - 1) 
06D5:  MOVF   23,W
06D6:  SUBLW  25
06D7:  BTFSS  03.2
06D8:  GOTO   6DF
06D9:  MOVF   24,W
06DA:  SUBLW  02
06DB:  BTFSS  03.2
06DC:  GOTO   6DF
....................             { 
....................                motion_state = RUN; 
06DD:  MOVLW  02
06DE:  MOVWF  22
....................             } 
....................                 
....................             period = periods[step_count]; 
06DF:  BCF    03.0
06E0:  RLF    23,W
06E1:  MOVWF  79
06E2:  RLF    24,W
06E3:  MOVWF  7A
06E4:  MOVF   79,W
06E5:  MOVWF  29
06E6:  CALL   003
06E7:  MOVWF  77
06E8:  INCF   29,W
06E9:  CALL   003
06EA:  MOVWF  7A
06EB:  MOVF   77,W
06EC:  MOVWF  25
06ED:  MOVF   7A,W
06EE:  MOVWF  26
....................             step_count++; 
06EF:  INCF   23,F
06F0:  BTFSC  03.2
06F1:  INCF   24,F
....................             break; 
06F2:  GOTO   72E
....................              
....................          case RUN: 
....................             period = periods[step_count - 1]; 
06F3:  MOVLW  01
06F4:  SUBWF  23,W
06F5:  MOVWF  29
06F6:  MOVLW  00
06F7:  SUBWFC 24,W
06F8:  MOVWF  2A
06F9:  BCF    03.0
06FA:  RLF    29,W
06FB:  MOVWF  79
06FC:  RLF    2A,W
06FD:  MOVWF  7A
06FE:  MOVF   79,W
06FF:  MOVWF  29
0700:  CALL   003
0701:  MOVWF  77
0702:  INCF   29,W
0703:  CALL   003
0704:  MOVWF  7A
0705:  MOVF   77,W
0706:  MOVWF  25
0707:  MOVF   7A,W
0708:  MOVWF  26
....................             break; 
0709:  GOTO   72E
....................     
....................          case DEC: 
....................             step_count--; 
070A:  MOVF   23,W
070B:  BTFSC  03.2
070C:  DECF   24,F
070D:  DECFSZ 23,F
....................             // Check if we at last step 
....................             if(step_count == 0) 
070E:  GOTO   714
070F:  MOVF   24,F
0710:  BTFSS  03.2
0711:  GOTO   714
....................             { 
....................                motion_state = STEADY; 
0712:  MOVLW  04
0713:  MOVWF  22
....................             } 
....................                 
....................             period = periods[step_count]; 
0714:  BCF    03.0
0715:  RLF    23,W
0716:  MOVWF  79
0717:  RLF    24,W
0718:  MOVWF  7A
0719:  MOVF   79,W
071A:  MOVWF  29
071B:  CALL   003
071C:  MOVWF  77
071D:  INCF   29,W
071E:  CALL   003
071F:  MOVWF  7A
0720:  MOVF   77,W
0721:  MOVWF  25
0722:  MOVF   7A,W
0723:  MOVWF  26
....................             break; 
0724:  GOTO   72E
....................              
....................          case STEADY: 
....................             if(running) 
0725:  BTFSS  27.0
0726:  GOTO   72E
....................             { 
....................                running    = 0; 
0727:  BCF    27.0
....................                period     = 0; 
0728:  CLRF   26
0729:  CLRF   25
....................                step_count = 0; 
072A:  CLRF   24
072B:  CLRF   23
....................                md_set_state(OFF); 
072C:  CLRF   33
072D:  CALL   48B
....................             } 
....................             break; 
....................       } 
....................       if(running) 
072E:  BTFSS  27.0
072F:  GOTO   756
....................       {   
....................          delay_us(off_time); 
0730:  MOVLW  1A
0731:  MOVWF  77
0732:  DECFSZ 77,F
0733:  GOTO   732
0734:  NOP
....................          output_low(DRV_STEP); 
0735:  MOVLB  01
0736:  BCF    0C.0
0737:  MOVLB  02
0738:  BCF    0C.0
....................          delay_us(period - off_time + 14); 
0739:  MOVLW  0A
073A:  MOVLB  00
073B:  SUBWF  25,W
073C:  MOVWF  29
073D:  MOVLW  00
073E:  SUBWFC 26,W
073F:  MOVWF  2A
0740:  MOVLW  0E
0741:  ADDWF  29,F
0742:  MOVLW  00
0743:  ADDWFC 2A,F
0744:  MOVF   2A,W
0745:  MOVWF  2B
0746:  INCF   2B,F
0747:  DECF   2B,F
0748:  BTFSC  03.2
0749:  GOTO   74E
074A:  MOVLW  FF
074B:  MOVWF  2C
074C:  CALL   620
074D:  GOTO   747
074E:  MOVF   29,W
074F:  MOVWF  2C
0750:  CALL   620
....................          output_high(DRV_STEP); 
0751:  MOVLB  01
0752:  BCF    0C.0
0753:  MOVLB  02
0754:  BSF    0C.0
0755:  MOVLB  00
....................       } 
0756:  GOTO   639
....................    } 
0757:  MOVLP  00
0758:  GOTO   783 (RETURN)
.................... } 
....................  
.................... // Main method 
.................... void main() 
*
0762:  MOVLW  F0
0763:  MOVLB  01
0764:  MOVWF  19
0765:  MOVLB  00
0766:  CLRF   21
0767:  CLRF   20
0768:  MOVLW  04
0769:  MOVWF  22
076A:  MOVLB  03
076B:  CLRF   0C
076C:  CLRF   0D
076D:  MOVLB  02
076E:  CLRF   12
076F:  CLRF   11
0770:  CLRF   14
0771:  CLRF   13
.................... { 
....................    //             76543210 
....................      set_tris_a(0b00101100);       // Set I/O states of the ports 
0772:  MOVLW  2C
0773:  TRIS   5
....................      set_tris_b(0b11001111); 
0774:  MOVLW  CF
0775:  TRIS   6
....................     
....................    delay_ms(500); 
0776:  MOVLW  02
0777:  MOVLB  00
0778:  MOVWF  23
0779:  MOVLW  FA
077A:  MOVWF  38
077B:  CALL   458
077C:  DECFSZ 23,F
077D:  GOTO   779
....................     
....................    //fprintf(RS232,"\n\n\rMODESIS LASER POSITIONING STAGE\n\n\r"); 
....................     
....................    set_pins(); 
077E:  GOTO   46D
....................    set_SPI(); 
077F:  GOTO   473
....................    set_variables(); 
0780:  GOTO   480
....................    md_init();           // Initialize motor driver 
0781:  GOTO   4DC
....................    motion_cycle();      // Start motion cycle 
0782:  GOTO   632
.................... } 
0783:  SLEEP

Configuration Fuses:
   Word  1: 0E44   INTRC_IO NOWDT PUT MCLR PROTECT CPD BROWNOUT NOCLKOUT NOIESO NOFCMEN
   Word  2: 1AFF   NOWRT PLL_SW STVREN BORV25 NODEBUG NOLVP
