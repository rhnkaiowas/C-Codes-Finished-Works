#ifndef Drv8711  
#define Drv8711 

/*
// CTRL register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 000: CTRL reg
// DTIME (dead time btw MOSFET switching)    (R/W) (bit 11-10) 00: 400 ns, 
//                                                             01: 450 ns, 
//                                                             10: 650 ns, 
//                                                             11: 850 ns
// ISGain (current amplifier gain)           (R/W) (bit 9-8)   00: Gain of 5, 
//                                                             01: Gain of 10, 
//                                                             10: Gain of 20, 
//                                                             11: Gain of 40
// EXSTALL (source of stall detection)       (R/W) (bit 7)     0: Internal
//                                                             1: External
// MODE (microstepping mode)                 (R/W) (bit 6-3)   0000: Full-step, 71% current
//                                                             0001: Half step
//                                                             0010: 1/4 step
//                                                             0011: 1/8 step
//                                                             0100: 1/16 step
//                                                             0101: 1/32 step
//                                                             0110: 1/64 step
//                                                             0111: 1/128 step
//                                                             1000: 1/256 step
// RSTEP (single step output)                (W)   (bit 2)     0: No action
//                                                             1: Indexer will advance one step; automatically cleared after write
// direction                                 (R/W) (bit 1)     0: Direction set by DIR pin
//                                                             1: Direction set by inverse of DIR pin
// motor state                               (R/W) (bit 0)     0: Disable motor
//                                                             1: Enable motor
*/
enum dead_time          {dtime_400ns = 0, dtime_450ns = 1, dtime_650ns = 2, dtime_850ns = 3};
enum curent_amp_gain    {gain_5 = 0, gain_10 = 1, gain_20 = 2, gain_40 = 3};
enum src_stall_detect   {stall_int = 0, stall_ext = 1};
enum microstepping      {full_step = 0, half_step = 1, _4x = 2, _8x = 3, _16x = 4, _32x = 5, _64x = 6, _128x = 7, _256x = 8};
enum single_step_out    {no_action = 0, one_step = 1};
enum dir_control        {dir_pin = 0, inverse_dir_pin = 1};
enum motor_state        {motor_disable = 0, motor_enable = 1};
// Sets CTRL register
void set_ctrl_reg(dead_time dtime, curent_amp_gain gain, src_stall_detect stall, microstepping mode, single_step_out rstep, dir_control dir, motor_state state);
// Sets CTRL register
void set_dead_time(dead_time dtime);
// Sets CTRL register
void set_amp_gain(curent_amp_gain gain);
// Sets CTRL register
void set_stall_detection(src_stall_detect stall);
// Sets CTRL register
void set_microstepping_mode(microstepping mode);
// Sets CTRL register
void set_rstep(single_step_out rstep);
// Sets CTRL register
void set_dir_mode(dir_control dir);
// Sets CTRL register
void set_motor_state(motor_state state);
/*
// TORQUE register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 001: Torque reg
// Reserved                                        (bit 11)
// SMPLTH (Back EMF sample threshold)        (R/W) (bit 10-8)  000: 50 us, 
//                                                             001: 100 us, 
//                                                             010: 200 us, 
//                                                             011: 300 us,
//                                                             100: 400 us,
//                                                             101: 600 us,
//                                                             110: 800 us, 
//                                                             111: 1000 us,
// Torque (Output current for H-bridges)     (R/W) (bit 7-0)   0xFFh
*/
enum emf_samp_thr       {emf_50us = 0, emf_100us = 1, emf_200us = 2, emf_300us = 3, emf_400us = 4, emf_600us = 5, emf_800us = 6, emf_1000us = 7};
// Sets TORQUE register
void set_torque_reg(emf_samp_thr emf, unsigned int8 torque);
// Sets back EMF sample threshold
void set_emf_samp_thr(emf_samp_thr emf);
// Sets full-scale output current for both H-bridges
void set_torque(unsigned int8 torque);
/*
// OFF register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 010: OFF reg
// Reserved                                        (bit 11-9)
// PWMMODE (indexer mode)                    (R/W) (bit 8)     0: Use internal indexer, 
//                                                             1: Bypass indexer, use xINx inputs to control outputs 
// TOFF (Sets fixed off time, 500ns steps)   (R/W) (bit 7-0)   0x00h: 500 ns
//                                                             0xFFh: 128 us
*/
enum pwm_mode           {int_indexer = 0, ext_indexer = 1};
// Sets OFF register
void set_off_reg(pwm_mode indexer, unsigned int8 toff);
// Sets pwm indexer mode
void set_pwm_mode(pwm_mode indexer);
// Sets fixed off time
void set_off_time(unsigned int8 toff);
/*
// BLANK register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 011: BLANK reg
// Reserved                                        (bit 11-9)
// ABT (adaptive blanking time state)        (R/W) (bit 8)     0: Disable adaptive blanking time, 
//                                                             1: Enable adaptive blanking time
// TBLANK (Sets blanking time, 20ns steps)   (R/W) (bit 7-0)   0x00h: 1.00 us
//                                                             ...
//                                                             0x32h: 1.00 us
//                                                             0x33h: 1.02 us
//                                                             ...
//                                                             0xFEh: 5.10 us
//                                                             0xFFh: 5.12 us
*/
enum adap_blank_time    {disable_abt = 0, enable_abt = 1};
// Sets BLANK register
void set_blank_reg(adap_blank_time abt, unsigned int8 tblank);
// Sets adaptive blank time state
void set_adap_blank_time(adap_blank_time abt);
// Sets blanking time
void set_blank_time(unsigned int8 tblank);
/*
// DECAY register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 100: DECAY reg
// Reserved                                        (bit 11)
// DECMODE (decay modes)                     (R/W) (bit 10-8)  000: Force slow decay at all times
//                                                             001: Slow decay for increasing current, mixed decay for decreasing current (indexer mode only)
//                                                             010: Force fast decay at all times
//                                                             011: Use mixed decay at all times
//                                                             100: Slow decay for increasing current, auto mixed decay for decreasing current (indexer mode only)
//                                                             101: Use auto mixed decay at all times
//                                                             110-111: Reserved
// TDECAY (Sets transition time, 500ns steps)(R/W) (bit 7-0)   0x00h: 500 ns
//                                                             0xFFh: 128 us
*/
enum decay_mode         {force_slow_decay = 0, slow_mixed_decay = 1, force_fast_decay = 2, mixed_decay = 3, slow_auto_mixed_decay = 4, auto_mixed_decay = 5};
// Sets DECAY register
void set_decay_reg(decay_mode dmode, unsigned int8 tdecay);
// Sets decay (transition) mode
void set_decay_mode(decay_mode dmode);
// Sets decay (transition) time
void set_decay_time(unsigned int8 tdecay);
/*
// STALL register bits
// data operation type                             (bit 15)    0: write,
//                                                             1: read
// register address                                (bit 14-12) 101: STALL reg
// VDIV (Back EMF divider)                   (R/W) (bit 11-10) 00: Back EMF is divided by 32
//                                                             01: Back EMF is divided by 16
//                                                             10: Back EMF is divided by 8
//                                                             11: Back EMF is divided by 4
// SDCNT (Back EMF sample step mode)         (R/W) (bit 9-8)   00: STALLn asserted on first step with back EMF below SDTHR
//                                                             01: STALLn asserted after 2 steps
//                                                             10: STALLn asserted after 4 steps
//                                                             11: STALLn asserted after 8 steps
// SDTHR (Sets stall detect threshold)       (R/W) (bit 7-0)   0x00h: 0
//                                                             0xFFh: 255
*/
enum emf_vol_div        {divide_by_32 = 0, divide_by_16 = 1, divide_by_8 = 2, divide_by_4 = 3};
enum emf_samp_mode      {after_1_step = 0, after_2_steps = 1, after_4_steps = 2, after_8_steps = 3};
// Sets STALL register
void set_stall_reg(emf_vol_div divider, emf_samp_mode smode, unsigned int8 stall_thr);
// Sets back EMF voltage divider
void set_emf_vol_div(emf_vol_div divider);
// Sets back EMF sample step mode
void set_emf_samp_mode(emf_samp_mode smode);
// Sets stall detect threshold
void set_stall_thr(unsigned int8 stall_thr);
/*
// DRIVE register bits
// data operation type                       (R/W) (bit 15)    0: write, 
//                                                             1: read
// register address                          (R/W) (bit 14-12) 110: STALL reg
// IDRIVEP (High-side gate peak current)     (R/W) (bit 11-10) 00: 50 mA peak (source)
//                                                             01: 100 mA peak (source)
//                                                             10: 150 mA peak (source)
//                                                             11: 200 mA peak (source)
// IDRIVEN (Low-side gate peak current)      (R/W) (bit 9-8)   00: 100 mA peak (sink)
//                                                             01: 200 mA peak (sink)
//                                                             10: 300 mA peak (sink)
//                                                             11: 400 mA peak (sink)
// TDRIVEP (High-side gate drive time)       (R/W) (bit 7-6)   00: 250 ns
//                                                             01: 500 ns
//                                                             10: 1 us
//                                                             11: 2 us
// TDRIVEN (Low-side gate drive time)        (R/W) (bit 5-4)   00: 250 ns
//                                                             01: 500 ns
//                                                             10: 1 us
//                                                             11: 2 us
// OCPDEG (OCP deglitch time)                (R/W) (bit 3-2)   00: 1 us
//                                                             01: 2 us
//                                                             10: 4 us
//                                                             11: 8 us
// OCPTH (OCP threshold)                     (R/W) (bit 1-0)   00: 250 mV
//                                                             01: 500 mV
//                                                             10: 750 mV
//                                                             11: 1000 mV
*/
enum hs_peak_cur        {hs_50mA = 0, hs_100mA = 1, hs_150mA = 2, hs_200mA = 3};
enum ls_peak_cur        {ls_100mA = 0, ls_200mA = 1, ls_300mA = 2, ls_400mA = 3};
enum hs_drive_time      {hs_250ns = 0, hs_500ns = 1, hs_1us = 2, hs_2us = 3};
enum ls_drive_time      {ls_250ns = 0, ls_500ns = 1, ls_1us = 2, ls_2us = 3};
enum ocp_deg_time       {ocp_1us = 0, ocp_2us = 1, ocp_4us = 2, ocp_8us = 3};
enum ocp_thr            {ocp_250mV = 0, ocp_500mV = 1, ocp_750mV = 2, ocp_1000mV = 3};
// Sets DRIVE register
void set_drive_reg(hs_peak_cur idrivep, ls_peak_cur idriven, hs_drive_time tdrivep, ls_drive_time tdriven, ocp_deg_time ocpdeg, ocp_thr ocpth);
// Sets high-side gate peak current
void set_hs_peak_cur(hs_peak_cur idrivep);
// Sets low-side gate peak current
void set_ls_peak_cur(ls_peak_cur idriven);
// Sets high-side gate drive time
void set_hs_drive_time(hs_drive_time tdrivep);
// Sets low-side gate drive time
void set_ls_drive_time(ls_drive_time tdriven);
// Sets OCP deglitch time
void set_ocp_deg_time(ocp_deg_time ocpdeg);
// Sets OCP threshold
void set_ocp_thr(ocp_thr ocpth);
/*
// STATUS register bits
// data operation type                             (bit 15)    0: write, 
//                                                             1: read
// register address                                (bit 14-12) 111: STATUS reg
// Reserved                                        (bit 11-8)
// STDLAT (Stall clear flag)                 (R/W) (bit 7)     0: Normal operation
//                                                             1: Latched stall detect
//                                                             (Write a '0' to this bit to clear the fault and resume operation)
// STD (Stall detected flag)                 (R)   (bit 6)     0: Normal operation
//                                                             1: Stall detected
// UVLO (Undervoltage lockout flag)          (R)   (bit 5)     0: Normal operation
//                                                             1: Undervoltage lockout
//                                                             (UVLO bit will clear after VM has increased over VUVLO)
// BPDF (Channel B predriver fault flag)     (R/W) (bit 4)     0: Normal operation
//                                                             1: Channel B predriver fault
//                                                             (Write a '0' to this bit to clear the fault and resume operation)
// APDF (Channel A predriver fault flag)     (R/W) (bit 3)     0: Normal operation
//                                                             1: Channel A predriver fault
//                                                             (Write a '0' to this bit to clear the fault and resume operation)
// BOCP (Channel B overcurrent flag)         (R/W) (bit 2)     0: Normal operation
//                                                             1: Channel B overcurrent shutdown
//                                                             (Write a '0' to this bit to clear the fault and resume operation)
// AOCP (Channel A overcurrent flag)         (R/W) (bit 1)     0: Normal operation
//                                                             1: Channel A overcurrent shutdown
//                                                             (Write a '0' to this bit to clear the fault and resume operation)
// OTS (Overtemperature shutdown flag)       (R)   (bit 0)     0: Normal operation
//                                                             1: Device has entered overtemperature shutdown
//                                                             (OTS bit will clear once temperature has fallen to safe levels
)
*/ 
// Clears STATUS register
void clear_status_reg();
// Clears STATUS register
void clear_stall_flag();
// Clears STATUS register
void clear_b_fault_flag();
// Clears STATUS register
void clear_a_fault_flag();
// Clears STATUS register
void clear_b_over_curr_flag();
// Clears STATUS register
void clear_a_over_curr_flag();

#endif Drv8711
